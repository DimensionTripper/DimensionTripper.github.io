<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>AFO</title>
      <link href="/2019/04/07/AFO/"/>
      <url>/2019/04/07/AFO/</url>
      <content type="html"><![CDATA[<h1 id="博主AFO通知"><a href="#博主AFO通知" class="headerlink" title="博主AFO通知"></a>博主AFO通知</h1><p>由于博主已经退役了，此博客无限期停更</p><blockquote><p>Wepdekr AFO on 2019.04.07</p></blockquote>]]></content>
      
      <categories>
          
          <category> 重大事件 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>点分治学习笔记</title>
      <link href="/2019/01/05/NBDC/"/>
      <url>/2019/01/05/NBDC/</url>
      <content type="html"><![CDATA[<p><img src="https://i.loli.net/2018/12/22/5c1e15b46171c.jpg" alt=""></p><a id="more"></a><h1 id="点分治学习笔记"><a href="#点分治学习笔记" class="headerlink" title="点分治学习笔记"></a>点分治学习笔记</h1><h2 id="什么是点分治"><a href="#什么是点分治" class="headerlink" title="什么是点分治"></a>什么是点分治</h2><p>点分治是一种能够比较方便的处理树上的路径问题的工具，以下有一个简单的例子：</p><blockquote><p>给出一棵n个节点的树和一个整数k，问树上距离是k的倍数的点对有多少。</p></blockquote><p>一个显然的做法是暴力选择两个点，然后 $\text{DFS}$ 暴力找路径，复杂度 $O(n^3)$ 。</p><p> $n&gt;1000$ ，哦豁完蛋。</p><p>记录每个到根的距离然后每次枚举点对的时候倍增/树剖求 $\text{LCA}$ ？</p><p> $n&gt;10^4$ 后这种复杂度为 $O(n^2logn)$ 的做法也稳定TLE了，所以呢？</p><blockquote><p>一种做法是找到一个根，然后遍历这个子树中的每个点，依次处理每个点的子树答案。</p><p>在子树里可以直接把所有点到根的路径长度对 $k$ 取模之后排序，然后就可以用乘法原理快速求出答案（</p><p>期望复杂度 $O(nklogn)$ （大概吧</p></blockquote><p>为了实现上述做法就回到了这篇文章的话题：点分治。</p><h2 id="点分治原理"><a href="#点分治原理" class="headerlink" title="点分治原理"></a>点分治原理</h2><p>接着上面的说法，我们可以想到对于一条路径，有且仅有以下两种情况：</p><ol><li>在子树中，不经过根节点</li><li>从一棵子树跨过根节点到另外一棵子树</li></ol><p>显然我们会发现：随着往下递归的进行，所有的情况1最后都会变成情况2，所以我们只用考虑这一种情况便好。然后我们又可以发现：在子树中只要记录每一个点到当前子树根节点的距离就可以算出任意两点间的路径长。</p><p>这就是分治的基本原理。</p><h2 id="选择重心"><a href="#选择重心" class="headerlink" title="选择重心"></a>选择重心</h2><p>说到底点分治还是分治，也就是简单的把问题分成几个子问题然后合并，但是怎么分与怎么合并，这些都是问题。</p><p>显然我们可以想到的是选择子树根节点的时候不能随便选，因为分治问题一般都是递归处理，所以说根的选择会涉及到递归深度的问题，于是就提到点分治中的一个概念：重心。我们把一棵无根树中那个作为根后可以使得最大的子树最小的点称为这棵树的重心。</p><p>求重心不是一个麻烦问题，树形 $\text{DP}$ 就能轻松解决，复杂度 $O(n)$ 。</p><p>以下是几个会用到的变量：</p><ul><li>$siz[i]$ 以 $i$ 为根节点的子树的节点数</li><li>$sum$ 总结点数</li><li>$f[i]$ 以 $i$ 为根节点的所有子树中最大子树的 $siz$ </li></ul><p>然后由于并不复杂，代码很好读懂，我也就不解释了（懒.jpg</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">Get_Root</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> pre)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">siz[x] = <span class="number">1</span>, f[x] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (ri i = G.head[x]; i; i = G.e[i].nxt)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> v = G.e[i].to;</span><br><span class="line"><span class="keyword">if</span> (v == pre || vis[v])</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">Get_Root(v, x);</span><br><span class="line">siz[x] += siz[v];</span><br><span class="line">f[x] = chkmax(f[x], siz[v]);</span><br><span class="line">&#125;</span><br><span class="line">f[x] = max(f[x], sum - siz[x]);</span><br><span class="line"><span class="keyword">if</span> (f[x] &lt; f[rt])</span><br><span class="line">rt = x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="点分治的实现"><a href="#点分治的实现" class="headerlink" title="点分治的实现"></a>点分治的实现</h2><p>有了以上的东西之后，点分治就很好实现了</p><p>首先仍然是几个（其实只有一个）变量：</p><ul><li>$vis[i]$ 用与记录节点 $i$ 是否被分治过</li></ul><p>然后由于并不难理解，也直接放代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">Solve</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ans += calc(x, <span class="number">0</span>);</span><br><span class="line">vis[x] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (ri i = G.head[x]; i; i = G.e[i].nxt)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> v = G.e[i].to;</span><br><span class="line"><span class="keyword">if</span> (vis[v])</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">sum = f[<span class="number">0</span>] = siz[v];</span><br><span class="line">rt = <span class="number">0</span>;</span><br><span class="line">Get_Root(v, x);</span><br><span class="line">Solve(rt);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要注意的是为了是每一次递归都是最优的，所以递归到下一层前需要先求出子树的重心。</p><p>另外，这里的 $calc$ 函数是一个统计答案的函数，因题而异。</p><p>而且由于题目的不同 $Solve$ 函数也会发生变化，所以这里记板子并没有什么作用。</p><h2 id="关于统计答案发生错误的那档事"><a href="#关于统计答案发生错误的那档事" class="headerlink" title="关于统计答案发生错误的那档事"></a>关于统计答案发生错误的那档事</h2><p>如果你按照上面的 $Solve$ 函数去打的话，你会发现答案是错的。为什么呢？其实我们仔细想一想就会发现问题了：</p><p><img src="https://i.loli.net/2018/12/22/5c1e255271076.png" alt=""></p><p>在上图中我们分治到节点1的子树后我们会认为节点5和节点6的距离是<code>4+4=8</code>，但这显然是错误的，所以在往下递归之前要把这些多算的东西减掉。</p><p>然后就变成了这样：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">Solve</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ans += calc(x, <span class="number">0</span>);</span><br><span class="line">vis[x] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (ri i = G.head[x]; i; i = G.e[i].nxt)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> v = G.e[i].to;</span><br><span class="line"><span class="keyword">if</span> (vis[v])</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">        ans -= calc(x, G.e[i].weight)</span><br><span class="line">sum = f[<span class="number">0</span>] = siz[v];</span><br><span class="line">rt = <span class="number">0</span>;</span><br><span class="line">Get_Root(v, x);</span><br><span class="line">Solve(rt);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="所以开头的那道例题"><a href="#所以开头的那道例题" class="headerlink" title="所以开头的那道例题"></a>所以开头的那道例题</h2><p>我就不讲了（反正都是我瞎yy的，我才懒得写呢</p><h1 id="一些例题"><a href="#一些例题" class="headerlink" title="一些例题"></a>一些例题</h1><h2 id="1-【国家集训队】聪聪可可"><a href="#1-【国家集训队】聪聪可可" class="headerlink" title="1.【国家集训队】聪聪可可"></a>1.【国家集训队】聪聪可可</h2><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给出一棵树，问两个点之间的距离能被3整除的概率是多少</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>显然是一道裸题，用<code>t[i]</code>表示子树中到根的距离模3为<code>i</code>的点对数量，显然在一棵子树中的答案就是</p><script type="math/tex; mode=display">t[0] ^ 2 + t[1] \times t[2] \times 2</script><p>所以就只用<code>DFS</code>一遍就可以解决了</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ri register int</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span> + <span class="number">110</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">110</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x7fffffff</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-8</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">il <span class="keyword">int</span> <span class="title">chkmax</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a &gt; b ? a : b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">int</span> <span class="title">chkmin</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a &lt; b ? a : b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">il <span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> b ? gcd(b, a % b) : a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">il <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">0</span>, f = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">char</span> ch = getchar();</span><br><span class="line"><span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (ch == <span class="string">'-'</span>)</span><br><span class="line">f = <span class="number">-1</span>;</span><br><span class="line">ch = getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch))</span><br><span class="line">&#123;</span><br><span class="line">x = (x &lt;&lt; <span class="number">3</span>) + (x &lt;&lt; <span class="number">1</span>) + ch - <span class="string">'0'</span>;</span><br><span class="line">ch = getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, sum, rt, ans;</span><br><span class="line"><span class="keyword">int</span> siz[N], f[N], dep[N], t[<span class="number">3</span>];</span><br><span class="line"><span class="keyword">bool</span> vis[N];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Graph</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> cnt, head[N];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> to, nxt, weight;</span><br><span class="line">&#125;;</span><br><span class="line">edge e[N];</span><br><span class="line"></span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">e[++cnt] = (edge) &#123;v, head[u], w&#125;;</span><br><span class="line">head[u] = cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">Link</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">add_edge(u, v, w);</span><br><span class="line">add_edge(v, u, w);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">Graph G;</span><br><span class="line"></span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">Get_Root</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> pre)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">siz[x] = <span class="number">1</span>, f[x] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (ri i = G.head[x]; i; i = G.e[i].nxt)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> v = G.e[i].to;</span><br><span class="line"><span class="keyword">if</span> (v == pre || vis[v])</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">Get_Root(v, x);</span><br><span class="line">siz[x] += siz[v];</span><br><span class="line">f[x] = chkmax(f[x], siz[v]);</span><br><span class="line">&#125;</span><br><span class="line">f[x] = max(f[x], sum - siz[x]);</span><br><span class="line"><span class="keyword">if</span> (f[x] &lt; f[rt])</span><br><span class="line">rt = x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> pre)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">t[dep[x]]++;</span><br><span class="line"><span class="keyword">for</span> (ri i = G.head[x]; i; i = G.e[i].nxt)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> v = G.e[i].to;</span><br><span class="line"><span class="keyword">if</span> (v == pre || vis[v])</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">dep[v] = (dep[x] + G.e[i].weight) % <span class="number">3</span>;</span><br><span class="line">DFS(v, x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">il <span class="keyword">int</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> now)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(t, <span class="number">0</span>, <span class="keyword">sizeof</span>(t));</span><br><span class="line">dep[x] = now;</span><br><span class="line">DFS(x, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">return</span> t[<span class="number">0</span>] * t[<span class="number">0</span>] + t[<span class="number">1</span>] * t[<span class="number">2</span>] * <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">Solve</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ans += calc(x, <span class="number">0</span>);</span><br><span class="line">vis[x] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (ri i = G.head[x]; i; i = G.e[i].nxt)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> v = G.e[i].to;</span><br><span class="line"><span class="keyword">if</span> (vis[v])</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">ans -= calc(v, G.e[i].weight);</span><br><span class="line">sum = f[<span class="number">0</span>] = siz[v];</span><br><span class="line">rt = <span class="number">0</span>;</span><br><span class="line">Get_Root(v, x);</span><br><span class="line">Solve(rt);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">n = read();</span><br><span class="line"><span class="keyword">for</span> (ri i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> u = read(), v = read(), w = read();</span><br><span class="line">G.Link(u, v, w % <span class="number">3</span>);</span><br><span class="line">&#125;</span><br><span class="line">rt = <span class="number">0</span>;</span><br><span class="line">sum = f[<span class="number">0</span>] = n;</span><br><span class="line">Get_Root(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">Solve(rt);</span><br><span class="line"><span class="keyword">int</span> d = gcd(ans, n * n);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d/%d"</span>, ans / d, n * n / d);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">5</span></span><br><span class="line"><span class="comment">1 2 1</span></span><br><span class="line"><span class="comment">1 3 2</span></span><br><span class="line"><span class="comment">1 4 1</span></span><br><span class="line"><span class="comment">2 5 3</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="2-POJ1741-Tree"><a href="#2-POJ1741-Tree" class="headerlink" title="2.[POJ1741]Tree"></a>2.[POJ1741]Tree</h2><h3 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h3><p>给出一棵树，问有多少点对的距离小于<code>k</code></p><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>在每一层分治的时候，记录一下每个点到当前重心的距离，然后双指针扫一下就完了</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ri register int</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span> + <span class="number">110</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">110</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x7fffffff</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-8</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">il <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">0</span>, f = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">char</span> ch = getchar();</span><br><span class="line"><span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (ch == <span class="string">'-'</span>)</span><br><span class="line">f = <span class="number">-1</span>;</span><br><span class="line">ch = getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch))</span><br><span class="line">&#123;</span><br><span class="line">x = (x &lt;&lt; <span class="number">3</span>) + (x &lt;&lt; <span class="number">1</span>) + ch - <span class="string">'0'</span>;</span><br><span class="line">ch = getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">il <span class="keyword">int</span> <span class="title">chkmax</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a &gt; b ? a : b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">int</span> <span class="title">chkmin</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a &lt; b ? a : b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, k, rt, sum, ans, tot;</span><br><span class="line"><span class="keyword">int</span> f[N], siz[N], dep[N], dis[N];</span><br><span class="line"><span class="keyword">bool</span> vis[N];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Graph</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> cnt, head[N];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> to, nxt, weight;</span><br><span class="line">&#125;;</span><br><span class="line">edge e[N];</span><br><span class="line"></span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">Clear</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cnt = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">memset</span>(head, <span class="number">0</span>, <span class="keyword">sizeof</span>(head));</span><br><span class="line"><span class="built_in">memset</span>(e, <span class="number">0</span>, <span class="keyword">sizeof</span>(e));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">e[++cnt] = (edge) &#123;v, head[u], w&#125;;</span><br><span class="line">head[u] = cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">Link</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">add_edge(u, v, w);</span><br><span class="line">add_edge(v, u, w);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">Graph G;</span><br><span class="line"></span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">Clear</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">G.Clear();</span><br><span class="line">ans = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span>(vis));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">Get_Root</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> pre)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">siz[x] = <span class="number">1</span>, f[x] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (ri i = G.head[x]; i; i = G.e[i].nxt)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> v = G.e[i].to;</span><br><span class="line"><span class="keyword">if</span> (v == pre || vis[v])</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">Get_Root(v, x);</span><br><span class="line">siz[x] += siz[v];</span><br><span class="line">f[x] = chkmax(f[x], siz[v]);</span><br><span class="line">&#125;</span><br><span class="line">f[x] = chkmax(f[x], sum - siz[x]);</span><br><span class="line"><span class="keyword">if</span> (f[x] &lt; f[rt])</span><br><span class="line">rt = x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> pre)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">dis[++tot] = dep[x];</span><br><span class="line"><span class="keyword">for</span> (ri i = G.head[x]; i; i = G.e[i].nxt)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> v = G.e[i].to;</span><br><span class="line"><span class="keyword">if</span> (vis[v] || v == pre)</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">dep[v] = dep[x] + G.e[i].weight;</span><br><span class="line">DFS(v, x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">il <span class="keyword">int</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> now)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">tot = <span class="number">0</span>;</span><br><span class="line">dep[x] = now;</span><br><span class="line">DFS(x, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ret = <span class="number">0</span>, l = <span class="number">1</span>, r = tot;</span><br><span class="line">sort(dis + <span class="number">1</span>, dis + <span class="number">1</span> + tot);</span><br><span class="line"><span class="keyword">while</span>(l &lt; r)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (dis[l] + dis[r] &gt; k &amp;&amp; l &lt; r)</span><br><span class="line">r--;</span><br><span class="line">ret += r - l;</span><br><span class="line">l++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">Solve</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ans += calc(x, <span class="number">0</span>);</span><br><span class="line">vis[x] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (ri i = G.head[x]; i; i = G.e[i].nxt)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> v = G.e[i].to;</span><br><span class="line"><span class="keyword">if</span> (vis[v])</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">ans -= calc(v, G.e[i].weight);</span><br><span class="line">sum = f[<span class="number">0</span>] = siz[v];</span><br><span class="line">rt = <span class="number">0</span>;</span><br><span class="line">Get_Root(v, x);</span><br><span class="line">Solve(rt);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">n = read(), k = read();</span><br><span class="line"><span class="keyword">if</span> (!n &amp;&amp; !k)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">Clear();</span><br><span class="line"><span class="keyword">for</span> (ri i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> u = read(), v = read(), w = read();</span><br><span class="line">G.Link(u, v, w);</span><br><span class="line">&#125;</span><br><span class="line">sum = f[<span class="number">0</span>] = n;</span><br><span class="line">rt = <span class="number">0</span>;</span><br><span class="line">Get_Root(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">Solve(rt);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">5 4</span></span><br><span class="line"><span class="comment">1 2 3</span></span><br><span class="line"><span class="comment">1 3 1</span></span><br><span class="line"><span class="comment">1 4 2</span></span><br><span class="line"><span class="comment">3 5 1</span></span><br><span class="line"><span class="comment">7 10</span></span><br><span class="line"><span class="comment">1 6 13 </span></span><br><span class="line"><span class="comment">6 3 9 </span></span><br><span class="line"><span class="comment">3 5 7 </span></span><br><span class="line"><span class="comment">4 1 3 </span></span><br><span class="line"><span class="comment">2 4 20 </span></span><br><span class="line"><span class="comment">4 7 2</span></span><br><span class="line"><span class="comment">0 0</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="3-Luogu3806-【模板】点分治1"><a href="#3-Luogu3806-【模板】点分治1" class="headerlink" title="3.[Luogu3806]【模板】点分治1"></a>3.[Luogu3806]【模板】点分治1</h2><h3 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h3><p>给出一棵树，问是否有距离为<code>k</code>的点对</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>每一层分治的时候处理出子树中每个点到当前中心的距离，然后暴力枚举子树中的所有点对统计即可，最后查询的时候看距离为<code>k</code>的点对数量是否大于0即可</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ri register int</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span> + <span class="number">110</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">110</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x7fffffff</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-8</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">il <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">0</span>, f = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">char</span> ch = getchar();</span><br><span class="line"><span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (ch == <span class="string">'-'</span>)</span><br><span class="line">f = <span class="number">-1</span>;</span><br><span class="line">ch = getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch))</span><br><span class="line">&#123;</span><br><span class="line">x = (x &lt;&lt; <span class="number">3</span>) + (x &lt;&lt; <span class="number">1</span>) + ch - <span class="string">'0'</span>;</span><br><span class="line">ch = getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">il <span class="keyword">int</span> <span class="title">chkmax</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a &gt; b ? a : b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">int</span> <span class="title">chkmin</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a &lt; b ? a : b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, rt, tot, sum;</span><br><span class="line"><span class="keyword">int</span> siz[N], f[N], dep[N], ans[N], dis[N];</span><br><span class="line"><span class="keyword">bool</span> vis[N];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Graph</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> cnt, head[N];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> to, nxt, weight;</span><br><span class="line">&#125;;</span><br><span class="line">edge e[N];</span><br><span class="line"></span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">e[++cnt] = (edge) &#123;v, head[u], w&#125;;</span><br><span class="line">head[u] = cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">Link</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">add_edge(u, v, w);</span><br><span class="line">add_edge(v, u, w);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">Graph G;</span><br><span class="line"></span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">Get_Root</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> pre)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">siz[x] = <span class="number">1</span>, f[x] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (ri i = G.head[x]; i; i = G.e[i].nxt)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> v = G.e[i].to;</span><br><span class="line"><span class="keyword">if</span> (v == pre || vis[v])</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">Get_Root(v, x);</span><br><span class="line">siz[x] += siz[v];</span><br><span class="line">f[x] = chkmax(f[x], siz[v]);</span><br><span class="line">&#125;</span><br><span class="line">f[x] = chkmax(f[x], sum - siz[x]);</span><br><span class="line"><span class="keyword">if</span> (f[x] &lt; f[rt])</span><br><span class="line">rt = x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> pre)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">dis[++tot] = dep[x];</span><br><span class="line"><span class="keyword">for</span> (ri i = G.head[x]; i; i = G.e[i].nxt)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> v = G.e[i].to;</span><br><span class="line"><span class="keyword">if</span> (vis[v] || v == pre)</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">dep[v] = dep[x] + G.e[i].weight;</span><br><span class="line">DFS(v, x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> now, <span class="keyword">int</span> QwQ)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">tot = <span class="number">0</span>;</span><br><span class="line">dep[x] = now;</span><br><span class="line">DFS(x, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (ri i = <span class="number">1</span>; i &lt;= tot; i++)</span><br><span class="line"><span class="keyword">for</span> (ri j = <span class="number">1</span>; j &lt;= tot; j++)</span><br><span class="line"><span class="keyword">if</span> (i != j)</span><br><span class="line">ans[dis[i] + dis[j]] += QwQ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">Solve</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">calc(x, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">vis[x] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (ri i = G.head[x]; i; i = G.e[i].nxt)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> v = G.e[i].to;</span><br><span class="line"><span class="keyword">if</span> (vis[v])</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">calc(v, G.e[i].weight, <span class="number">-1</span>);</span><br><span class="line">sum = f[<span class="number">0</span>] = siz[v];</span><br><span class="line">rt = <span class="number">0</span>;</span><br><span class="line">Get_Root(v, x);</span><br><span class="line">Solve(rt);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">n = read(), m = read();</span><br><span class="line"><span class="keyword">for</span> (ri i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> u = read(), v = read(), w = read();</span><br><span class="line">G.Link(u, v, w);</span><br><span class="line">&#125;</span><br><span class="line">sum = f[<span class="number">0</span>] = n;</span><br><span class="line">rt = <span class="number">0</span>;</span><br><span class="line">Get_Root(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">Solve(rt);</span><br><span class="line"><span class="keyword">for</span> (ri i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> k = read();</span><br><span class="line"><span class="built_in">puts</span>(ans[k] ? <span class="string">"AYE"</span> : <span class="string">"NAY"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">2 1</span></span><br><span class="line"><span class="comment">1 2 2</span></span><br><span class="line"><span class="comment">2</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="4-FJOI2014-最短路径树问题"><a href="#4-FJOI2014-最短路径树问题" class="headerlink" title="4.[FJOI2014]最短路径树问题"></a>4.[FJOI2014]最短路径树问题</h2><h3 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a>题意</h3><p>给出一张图，问在它字典序最小的最短路径树上经过<code>k</code>个节点的最长路径的长度与条数</p><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><p>SB拼板题，套一个<code>Dijkstra</code>板子和一个点分治的板子就完了</p><p>点分治的部分就是递归下去后记录一下当前深度的最长路径与条数再转移一下就行了</p><p><del>所以这其实是一道长链剖分习题.jpg</del></p><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ri register int</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span> + <span class="number">110</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxm = <span class="number">110</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x7fffffff</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-8</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">il <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">0</span>, f = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">char</span> ch = getchar();</span><br><span class="line"><span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (ch == <span class="string">'-'</span>)</span><br><span class="line">f = <span class="number">-1</span>;</span><br><span class="line">ch = getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch))</span><br><span class="line">&#123;</span><br><span class="line">x = (x &lt;&lt; <span class="number">3</span>) + (x &lt;&lt; <span class="number">1</span>) + ch - <span class="string">'0'</span>;</span><br><span class="line">ch = getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">il <span class="keyword">int</span> <span class="title">chkmax</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a &gt; b ? a : b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">int</span> <span class="title">chkmin</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a &lt; b ? a : b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, k, ans, ans2;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span> &lt;pair &lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; &gt; vec[maxn];</span><br><span class="line">pair &lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; fr[maxn];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Graph</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> cnt, head[maxn];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> to, nxt, weight;</span><br><span class="line">&#125;;</span><br><span class="line">edge e[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">e[++cnt] = (edge) &#123;v, head[u], w&#125;;</span><br><span class="line">head[u] = cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">Link</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">add_edge(u, v, w);</span><br><span class="line">add_edge(v, u, w);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">Graph G;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> dis[maxn];</span><br><span class="line"></span><br><span class="line">priority_queue &lt;pair &lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;, <span class="built_in">vector</span> &lt;pair &lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; &gt;, greater &lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; &gt; &gt; q;</span><br><span class="line"></span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">Dijkstra</span><span class="params">(<span class="keyword">int</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (ri i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">dis[i] = inf;</span><br><span class="line">dis[s] = <span class="number">0</span>;</span><br><span class="line">q.push(mp(dis[s], s));</span><br><span class="line"><span class="keyword">while</span> (!q.empty())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> u = q.top().second, dist = q.top().first;</span><br><span class="line">q.pop();</span><br><span class="line"><span class="keyword">if</span> (dist != dis[u])</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">for</span> (ri i = <span class="number">0</span>; i &lt; vec[u].size(); i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> v = vec[u][i].first, w = vec[u][i].second;</span><br><span class="line"><span class="keyword">if</span> (dis[v] &gt; dis[u] + w)</span><br><span class="line">&#123;</span><br><span class="line">dis[v] = dis[u] + w;</span><br><span class="line">q.push(mp(dis[v], v));</span><br><span class="line">fr[v] = mp(u, w);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (dis[v] == dis[u] + w &amp;&amp; u &lt; fr[v].first)</span><br><span class="line">fr[v] = mp(u, w);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> tot, rt, sum;</span><br><span class="line"><span class="keyword">int</span> siz[maxn], f[maxn], dist[maxn], S[maxn], num[maxn];</span><br><span class="line"><span class="keyword">bool</span> vis[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">Get_Root</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> pre)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">siz[x] = <span class="number">1</span>, f[x] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (ri i = G.head[x]; i; i = G.e[i].nxt)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> v = G.e[i].to;</span><br><span class="line"><span class="keyword">if</span> (vis[v] || v == pre)</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">Get_Root(v, x);</span><br><span class="line">siz[x] += siz[v];</span><br><span class="line">f[x] = chkmax(f[x], siz[v]);</span><br><span class="line">&#125;</span><br><span class="line">f[x] = chkmax(f[x], sum - siz[x]);</span><br><span class="line"><span class="keyword">if</span> (f[x] &lt; f[rt])</span><br><span class="line">rt = x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> pre, <span class="keyword">int</span> now)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">tot = chkmax(tot, now);</span><br><span class="line"><span class="keyword">if</span> (now == k - <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (ans == dist[x])</span><br><span class="line">ans2++;</span><br><span class="line"><span class="keyword">if</span> (dist[x] &gt; ans)</span><br><span class="line">ans2 = <span class="number">1</span>, ans = dist[x];</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> temp = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">if</span> (S[k - <span class="number">1</span> - now] != <span class="number">-1</span>)</span><br><span class="line">temp = dist[x] + S[k - <span class="number">1</span> - now];</span><br><span class="line"><span class="keyword">if</span> (ans == temp)</span><br><span class="line">ans2 += num[k - <span class="number">1</span> - now];</span><br><span class="line"><span class="keyword">if</span> (temp &gt; ans)</span><br><span class="line">ans2 = num[k - <span class="number">1</span> - now], ans = temp;</span><br><span class="line"><span class="keyword">for</span> (ri i = G.head[x]; i; i = G.e[i].nxt)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> v = G.e[i].to;</span><br><span class="line"><span class="keyword">if</span> (vis[v] || v == pre)</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">dist[v] = dist[x] + G.e[i].weight;</span><br><span class="line">DFS(v, x, now + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> pre, <span class="keyword">int</span> now)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (now == k - <span class="number">1</span>)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span> (S[now] == dist[x])</span><br><span class="line">num[now]++;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">S[now] = chkmax(S[now], dist[x]), num[now] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (ri i = G.head[x]; i; i = G.e[i].nxt)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> v = G.e[i].to;</span><br><span class="line"><span class="keyword">if</span> (vis[v] || v == pre)</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">calc(v, x, now + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">Solve</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">tot = <span class="number">0</span>;</span><br><span class="line">vis[x] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (ri i = G.head[x]; i; i = G.e[i].nxt)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> v = G.e[i].to;</span><br><span class="line"><span class="keyword">if</span> (vis[v])</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">dist[v] = G.e[i].weight;</span><br><span class="line">DFS(v, x, <span class="number">1</span>);</span><br><span class="line">calc(v, x, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(ri i = <span class="number">1</span>; i &lt;= tot; i++)</span><br><span class="line">S[i] = <span class="number">-1</span>, num[i] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (ri i = G.head[x]; i; i = G.e[i].nxt)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> v = G.e[i].to;</span><br><span class="line"><span class="keyword">if</span> (vis[v])</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">f[<span class="number">0</span>] = sum = siz[v];</span><br><span class="line">rt = <span class="number">0</span>;</span><br><span class="line">Get_Root(v, <span class="number">0</span>);</span><br><span class="line">Solve(rt);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">n = read(), m = read(), k = read();</span><br><span class="line"><span class="keyword">for</span> (ri i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> u = read(), v = read(), w = read();</span><br><span class="line">vec[u].push_back(mp(v, w));</span><br><span class="line">vec[v].push_back(mp(u, w));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (ri i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">sort(vec[i].begin(), vec[i].end());</span><br><span class="line">Dijkstra(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (ri i = <span class="number">2</span>; i &lt;= n; i++)</span><br><span class="line">G.Link(i, fr[i].first, fr[i].second);</span><br><span class="line">f[<span class="number">0</span>] = sum = n;</span><br><span class="line">rt = <span class="number">0</span>;</span><br><span class="line">Get_Root(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span> (ri i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">S[i] = <span class="number">-1</span>;</span><br><span class="line">Solve(rt);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d %d"</span>, ans, ans2);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">6 6 4</span></span><br><span class="line"><span class="comment">1 2 1</span></span><br><span class="line"><span class="comment">2 3 1</span></span><br><span class="line"><span class="comment">3 4 1</span></span><br><span class="line"><span class="comment">2 5 1</span></span><br><span class="line"><span class="comment">3 6 1</span></span><br><span class="line"><span class="comment">5 6 1</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="咕咕咕"><a href="#咕咕咕" class="headerlink" title="咕咕咕"></a>咕咕咕</h2><p>如果我做到什么有意思的点分题再更新（</p>]]></content>
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 点分治 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>后缀数组(SA)学习笔记</title>
      <link href="/2018/12/14/Suffix_Array/"/>
      <url>/2018/12/14/Suffix_Array/</url>
      <content type="html"><![CDATA[<p><img src="http://wx3.sinaimg.cn/mw690/0060lm7Tly1fxzj907fzsj30xc0nm1d6.jpg" alt=""></p><a id="more"></a><h1 id="后缀数组（SA）学习笔记"><a href="#后缀数组（SA）学习笔记" class="headerlink" title="后缀数组（SA）学习笔记"></a>后缀数组（SA）学习笔记</h1><h2 id="什么是后缀数组"><a href="#什么是后缀数组" class="headerlink" title="什么是后缀数组"></a>什么是后缀数组</h2><p>后缀数组，顾名思义就是与一个字符串的后缀串有关的<del>神奇</del>玩意</p><p>那么什么又是字符串的后缀串呢？</p><p>我们假设有一个长为 $len$ 的字符串 $s$ ，我们把从第 $i$ 个位置到第 $len$ 个位置的这一段子串称为第 $i$ 个位置的后缀 ( $Suffix_i$ ) 。</p><p>然后我们需要知道一点：后缀数组严格说来并不能算是某种特定的算法，算是一种思想<del>(?)</del> 。</p><h2 id="后缀数组能干些什么"><a href="#后缀数组能干些什么" class="headerlink" title="后缀数组能干些什么"></a>后缀数组能干些什么</h2><p>如果你会后缀自动机（ $\text{SAM}$ ）的话，后缀数组的用处自然并不是太大，不过也有一些后缀自动机不能做而后缀数组能做的事情，比如说下面这个题：</p><blockquote><p>有一个01串 $s$ ，定义一个前缀最右边的位置为这个前缀的结束位置，有 $q$ 个询问，每次询问结束位置在区间 $[l, r]$ 中不同前缀的最长公共后缀是多长。（ $|s|, q \leq 10^5$ ）</p></blockquote><p>现在你可能不会这道题，但是相信你看完这篇文章后一定会有一些思路。</p><h2 id="构造后缀数组（SA）"><a href="#构造后缀数组（SA）" class="headerlink" title="构造后缀数组（SA）"></a>构造后缀数组（SA）</h2><h3 id="一些将会用到的变量"><a href="#一些将会用到的变量" class="headerlink" title="一些将会用到的变量"></a>一些将会用到的变量</h3><p>为了避免在下文中讲到一半突然开始解释变量含义这种毒瘤事情的发生，所以我决定把东西在这里讲清楚。</p><ul><li>$a$ ：表示被处理的字符串</li><li>$Suffix_i$ ：如上文所述</li><li>$rk_i$ ：表示 $Suffix_i$ 在所有后缀中的排名。</li><li>$SA_i$ ：表示排名为 $i$ 的后缀的起点在原串中的位置</li></ul><p>好了，基本的东西列完了，来感性理解一下。</p><p><img src="http://wx3.sinaimg.cn/mw690/0060lm7Tly1fxzkox5kf3j30re0gjaa3.jpg" alt=""></p><p>后缀数组实质上指的就是这个 $SA$ 。由定义可知 $SA$ 与 $rk$ 有以下关系：</p><script type="math/tex; mode=display">rk[SA[i]] = SA[rk[i] = i</script><p>总之两数组就是互逆的。然后有了这个东西我们就能开始搞一些神仙玩意了（反正我不会.jpg</p><p>然后我们来讲如何求 $SA$ 。</p><h3 id="倍增算法"><a href="#倍增算法" class="headerlink" title="倍增算法"></a>倍增算法</h3><p>目前两种主流算法之一，主要思想：对于一个 $Suffix_i$ ，想直接知道它的 $rk$ 比较困难，但是我们可以对每个字符开始的长度为 $2^k$ 的字符串求出排名， $k$ 从0开始每次递增1，直到求出所有数的排序为止。</p><p>具体的做法如下图所示：</p><p><img src="http://wx1.sinaimg.cn/mw690/0060lm7Tly1fy06tw1prvj30ra0lfaaj.jpg" alt=""></p><p>实际上只要理解了字符串的比较法则，就并不难理解上面的那张图。所以问题就只剩下了一个：如何进行排序。快排吗？复杂度是 $O(logn)$ 的快排会使最后的复杂度变为 $O(log^2n)$ ，就并没有什么优越性了。所以我们引入一种新的排序方法：基数排序（Radix Sort）。</p><h4 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h4><h5 id="什么是基数排序"><a href="#什么是基数排序" class="headerlink" title="什么是基数排序"></a>什么是基数排序</h5><p>基数排序是一种能够在 $O(n)$ 复杂度内对 $n$ 个元素进行排序的算法（虽然常数很大），如果压位的话可以跑得非常快，<del>再加上一些奇技淫巧就更加香港记者了</del>。wys在<strong>挑战</strong>一题中的 $subtask1$ 即可使用<del>毒瘤卡常</del>基排通过（</p><h5 id="基数排序的原理"><a href="#基数排序的原理" class="headerlink" title="基数排序的原理"></a>基数排序的原理</h5><p>基数排序的原理大概就是对每一位进行一次桶排，以当前位为第一关键字，上一位为第二关键字进行双关键字排序。</p><p>大概过程就在<a href="https://visualgo.net/zh/sorting" target="_blank" rel="noopener">VisuAlgo</a>上看一下动画就懂了吧（懒得讲.jpg</p><h4 id="模板代码"><a href="#模板代码" class="headerlink" title="模板代码"></a>模板代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ri register int</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span> + <span class="number">110</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">110</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x7fffffff</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-8</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">il <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">0</span>, f = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> ch = getchar();</span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (ch == <span class="string">'-'</span>)</span><br><span class="line">            f = <span class="number">-1</span>;</span><br><span class="line">        ch = getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch))</span><br><span class="line">    &#123;</span><br><span class="line">        x = (x &lt;&lt; <span class="number">3</span>) + (x &lt;&lt; <span class="number">1</span>) + ch - <span class="string">'0'</span>;</span><br><span class="line">        ch = getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> s[N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> Suffix_Array</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m;</span><br><span class="line">    <span class="keyword">int</span> rk[N], SA[N], tmp[N], tax[N], a[N];</span><br><span class="line">    <span class="keyword">char</span> s[N];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> maxm = <span class="number">1005</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">il <span class="keyword">void</span> <span class="title">Init</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>, s + <span class="number">1</span>);</span><br><span class="line">        n = <span class="built_in">strlen</span>(s + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (ri i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">            a[i] = (<span class="keyword">int</span>)s[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">il <span class="keyword">void</span> <span class="title">Radix_Sort</span><span class="params">(<span class="keyword">int</span> m)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">memset</span>(tax, <span class="number">0</span>, <span class="keyword">sizeof</span>(<span class="keyword">int</span>) * (m + <span class="number">1</span>));</span><br><span class="line">        <span class="keyword">for</span> (ri i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">            tax[rk[i]]++;</span><br><span class="line">        <span class="keyword">for</span> (ri i = <span class="number">2</span>; i &lt;= m; i++)</span><br><span class="line">            tax[i] += tax[i - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (ri i = n; i; i--)</span><br><span class="line">            SA[tax[rk[tmp[i]]]--] = tmp[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">il <span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> *a, <span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> w)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a[x] == a[y] &amp;&amp; (x + w &gt; n ? <span class="number">-1</span> : a[x + w]) == (y + w &gt; n ? <span class="number">-1</span> : a[y + w]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">il <span class="keyword">void</span> <span class="title">Build</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (ri i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">            rk[i] = a[i], tmp[i] = i;</span><br><span class="line">        m = maxm;</span><br><span class="line">        Radix_Sort(m);</span><br><span class="line">        <span class="keyword">for</span> (ri p = <span class="number">1</span>, w = <span class="number">1</span>; p &lt; n; m = p, w &lt;&lt;= <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            p = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (ri i = n - w + <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">                tmp[++p] = i;</span><br><span class="line">            <span class="keyword">for</span> (ri i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">                SA[i] &gt; w ? tmp[++p] = SA[i] - w : <span class="number">0</span>;</span><br><span class="line">            Radix_Sort(m);</span><br><span class="line">            <span class="keyword">for</span> (ri i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">                tmp[i] = rk[i];</span><br><span class="line">            rk[SA[<span class="number">1</span>]] = p = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (ri i = <span class="number">2</span>; i &lt;= n; i++)</span><br><span class="line">                rk[SA[i]] = cmp(tmp, SA[i], SA[i - <span class="number">1</span>], w) ? p : ++p;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">il <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (ri i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d "</span>, SA[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Suffix_Array :: Init();</span><br><span class="line">    Suffix_Array :: Build();</span><br><span class="line">    Suffix_Array :: print();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="DC3算法"><a href="#DC3算法" class="headerlink" title="DC3算法"></a>DC3算法</h3><p>由于我不会，所以不讲（咕咕咕</p><h2 id="求Height数组"><a href="#求Height数组" class="headerlink" title="求Height数组"></a>求Height数组</h2><p>当然，如果只有上面这些东西的话你除了能过洛谷上的板子题外什么也干不了，所以接下来我们来讲一下真正能让后缀数组发挥用处的东西。</p><h3 id="一些将会用到的变量-1"><a href="#一些将会用到的变量-1" class="headerlink" title="一些将会用到的变量"></a>一些将会用到的变量</h3><ul><li>$Height_i$ ：表示 $Suffix[SA[i]]$ 与 $Suffix[SA[i - 1]]$ 的最长公共前缀，也就是排名相邻的两个后缀的最长公共前缀。</li><li>$H_i$ ：等价于 $Height[rk[i]]$ ，也就是后缀 $Suffix_i$ 和它前一名后缀的最长公共前缀。</li></ul><p>两个排名不相邻的后缀的最长公共前缀定义为排名在它们之间的 $Height$ 的最小值。</p><p>先形象的理解一下：</p><p><img src="http://wx2.sinaimg.cn/mw690/0060lm7Tly1fy679pocs5j30qz0imaa2.jpg" alt=""></p><h3 id="高效求得Height数组"><a href="#高效求得Height数组" class="headerlink" title="高效求得Height数组"></a>高效求得Height数组</h3><p>首先如果在 $SA$ 中顺序比较的话复杂度是 $O(n^2)$ 的，还是什么都干不了，所以我们利用 $H$ 数组的一个性质来快速求得 $Height$ 。</p><script type="math/tex; mode=display">H[i] \geq H[i - 1] - 1</script><p>证明如下：</p><p>假设 $Suffix[k]$ 是排在 $Suffix[i-1]$ 前一名的后缀，则它们最长的公共前缀是 $H[i-1]$ 。都去掉第一个字符，就变成了 $Suffix[k+1]$ 与 $Suffix[i]$ 。如果 $H[i-1]$ 为0或1，那么 $H[i]\geq0$ 显然成立；否则 $H[i]\geq H[i-1]-1​$ 。（都去掉了第一个字符，其他前缀都相等）至此得证。</p><p>那么我们就可以按照 $H_1,H_2,H_3,…,H_n$ 进行计算，复杂度 $O(n)$ 。</p><h3 id="模板代码-1"><a href="#模板代码-1" class="headerlink" title="模板代码"></a>模板代码</h3><p>咕咕咕（</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>咕咕咕</p>]]></content>
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后缀数组，SA </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>NOIp2018游记</title>
      <link href="/2018/11/11/NOIp2018/"/>
      <url>/2018/11/11/NOIp2018/</url>
      <content type="html"><![CDATA[<p><img src="http://wx4.sinaimg.cn/mw690/0060lm7Tly1fx4du86xb4j30xc0czk8v.jpg" alt=""></p><a id="more"></a><h1 id="NOIp2018游记"><a href="#NOIp2018游记" class="headerlink" title="NOIp2018游记"></a>NOIp2018游记</h1><h2 id="Day0"><a href="#Day0" class="headerlink" title="Day0"></a>Day0</h2><p>机房全员到 $\text{HUST}$ 试机，感觉手感还行，随便瞎敲了几个板子就走人了，然后见到了几个 $\text{WHEZ}$ 的神仙，然后晚上回家复习了一下矩阵就睡觉了，感觉以我的实力应该不是特别慌。</p><h2 id="Day1"><a href="#Day1" class="headerlink" title="Day1"></a>Day1</h2><p>早上 $6:50$ 准时到学校集合，路上单曲循环无间之钟，感觉问题并不大，在前往 $\text{HUST}$ 的路上手敲了一棵平衡树，一遍 $\text{A}$ 板子，当时内心满满的：噫，好了，我稳了。然后和几个外省的神仙互祝了一波 $\text{RP++}$ ，抽签的位置也相当吉利： $8$ 排 $8$ 号。抽签的人甚至都调侃说我稳了，然而……。</p><p>在位置上坐下，试卷密码飞雪连天，让人想起了刚离我们而去的金庸先生。看到题的时候，我的心情已经无法形容了，毕竟是 $\text{OI}$ 生涯中的最后一次联赛，紧张到不行。 $\text{T1}$ 自己抄自己原题倒是还行，这 $100pts$ 送的倒是挺干脆，但由于题目中“首尾相接”这四个字，导致我一直觉得这是个环，想了 $0.5h$ 才把题读清楚。 $\text{T2}$ 是一道很裸的完全背包，然而不知道为什么就是没有想到，打了个爆搜轻松过大样例，剪了两下枝自己造的 $20 \times 100$ 的数据也能在 $1s$ 内跑过去，然后觉得至少有 $80pts$ 就走了。 $\text{T3}$ 机房大佬说是二分+贪心，然而我完全没有想到，打了 $20pts$ 的直径，然后本来想拿 $20pts$ 的链的分，结果并没有想到二分，就枚举打了 $5pts$ ，感觉心态爆炸。</p><p>出考场和机房大佬交流了一下， $\text{Anoxiacxy}$ 至少有 $280pts$ ，然后其他几位大佬都很稳，高一甚至都有 $220pts$ 的大佬，而我只有 $100 + 80 + 25 = 205pts$ 。再一看某群上：“全省就我没 $\text{AK}$ 系列”，“大众分 $270$ ”，“这不都是原题吗”。然后顿时心态爆炸，不过比起 $\text{Edgration}$ 来说，我已经非常幸运了吧。</p><p>下午在机房打了一下午游戏（红辉心真好玩）</p><p>晚上回家用了$5min$ 打了 $\text{T2}$ 的背包，然后又让我想到今天考场上的 $\text{SB}$ 行为，简直毫无心态可言。然后 $23:00$ 才睡觉。</p><h2 id="Day2"><a href="#Day2" class="headerlink" title="Day2"></a>Day2</h2><p>抱着翻盘的心来到 $\text{HUST}$ ，抽到的座位是 $7$ 排 $7$ 号，坐在座位上快速敲完读入后就等待密码下发。</p><p>密码不出所料是笑书神侠，然后看到题的瞬间我倒吸一口凉气：这 $\text{TM}$ 也太毒瘤了吧！</p><p> $\text{T1}$ 其实是一道很简单的基环树，枚举删掉哪一条边就能过，复杂度 $O(n^2)$ ，然而我并没有想到，找到环之后乱搞了一波，估计是没分了，只有 $60pts$ 。 $\text{T2}$ 是一道结论题，然而只找到了 $n = 2$ 时候的结论 $4 \times 3 ^ {m - 1}$ ，结合样例大概 $50pts$ ，考试中一直以为是一道状压 $\text{DP}$ ，出来看群上说是结论就心态崩了。 $\text{T3}$ 动态 $\text{DP}$ ，毒瘤玩意，连暴力我都不会打，爆零。</p><p>出来发现大众分： $100 + 50 + 44 = 194pts$ ，然而我只有 $60 + 50 + 0 = 110pts$ ，然后就很稳的 $\text{AFO}$ 了。</p><p>下午和机房的神仙一起去看毒液，非常的快乐。</p><p>再看一下 $\text{WGSZ}$ 的整体情况， $8$ 人的队伍只剩下两人，还真是给学校丢脸了呢。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>估分： $100 + 80 + 25 + 60 + 50 + 0 = 315pts$ </p><blockquote><p>一年OI一场空，原题不会见祖宗</p></blockquote><p>还是技不如人吧，再搞下去也没有什么希望了，不如回去学文化课</p><p>我的最后一次联赛还是成为了 $\text{OI}$ 生涯的最后一次比赛……</p><p>一年的努力竟是这样的结果吗……</p><p>さようなら，$\text{OI}$ ，いつも，大好です</p><p>$\text{DimensionTripper  AFO  on  2018.11.11}$ ?</p><hr><p>upd：联赛退役失败了……省选争取退役成功吧（</p>]]></content>
      
      <categories>
          
          <category> Life In OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 游记 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>水题记录</title>
      <link href="/2018/11/06/Water/"/>
      <url>/2018/11/06/Water/</url>
      <content type="html"><![CDATA[<center style="font-size:3em;font-weight:bold;color:red">13/15</center><p><img src="http://wx4.sinaimg.cn/mw690/0060lm7Tly1fvroxjn5vdj30m80efe42.jpg" alt=""></p><a id="more"></a><h1 id="水题记录"><a href="#水题记录" class="headerlink" title="水题记录"></a>水题记录</h1><h2 id="1-CF1053C-Put-The-Boxes-Together"><a href="#1-CF1053C-Put-The-Boxes-Together" class="headerlink" title="1.CF1053C Put The Boxes Together"></a>1.<a href="https://codeforces.com/contest/1053/problem/C" target="_blank" rel="noopener">CF1053C Put The Boxes Together</a></h2><center style="font-size:2em;color:red">Unfinished</center><h2 id="2-BZOJ-4636-蒟蒻的数列"><a href="#2-BZOJ-4636-蒟蒻的数列" class="headerlink" title="2.BZOJ 4636 蒟蒻的数列"></a>2.<a href="https://www.lydsy.com/JudgeOnline/problem.php?id=4636" target="_blank" rel="noopener">BZOJ 4636 蒟蒻的数列</a></h2><center style="font-size:2em;color:green">Finished</center><hr><p>题意：给出$n$次操作，每次将区间$[l,r)$内所有小于$k$的数修改为$k$。求$n$次操作后所有数的和</p><hr><p>思路：裸的数据结构题，因为懒得离散化，所以就用动态开点的线段树节省一下空间就能水过去。最后统计和的时候把整棵树遍历一遍就完了</p><hr><p>注意：</p><ol><li>区间左闭右开，所以当$l=r$的时候应跳过</li><li>有些没有建立的节点对结果也有贡献，统计时不应漏掉</li></ol><hr><p>代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ri register int</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span> + <span class="number">110</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">110</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x7fffffff</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-8</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">il <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">0</span>, f = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">char</span> ch = getchar();</span><br><span class="line"><span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (ch == <span class="string">'-'</span>)</span><br><span class="line">f=<span class="number">-1</span>;</span><br><span class="line">ch = getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch))</span><br><span class="line">&#123;</span><br><span class="line">x = (x &lt;&lt; <span class="number">3</span>) + (x &lt;&lt; <span class="number">1</span>) + ch - <span class="string">'0'</span>;</span><br><span class="line">ch = getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, id, rt;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">D_SegmentTree</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> lson, rson;</span><br><span class="line"><span class="keyword">int</span> val;</span><br><span class="line">&#125;;</span><br><span class="line">D_SegmentTree T[<span class="number">4</span> * N];</span><br><span class="line"></span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">Update</span><span class="params">(<span class="keyword">int</span> &amp;p,<span class="keyword">int</span> L, <span class="keyword">int</span> R, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!p)</span><br><span class="line">p = ++id;</span><br><span class="line"><span class="keyword">if</span> (L == l &amp;&amp; R == r)</span><br><span class="line">&#123;</span><br><span class="line">T[p].val = max(T[p].val, d);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> mid = (L + R) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (r &lt;= mid)</span><br><span class="line">Update(T[p].lson, L, mid, l, r, d);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (l &gt; mid)</span><br><span class="line">Update(T[p].rson, mid + <span class="number">1</span>, R, l, r, d);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">Update(T[p].lson, L, mid, l, mid, d);</span><br><span class="line">Update(T[p].rson, mid + <span class="number">1</span>, R, mid + <span class="number">1</span>, r, d);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il ll <span class="title">Query</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ll ret = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (!p)</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">w = max(w, T[p].val);</span><br><span class="line"><span class="keyword">if</span> (!T[p].lson &amp;&amp; !T[p].rson)</span><br><span class="line">&#123;</span><br><span class="line">ret += <span class="number">1l</span>l * (r - l + <span class="number">1</span>) * w;</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (r &lt;= mid)</span><br><span class="line">ret += Query(T[p].lson, l, r, w);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (l &gt; mid)</span><br><span class="line">ret += Query(T[p].rson, l, r, w);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">ret += Query(T[p].lson, l, mid, w) + Query(T[p].rson, mid + <span class="number">1</span>, r, w);</span><br><span class="line"><span class="keyword">if</span> (!T[p].lson)</span><br><span class="line">ret += <span class="number">1l</span>l * (mid - l + <span class="number">1</span>) * w;</span><br><span class="line"><span class="keyword">if</span> (!T[p].rson)</span><br><span class="line">ret += <span class="number">1l</span>l * (r - mid) * w;</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">n = read();</span><br><span class="line"><span class="keyword">for</span> (ri i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> l = read(), r = read(), d = read();</span><br><span class="line"><span class="keyword">if</span> (l == r)</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">Update(rt,<span class="number">1</span>, maxn, l, r - <span class="number">1</span>, d);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld"</span>, Query(rt, <span class="number">1</span>, maxn, <span class="number">0</span>));</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">4</span></span><br><span class="line"><span class="comment">2 5 1</span></span><br><span class="line"><span class="comment">9 10 4</span></span><br><span class="line"><span class="comment">6 8 2</span></span><br><span class="line"><span class="comment">4 6 3</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="3-Luogu-4231-三步必杀"><a href="#3-Luogu-4231-三步必杀" class="headerlink" title="3.Luogu 4231 三步必杀"></a>3.<a href="https://www.luogu.org/problemnew/show/P4231" target="_blank" rel="noopener">Luogu 4231 三步必杀</a></h2><center style="font-size:2em;color:green">Finished</center><hr><p>题意：给出一个序列，初始所有值都是0，有$m$次操作，每次将区间 $[l,r]$ 内以等差数列增加，等差数列首项、末项已知</p><hr><p>思路：两次差分，对于区间$[l,r]$，每一次增加有以下数列（d为公差）：</p><script type="math/tex; mode=display">s,s+d,s+2d,...,s+(r-l)d</script><p>然后在差分序列上就可以写成：</p><script type="math/tex; mode=display">s,d,d,d,...,d,-s+(l-r)*d</script><p>但是这样好像就不是优美的差分了，有两个不和谐的位置，那么我们再差分一遍，就可以写成：</p><script type="math/tex; mode=display">s,d-s,2d-s,3d-s,...,(r-l+1)d-s,-(l-r+1)d-s,s+(r-l)d</script><p>这样就可以通过求两次前缀和求得答案了</p><hr><p>注意：STL max常数较大，建议手写</p><hr><p>代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ri register int</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e7</span> + <span class="number">110</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">110</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x7fffffff</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-8</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x = <span class="number">0</span>;</span><br><span class="line">    T f = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> ch = getchar();</span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (ch == <span class="string">'-'</span>)</span><br><span class="line">            f=<span class="number">-1</span>;</span><br><span class="line">        ch = getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch))</span><br><span class="line">    &#123;</span><br><span class="line">        x = (x &lt;&lt; <span class="number">3</span>) + (x &lt;&lt; <span class="number">1</span>) + ch - <span class="string">'0'</span>;</span><br><span class="line">        ch = getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    x *= f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line">ll ans1, ans2 = -inf;</span><br><span class="line">ll a[N], b[N], c[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    read(n), read(m);</span><br><span class="line">    <span class="keyword">for</span> (ri i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> l, r;</span><br><span class="line">        ll s, e;</span><br><span class="line">        read(l), read(r), read(s), read(e);</span><br><span class="line">        ll delta = (e - s) / (r - l);</span><br><span class="line">        c[l] += s, c[l + <span class="number">1</span>] += delta - s, c[r + <span class="number">1</span>] -= (delta + e), c[r + <span class="number">2</span>] += e;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (ri i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        b[i] += b[i - <span class="number">1</span>] + c[i];</span><br><span class="line">        a[i] = a[i - <span class="number">1</span>] + b[i];</span><br><span class="line">        ans1 ^= a[i], ans2 = ans2 &lt; a[i] ? a[i] : ans2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld %lld"</span>, ans1, ans2);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">5 2</span></span><br><span class="line"><span class="comment">1 5 2 10</span></span><br><span class="line"><span class="comment">2 4 1 1</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="4-Luogu-1140-相似基因"><a href="#4-Luogu-1140-相似基因" class="headerlink" title="4.Luogu 1140 相似基因"></a>4.<a href="https://www.luogu.org/problemnew/show/P1140" target="_blank" rel="noopener">Luogu 1140 相似基因</a></h2><center style="font-size:2em;color:green">Finished</center><hr><p>题意：给出两个只由ATCG组成的字符串 $s$ 和 $t$ ，每个串中间可以插入任意数量的空字符，每两个对应字符有一个确定的值，问最后两个串每一位对应的值的和最大是多少</p><hr><p>思路：考虑$dp$，用$dp[i][j]$表示$s$进行到第$i$位，$t$进行到第$j$位，每一位可以由以下三种方式得到：</p><ol><li><p>在$s$中插入一个空字符；</p></li><li><p>在$t$中插入一个空字符；</p></li><li><p>不插入空字符。</p></li></ol><p>则可知以下转移方程（$d[i][j]$表示 $i$ 与 $j$ 对应的值）：</p><script type="math/tex; mode=display">dp[i][j] = max\{dp[i][j], dp[i - 1][j] + d[s[i]][0], dp[i][j - 1] + d[0][t[j]], dp[i - 1][j - 1] + d[s[i]][t[j]]\}</script><hr><p>注意：基础动态规划，注意不要把 $s[i]$ 和 $t[j]$ 打反就行了</p><hr><p>代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ri register int</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span> + <span class="number">110</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">110</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x7fffffff</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-8</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">il <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">0</span>, f = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> ch = getchar();</span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (ch == <span class="string">'-'</span>)</span><br><span class="line">            f=<span class="number">-1</span>;</span><br><span class="line">        ch = getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch))</span><br><span class="line">    &#123;</span><br><span class="line">        x = (x &lt;&lt; <span class="number">3</span>) + (x &lt;&lt; <span class="number">1</span>) + ch - <span class="string">'0'</span>;</span><br><span class="line">        ch = getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">char</span> s[N], t[N];</span><br><span class="line"><span class="keyword">int</span> dp[MAXN][MAXN], d[MAXN][MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> Wepdekr</span></span><br><span class="line">    freopen(<span class="string">"testdata.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    n = read();</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>, s + <span class="number">1</span>);</span><br><span class="line">    m = read();</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>, t + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (ri i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="keyword">for</span> (ri j = <span class="number">1</span>; j &lt;= m; j++)</span><br><span class="line">            dp[i][j] = -inf;</span><br><span class="line">    d[<span class="string">'A'</span>][<span class="string">'A'</span>] = d[<span class="string">'T'</span>][<span class="string">'T'</span>] = d[<span class="string">'C'</span>][<span class="string">'C'</span>] = d[<span class="string">'G'</span>][<span class="string">'G'</span>] = <span class="number">5</span>;</span><br><span class="line">    d[<span class="string">'A'</span>][<span class="string">'T'</span>] = d[<span class="string">'T'</span>][<span class="string">'A'</span>] = d[<span class="string">'A'</span>][<span class="string">'C'</span>] = d[<span class="string">'C'</span>][<span class="string">'A'</span>] = d[<span class="number">0</span>][<span class="string">'T'</span>] = d[<span class="string">'T'</span>][<span class="number">0</span>] = <span class="number">-1</span>;</span><br><span class="line">    d[<span class="string">'A'</span>][<span class="string">'G'</span>] = d[<span class="string">'G'</span>][<span class="string">'A'</span>] = d[<span class="string">'T'</span>][<span class="string">'C'</span>] = d[<span class="string">'C'</span>][<span class="string">'T'</span>] =</span><br><span class="line">    d[<span class="string">'T'</span>][<span class="string">'G'</span>] = d[<span class="string">'G'</span>][<span class="string">'T'</span>] = d[<span class="string">'G'</span>][<span class="number">0</span>] = d[<span class="number">0</span>][<span class="string">'G'</span>] = <span class="number">-2</span>;</span><br><span class="line">    d[<span class="string">'G'</span>][<span class="string">'C'</span>] = d[<span class="string">'C'</span>][<span class="string">'G'</span>] = d[<span class="string">'A'</span>][<span class="number">0</span>] = d[<span class="number">0</span>][<span class="string">'A'</span>] = <span class="number">-3</span>;</span><br><span class="line">    d[<span class="string">'C'</span>][<span class="number">0</span>] = d[<span class="number">0</span>][<span class="string">'C'</span>] = <span class="number">-4</span>;</span><br><span class="line">    <span class="keyword">for</span> (ri i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        dp[i][<span class="number">0</span>] = dp[i - <span class="number">1</span>][<span class="number">0</span>] + d[s[i]][<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (ri i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">        dp[<span class="number">0</span>][i] = dp[<span class="number">0</span>][i - <span class="number">1</span>] + d[<span class="number">0</span>][t[i]];</span><br><span class="line">    <span class="keyword">for</span> (ri i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="keyword">for</span> (ri j = <span class="number">1</span>; j &lt;= m; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            dp[i][j] = max(max(dp[i - <span class="number">1</span>][j] + d[s[i]][<span class="number">0</span>], dp[i][j - <span class="number">1</span>] + d[t[j]][<span class="number">0</span>]),</span><br><span class="line">                           max(dp[i][j], dp[i - <span class="number">1</span>][j - <span class="number">1</span>] + d[s[i]][t[j]]));</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, dp[n][m]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">7 AGTGATG</span></span><br><span class="line"><span class="comment">5 GTTAG</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="5-Luogu-4230-连环病原体"><a href="#5-Luogu-4230-连环病原体" class="headerlink" title="5.Luogu 4230 连环病原体"></a>5.<a href="https://www.luogu.org/problemnew/show/P4230" target="_blank" rel="noopener">Luogu 4230 连环病原体</a></h2><center style="font-size:2em;color:green">Finished</center><hr><p>题意：给出一张 $n$ 个点 $m$ 条边的无向图，对于边的序列，如果一个区间内存在环，那么称该区间为一个“加强区间”，问每条边在几个加强区间内出现过。</p><hr><p>思路：考虑 $O(m)$ 地枚举区间的左右端点，每次向右移动区间右端点，如果出现环则进行一次统计，然后向右移动区间左端点至没有环为止。使用 $LCT$ ，每次扩展区间就 $Link$ ，缩小区间就 $Cut$ ，然后用 $FindRoot$ 判断连通性，很显然可以知道当要连一条边的时候，如果这条边所连的两个节点已经联通，那么连上这条边就会出现环。</p><p>重复的进行上述操作即可完成统计。</p><p>统计答案的时候涉及到等差数列的问题，可以参考 <a href="https://www.luogu.org/problemnew/show/P4231" target="_blank" rel="noopener">三步必杀</a> ，使用两个差分完成。</p><hr><p>注意： $LCT$ 别打挂就行了。</p><hr><p>代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ri register int</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span> + <span class="number">110</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">110</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x7fffffff</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-8</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">il <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">0</span>, f = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> ch = getchar();</span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (ch == <span class="string">'-'</span>)</span><br><span class="line">            f=<span class="number">-1</span>;</span><br><span class="line">        ch = getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch))</span><br><span class="line">    &#123;</span><br><span class="line">        x = (x &lt;&lt; <span class="number">3</span>) + (x &lt;&lt; <span class="number">1</span>) + ch - <span class="string">'0'</span>;</span><br><span class="line">        ch = getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> m;</span><br><span class="line">ll s1[N], s2[N], s3[N];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> fr, to;</span><br><span class="line">&#125;;</span><br><span class="line">edge e[N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> Link_Cut_Tree</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> st[N];</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        <span class="keyword">int</span> fa, ch[<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">bool</span> rev;</span><br><span class="line">    &#125;;</span><br><span class="line">    node a[N];</span><br><span class="line">    </span><br><span class="line">    <span class="function">il <span class="keyword">bool</span> <span class="title">Not_Root</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a[a[x].fa].ch[<span class="number">0</span>] == x || a[a[x].fa].ch[<span class="number">1</span>] == x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">il <span class="keyword">void</span> <span class="title">Push_Reverse</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!x)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="built_in">std</span> :: swap(a[x].ch[<span class="number">0</span>], a[x].ch[<span class="number">1</span>]);</span><br><span class="line">        a[x].rev ^= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">il <span class="keyword">void</span> <span class="title">Pushdown</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (a[x].rev)</span><br><span class="line">        &#123;</span><br><span class="line">            Push_Reverse(a[x].ch[<span class="number">0</span>]);</span><br><span class="line">            Push_Reverse(a[x].ch[<span class="number">1</span>]);</span><br><span class="line">            a[x].rev = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function">il <span class="keyword">void</span> <span class="title">Rotate</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> y = a[x].fa;</span><br><span class="line">        <span class="keyword">int</span> z = a[y].fa;</span><br><span class="line">        <span class="keyword">bool</span> k = (a[y].ch[<span class="number">1</span>] == x);</span><br><span class="line">        <span class="keyword">int</span> w = a[x].ch[!k];</span><br><span class="line">        <span class="keyword">if</span> (Not_Root(y))</span><br><span class="line">            a[z].ch[a[z].ch[<span class="number">1</span>] == y] = x;</span><br><span class="line">        a[x].ch[!k] = y;</span><br><span class="line">        a[y].ch[k] = w;</span><br><span class="line">        <span class="keyword">if</span> (w)</span><br><span class="line">            a[w].fa = y;</span><br><span class="line">        a[y].fa = x;</span><br><span class="line">        a[x].fa = z;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">il <span class="keyword">void</span> <span class="title">Splay</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> y = x, top = <span class="number">0</span>;</span><br><span class="line">        st[++top] = y;</span><br><span class="line">        <span class="keyword">while</span> (Not_Root(y))</span><br><span class="line">            st[++top] = y = a[y].fa;</span><br><span class="line">        <span class="keyword">while</span> (top)</span><br><span class="line">            Pushdown(st[top--]);</span><br><span class="line">        <span class="keyword">while</span> (Not_Root(x))</span><br><span class="line">        &#123;</span><br><span class="line">            y = a[x].fa;</span><br><span class="line">            <span class="keyword">int</span> z = a[y].fa;</span><br><span class="line">            <span class="keyword">if</span> (Not_Root(y))</span><br><span class="line">                Rotate(((a[y].ch[<span class="number">0</span>] == x) ^ (a[z].ch[<span class="number">0</span>] == y)) ? x : y);</span><br><span class="line">            Rotate(x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">il <span class="keyword">void</span> <span class="title">Access</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (ri y = <span class="number">0</span>; x; x = a[y = x].fa)</span><br><span class="line">        &#123;</span><br><span class="line">            Splay(x);</span><br><span class="line">            a[x].ch[<span class="number">1</span>] = y;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">il <span class="keyword">int</span> <span class="title">Find_Root</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Access(x);</span><br><span class="line">        Splay(x);</span><br><span class="line">        <span class="keyword">while</span> (a[x].ch[<span class="number">0</span>])</span><br><span class="line">            Pushdown(x), x = a[x].ch[<span class="number">0</span>];</span><br><span class="line">        Splay(x);</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">il <span class="keyword">void</span> <span class="title">Make_Root</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Access(x);</span><br><span class="line">        Splay(x);</span><br><span class="line">        Push_Reverse(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">il <span class="keyword">void</span> <span class="title">Link</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Make_Root(x);</span><br><span class="line">        a[x].fa = y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">il <span class="keyword">void</span> <span class="title">Cut</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Make_Root(x);</span><br><span class="line">        Access(y);</span><br><span class="line">        Splay(y);</span><br><span class="line">        a[x].fa = a[y].ch[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> Link_Cut_Tree;</span><br><span class="line"></span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> a1, <span class="keyword">int</span> delta)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l &gt; r)</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">    s3[l] += a1;</span><br><span class="line">    s3[l + <span class="number">1</span>] += delta - a1;</span><br><span class="line">    s3[r + <span class="number">1</span>] -= a1 + <span class="number">1l</span>l * (r - l + <span class="number">1</span>) * delta;</span><br><span class="line">    s3[r + <span class="number">2</span>] += a1 + <span class="number">1l</span>l * (r - l) * delta;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    m = read();</span><br><span class="line">    <span class="keyword">for</span> (ri i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">        e[i].fr = read(), e[i].to = read();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> L = <span class="number">1</span>, R = <span class="number">0</span>; L &lt;= m; L++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">bool</span> flag = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(R &lt; m)</span><br><span class="line">        &#123;</span><br><span class="line">            R++;</span><br><span class="line">            <span class="keyword">if</span> (Find_Root(e[R].fr) == Find_Root(e[R].to))</span><br><span class="line">            &#123;</span><br><span class="line">                flag = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            Link(e[R].fr, e[R].to);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (flag)</span><br><span class="line">        &#123;</span><br><span class="line">            Add(L, R, m - R + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">            Add(R + <span class="number">1</span>, m, m - R, <span class="number">-1</span>);</span><br><span class="line">            R--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">             <span class="keyword">break</span>;</span><br><span class="line">        Cut(e[L].fr, e[L].to);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (ri i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        s2[i] += s2[i - <span class="number">1</span>] + s3[i];</span><br><span class="line">        s1[i] = s1[i - <span class="number">1</span>] + s2[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (ri i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld "</span>, s1[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">5</span></span><br><span class="line"><span class="comment">1 2</span></span><br><span class="line"><span class="comment">2 3</span></span><br><span class="line"><span class="comment">3 4</span></span><br><span class="line"><span class="comment">1 4</span></span><br><span class="line"><span class="comment">4 2</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="6-CF1059C-Sequence-Transformation"><a href="#6-CF1059C-Sequence-Transformation" class="headerlink" title="6.CF1059C Sequence Transformation"></a>6.<a href="https://codeforces.com/contest/1059/problem/C" target="_blank" rel="noopener">CF1059C Sequence Transformation</a></h2><center style="font-size:2em;color:green">Finished</center><hr><p>题意：给出序列 $a$ ，使 $a_i = i$ ，每次操作向序列 $b$ 中加入 $a$ 序列中所有值的最大公约数，并从 $a$ 中任意删去一个元素，求最后<strong>字典序</strong>最大的 $b$ 序列。</p><hr><p>思路：可知当且仅当每次删掉当前数列中第奇数位上的数字的时候，可以使得 $b$ 的字典序最大，然后递归的处理一下就好了（当然也可以不递归）</p><hr><p>注意：当目前序列中的数小于等于3个的时候要特判，此时上述规律并不适用。</p><hr><p>代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ri register int</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span> + <span class="number">110</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">110</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x7fffffff</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-8</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">il <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">0</span>, f = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">char</span> ch = getchar();</span><br><span class="line"><span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (ch == <span class="string">'-'</span>)</span><br><span class="line">f = <span class="number">-1</span>;</span><br><span class="line">ch = getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch))</span><br><span class="line">&#123;</span><br><span class="line">x = (x &lt;&lt; <span class="number">3</span>) + (x &lt;&lt; <span class="number">1</span>) + ch - <span class="string">'0'</span>;</span><br><span class="line">ch = getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, cnt;</span><br><span class="line"><span class="keyword">int</span> a[N], ans[N];</span><br><span class="line"></span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">Get_Ans</span><span class="params">(<span class="keyword">int</span> num, <span class="keyword">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (num == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">ans[++cnt] = val;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (num == <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line">ans[++cnt] = val;</span><br><span class="line">ans[++cnt] = val * <span class="number">2</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (num == <span class="number">3</span>)</span><br><span class="line">&#123;</span><br><span class="line">ans[cnt + <span class="number">1</span>] = ans[cnt + <span class="number">2</span>] = val;</span><br><span class="line">ans[cnt + <span class="number">3</span>] = <span class="number">3</span> * val;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (ri i = <span class="number">1</span>; i &lt;= num; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (a[i] &amp; <span class="number">1</span>)</span><br><span class="line">ans[++cnt] = val;</span><br><span class="line">&#125;</span><br><span class="line">Get_Ans(num / <span class="number">2</span>, val * <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">n = read();</span><br><span class="line"><span class="keyword">for</span> (ri i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">a[i] = i;</span><br><span class="line">Get_Ans(n, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (ri i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>, ans[i]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-HNOI2010-弹飞绵羊"><a href="#7-HNOI2010-弹飞绵羊" class="headerlink" title="7.[HNOI2010]弹飞绵羊"></a>7.<a href="https://www.luogu.org/problemnew/show/P3203" target="_blank" rel="noopener">[HNOI2010]弹飞绵羊</a></h2><center style="font-size:2em;color:green">Finished</center><hr><p>题意：给出一张图，第 $i$ 个点会被弹到到第 $i + a_i$ 个点， $i + a_i&gt;n$ 时则被弹飞，可以修改每个点被弹到的点的编号，问从某一个被弹多少次后会被弹飞。</p><hr><p>思路：建立一个虚拟的 $n + 1$ 表示被弹飞，然后暴力使用 $LCT$  模拟。每次 $Link$ $i$ 和 $i + a_i$ ，修改就先 $Cut$ 再 $Link$ 就行了，查询操作就先 $Split$ 一下 $i$ 和 $n + 1$，然后直接看 $n + 1$ 子树的 $size$ 就好了。</p><hr><p>注意：打好 $LCT$ 的同时要注意随时变更 $a_i$ ，写 $Splay$ 记得维护 $size$</p><hr><p>代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ri register int</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span> + <span class="number">110</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">110</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x7fffffff</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-8</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">il <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">0</span>, f = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> ch = getchar();</span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (ch == <span class="string">'-'</span>)</span><br><span class="line">            f=<span class="number">-1</span>;</span><br><span class="line">        ch = getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch))</span><br><span class="line">    &#123;</span><br><span class="line">        x = (x &lt;&lt; <span class="number">3</span>) + (x &lt;&lt; <span class="number">1</span>) + ch - <span class="string">'0'</span>;</span><br><span class="line">        ch = getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, q;</span><br><span class="line"><span class="keyword">int</span> c[N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> Link_Cut_Tree</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> st[N];</span><br><span class="line">    </span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        <span class="keyword">int</span> fa, ch[<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">int</span> siz;</span><br><span class="line">        <span class="keyword">bool</span> rev;</span><br><span class="line">    &#125;;</span><br><span class="line">    node a[N];</span><br><span class="line">    </span><br><span class="line">    <span class="function">il <span class="keyword">bool</span> <span class="title">Not_Root</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a[a[x].fa].ch[<span class="number">0</span>] == x || a[a[x].fa].ch[<span class="number">1</span>] == x;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function">il <span class="keyword">void</span> <span class="title">Pushup</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        a[x].siz = a[a[x].ch[<span class="number">0</span>]].siz + a[a[x].ch[<span class="number">1</span>]].siz + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">il <span class="keyword">void</span> <span class="title">Push_Reverse</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!x)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="built_in">std</span> :: swap(a[x].ch[<span class="number">0</span>], a[x].ch[<span class="number">1</span>]);</span><br><span class="line">        a[x].rev ^= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">il <span class="keyword">void</span> <span class="title">Pushdown</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (a[x].rev)</span><br><span class="line">        &#123;</span><br><span class="line">            Push_Reverse(a[x].ch[<span class="number">0</span>]);</span><br><span class="line">            Push_Reverse(a[x].ch[<span class="number">1</span>]);</span><br><span class="line">            a[x].rev = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function">il <span class="keyword">void</span> <span class="title">Rotate</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> y = a[x].fa;</span><br><span class="line">        <span class="keyword">int</span> z = a[y].fa;</span><br><span class="line">        <span class="keyword">bool</span> k = (a[y].ch[<span class="number">1</span>] == x);</span><br><span class="line">        <span class="keyword">int</span> w = a[x].ch[!k];</span><br><span class="line">        <span class="keyword">if</span> (Not_Root(y))</span><br><span class="line">            a[z].ch[a[z].ch[<span class="number">1</span>] == y] = x;</span><br><span class="line">        a[y].ch[k] = w;</span><br><span class="line">        a[x].ch[!k] = y;</span><br><span class="line">        <span class="keyword">if</span> (w)</span><br><span class="line">            a[w].fa = y;</span><br><span class="line">        a[y].fa = x;</span><br><span class="line">        a[x].fa = z;</span><br><span class="line">        </span><br><span class="line">        Pushup(y);</span><br><span class="line">        Pushup(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">il <span class="keyword">void</span> <span class="title">Splay</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> y = x, z = <span class="number">0</span>;</span><br><span class="line">        st[++z] = y;</span><br><span class="line">        <span class="keyword">while</span> (Not_Root(y))</span><br><span class="line">            st[++z] = y = a[y].fa;</span><br><span class="line">        <span class="keyword">while</span> (z)</span><br><span class="line">            Pushdown(st[z--]);</span><br><span class="line">        <span class="keyword">while</span> (Not_Root(x))</span><br><span class="line">        &#123;</span><br><span class="line">            y = a[x].fa;</span><br><span class="line">            z = a[y].fa;</span><br><span class="line">            <span class="keyword">if</span> (Not_Root(y))</span><br><span class="line">                Rotate(((a[y].ch[<span class="number">0</span>] == x) ^ (a[z].ch[<span class="number">0</span>] == x)) ? x : y);</span><br><span class="line">            Rotate(x);</span><br><span class="line">        &#125;</span><br><span class="line">        Pushup(x);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function">il <span class="keyword">void</span> <span class="title">Access</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (ri y = <span class="number">0</span>; x; x = a[y = x].fa)</span><br><span class="line">        &#123;</span><br><span class="line">            Splay(x);</span><br><span class="line">            a[x].ch[<span class="number">1</span>] = y;</span><br><span class="line">            Pushup(x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">il <span class="keyword">void</span> <span class="title">Make_Root</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Access(x);</span><br><span class="line">        Splay(x);</span><br><span class="line">        Push_Reverse(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">il <span class="keyword">int</span> <span class="title">Find_Root</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Access(x);</span><br><span class="line">        Splay(x);</span><br><span class="line">        <span class="keyword">while</span> (a[x].ch[<span class="number">0</span>])</span><br><span class="line">            Pushdown(x), x = a[x].ch[<span class="number">0</span>];</span><br><span class="line">        Splay(x);</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function">il <span class="keyword">void</span> <span class="title">Split</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Make_Root(x);</span><br><span class="line">        Access(y);</span><br><span class="line">        Splay(y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">il <span class="keyword">void</span> <span class="title">Link</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Make_Root(x);</span><br><span class="line">        <span class="keyword">if</span> (Find_Root(y) != x)</span><br><span class="line">            a[x].fa = y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">il <span class="keyword">void</span> <span class="title">Cut</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Make_Root(x);</span><br><span class="line">        <span class="keyword">if</span> (Find_Root(y) == x &amp;&amp; a[y].fa == x &amp;&amp; !a[y].ch[<span class="number">0</span>])</span><br><span class="line">        &#123;</span><br><span class="line">            a[y].fa = a[x].ch[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">            Pushup(x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function">il <span class="keyword">int</span> <span class="title">Query</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Split(x, n + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> a[n + <span class="number">1</span>].siz - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">il <span class="keyword">void</span> <span class="title">Change</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Cut(x, (x + c[x] &lt;= n) ? x + c[x] : n + <span class="number">1</span>);</span><br><span class="line">        Link(x, (x + y &lt;= n) ? x + y : n + <span class="number">1</span>);</span><br><span class="line">        c[x] = y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> Link_Cut_Tree;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> Wepdekr</span></span><br><span class="line">    freopen(<span class="string">"testdata1.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    n = read();</span><br><span class="line">    <span class="keyword">for</span> (ri i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        c[i] = read();</span><br><span class="line">        Link(i, (i + c[i] &lt;= n) ? i + c[i] : n + <span class="number">1</span>);</span><br><span class="line">        a[i].siz = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    a[n + <span class="number">1</span>].siz = <span class="number">1</span>;</span><br><span class="line">    q = read();</span><br><span class="line">    <span class="keyword">for</span> (ri i = <span class="number">1</span>; i &lt;= q; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> opt = read(), x = read();</span><br><span class="line">        <span class="keyword">if</span> (opt &amp; <span class="number">1</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, Query(x + <span class="number">1</span>));</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> y = read();</span><br><span class="line">            Change(x + <span class="number">1</span>, y);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">4</span></span><br><span class="line"><span class="comment">1 2 1 1</span></span><br><span class="line"><span class="comment">3</span></span><br><span class="line"><span class="comment">1 1</span></span><br><span class="line"><span class="comment">2 1 1</span></span><br><span class="line"><span class="comment">1 1</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="8-CF1066F-Yet-another-2D-Walking"><a href="#8-CF1066F-Yet-another-2D-Walking" class="headerlink" title="8.CF1066F Yet another 2D Walking"></a>8.<a href="https://codeforces.com/contest/1066/problem/F" target="_blank" rel="noopener">CF1066F Yet another 2D Walking</a></h2><center style="font-size:2em;color:green">Finished</center><hr><p>题意：在二维平面上给出 $n$ 个点，第 $i$ 个点的坐标为 $(x_i, y_i)$ ，我们把 $max(x, y)$ 相同的点称为同一层的点。定义两个点的距离为它们的曼哈顿距离，从 $(0, 0)$ 出发，遍历全部的 $n$ 个点，且在遍历完这一层的所有点之前不能遍历下一层的点，求走过的最短距离。</p><hr><p>思路：很显然有这样一个结论：遍历同一层的点时，从左上到右下一定是最佳策略。此时我们只需要记录在层间转移的代价即可。然后就可以 $\text{DP}$ ，用 $dp[i][j]\ (j\in{0,1})$ 来表示到第 $i$ 层，从左上/右下向下一层转移时的最小距离，假如用 $dist(A,B)$ 表示 $A$ , $B$ 两点间的距离，则有以下转移方程：</p><script type="math/tex; mode=display">dp[i][0] = min(dp[i - 1][0] + dist(a[i - 1][0], a[i][1]), dp[i - 1][1] + dist(a[i - 1][1], a[i][1])) + dist(a[i][0], a[i][1])\\dp[i][1] = min(dp[i - 1][0] + dist(a[i - 1][0], a[i][0]), dp[i - 1][1] + dist(a[i - 1][1], a[i][0])) + dist(a[i][0], a[i][1]);</script><hr><p>注意：并没有什么要注意的QwQ，记得使用long long</p><hr><p>代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ri register int</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span> + <span class="number">110</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">110</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x7fffffff</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-8</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">il <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">0</span>, f = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">char</span> ch = getchar();</span><br><span class="line"><span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (ch == <span class="string">'-'</span>)</span><br><span class="line">f = <span class="number">-1</span>;</span><br><span class="line">ch = getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch))</span><br><span class="line">&#123;</span><br><span class="line">x = (x &lt;&lt; <span class="number">3</span>) + (x &lt;&lt; <span class="number">1</span>) + ch - <span class="string">'0'</span>;</span><br><span class="line">ch = getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, cnt;</span><br><span class="line"><span class="keyword">int</span> dp[N][<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> x, y;</span><br><span class="line"><span class="keyword">friend</span> <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (node a1, node a2)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> a1.x == a2.x ? a1.y &gt; a2.y : a1.x &lt; a2.x;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">node a[N], b[N][<span class="number">2</span>];</span><br><span class="line"><span class="function">il <span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(node a1, node a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> max(a1.x, a1.y) &lt; max(a2.x, a2.y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">il <span class="keyword">int</span> <span class="title">Get_dist</span><span class="params">(node a1, node a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">abs</span>(a1.x - a2.x) + <span class="built_in">abs</span>(a1.y - a2.y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">n = read();</span><br><span class="line"><span class="keyword">for</span> (ri i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">a[i].x = read(), a[i].y = read();</span><br><span class="line">sort(a + <span class="number">1</span>, a + <span class="number">1</span> + n, cmp);</span><br><span class="line">a[n + <span class="number">1</span>] = (node) &#123;inf, inf&#125;;</span><br><span class="line">b[<span class="number">0</span>][<span class="number">0</span>] = b[<span class="number">0</span>][<span class="number">1</span>] = (node) &#123;<span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> now = <span class="number">0</span>, pos = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (ri i = <span class="number">1</span>; i &lt;= n + <span class="number">1</span>; i++)</span><br><span class="line"><span class="keyword">if</span> (max(a[i].x, a[i].y) &gt; now)</span><br><span class="line">&#123;</span><br><span class="line">sort(a + pos, a + i);</span><br><span class="line">b[cnt][<span class="number">0</span>] = a[pos];</span><br><span class="line">b[cnt][<span class="number">1</span>] = a[i - <span class="number">1</span>];</span><br><span class="line">cnt++;</span><br><span class="line">now = max(a[i].x, a[i].y);</span><br><span class="line">pos = i;</span><br><span class="line">&#125;</span><br><span class="line">    cnt--;</span><br><span class="line">dp[<span class="number">0</span>][<span class="number">0</span>] = dp[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (ri i = <span class="number">1</span>; i &lt;= cnt; i++)</span><br><span class="line">&#123;</span><br><span class="line">dp[i][<span class="number">0</span>] = min(dp[i - <span class="number">1</span>][<span class="number">0</span>] + Get_dist(b[i - <span class="number">1</span>][<span class="number">0</span>], b[i][<span class="number">1</span>]),</span><br><span class="line">   dp[i - <span class="number">1</span>][<span class="number">1</span>] + Get_dist(b[i - <span class="number">1</span>][<span class="number">1</span>], b[i][<span class="number">1</span>])) + Get_dist(b[i][<span class="number">0</span>], b[i][<span class="number">1</span>]);</span><br><span class="line">dp[i][<span class="number">1</span>] = min(dp[i - <span class="number">1</span>][<span class="number">0</span>] + Get_dist(b[i - <span class="number">1</span>][<span class="number">0</span>], b[i][<span class="number">0</span>]),</span><br><span class="line">   dp[i - <span class="number">1</span>][<span class="number">1</span>] + Get_dist(b[i - <span class="number">1</span>][<span class="number">1</span>], b[i][<span class="number">0</span>])) + Get_dist(b[i][<span class="number">0</span>], b[i][<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld"</span>, min(dp[cnt][<span class="number">0</span>], dp[cnt][<span class="number">1</span>]));</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="9-SDOI2008-洞穴勘测"><a href="#9-SDOI2008-洞穴勘测" class="headerlink" title="9.[SDOI2008]洞穴勘测"></a>9.<a href="https://www.luogu.org/problemnew/show/P2147" target="_blank" rel="noopener">[SDOI2008]洞穴勘测</a></h2><center style="font-size:2em;color:green">Finished</center><hr><p>题意：给出一张图，有 $m$ 次操作，每次连接一条边或者切断一条边，每次查询两个点的连通性</p><hr><p>思路： $LCT$ 裸题，连边就 $Link$ ，断边就 $Cut$ ，查询就 $FindRoot$ 就行了。</p><hr><p>注意： $LCT$ 不要打挂了。</p><hr><p>代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ri register int</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span> + <span class="number">110</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">110</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x7fffffff</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-8</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">il <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">0</span>, f = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> ch = getchar();</span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (ch == <span class="string">'-'</span>)</span><br><span class="line">            f=<span class="number">-1</span>;</span><br><span class="line">        ch = getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch))</span><br><span class="line">    &#123;</span><br><span class="line">        x = (x &lt;&lt; <span class="number">3</span>) + (x &lt;&lt; <span class="number">1</span>) + ch - <span class="string">'0'</span>;</span><br><span class="line">        ch = getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> Link_Cut_Tree</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> st[N];</span><br><span class="line">    </span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        <span class="keyword">int</span> fa, ch[<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">bool</span> rev;</span><br><span class="line">    &#125;;</span><br><span class="line">    node a[N];</span><br><span class="line">    </span><br><span class="line">    <span class="function">il <span class="keyword">bool</span> <span class="title">Not_Root</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a[a[x].fa].ch[<span class="number">0</span>] == x || a[a[x].fa].ch[<span class="number">1</span>] == x;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function">il <span class="keyword">void</span> <span class="title">Push_Reverse</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!x)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="built_in">std</span> :: swap(a[x].ch[<span class="number">0</span>], a[x].ch[<span class="number">1</span>]);</span><br><span class="line">        a[x].rev ^= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">il <span class="keyword">void</span> <span class="title">Pushdown</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (a[x].rev)</span><br><span class="line">        &#123;</span><br><span class="line">            Push_Reverse(a[x].ch[<span class="number">0</span>]);</span><br><span class="line">            Push_Reverse(a[x].ch[<span class="number">1</span>]);</span><br><span class="line">            a[x].rev = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function">il <span class="keyword">void</span> <span class="title">Rotate</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> y = a[x].fa;</span><br><span class="line">        <span class="keyword">int</span> z = a[y].fa;</span><br><span class="line">        <span class="keyword">bool</span> k = (a[y].ch[<span class="number">1</span>] == x);</span><br><span class="line">        <span class="keyword">int</span> w = a[x].ch[!k];</span><br><span class="line">        <span class="keyword">if</span> (Not_Root(y))</span><br><span class="line">            a[z].ch[a[z].ch[<span class="number">1</span>] == y] = x;</span><br><span class="line">        a[y].ch[k] = w;</span><br><span class="line">        a[x].ch[!k] = y;</span><br><span class="line">        <span class="keyword">if</span> (w)</span><br><span class="line">            a[w].fa = y;</span><br><span class="line">        a[y].fa = x;</span><br><span class="line">        a[x].fa = z;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">il <span class="keyword">void</span> <span class="title">Splay</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> y = x, z = <span class="number">0</span>;</span><br><span class="line">        st[++z] = y;</span><br><span class="line">        <span class="keyword">while</span> (Not_Root(y))</span><br><span class="line">            st[++z] = y = a[y].fa;</span><br><span class="line">        <span class="keyword">while</span> (z)</span><br><span class="line">            Pushdown(st[z--]);</span><br><span class="line">        <span class="keyword">while</span> (Not_Root(x))</span><br><span class="line">        &#123;</span><br><span class="line">            y = a[x].fa;</span><br><span class="line">            z = a[y].fa;</span><br><span class="line">            <span class="keyword">if</span> (Not_Root(y))</span><br><span class="line">                Rotate(((a[y].ch[<span class="number">0</span>] == x) ^ (a[z].ch[<span class="number">0</span>] == x)) ? x : y);</span><br><span class="line">            Rotate(x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function">il <span class="keyword">void</span> <span class="title">Access</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (ri y = <span class="number">0</span>; x; x = a[y = x].fa)</span><br><span class="line">        &#123;</span><br><span class="line">            Splay(x);</span><br><span class="line">            a[x].ch[<span class="number">1</span>] = y;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">il <span class="keyword">void</span> <span class="title">Make_Root</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Access(x);</span><br><span class="line">        Splay(x);</span><br><span class="line">        Push_Reverse(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">il <span class="keyword">int</span> <span class="title">Find_Root</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Access(x);</span><br><span class="line">        Splay(x);</span><br><span class="line">        <span class="keyword">while</span> (a[x].ch[<span class="number">0</span>])</span><br><span class="line">            Pushdown(x), x = a[x].ch[<span class="number">0</span>];</span><br><span class="line">        Splay(x);</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function">il <span class="keyword">void</span> <span class="title">Split</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Make_Root(x);</span><br><span class="line">        Access(y);</span><br><span class="line">        Splay(y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">il <span class="keyword">void</span> <span class="title">Link</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Make_Root(x);</span><br><span class="line">        <span class="keyword">if</span> (Find_Root(y) != x)</span><br><span class="line">            a[x].fa = y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">il <span class="keyword">void</span> <span class="title">Cut</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Make_Root(x);</span><br><span class="line">        <span class="keyword">if</span> (Find_Root(y) == x &amp;&amp; a[y].fa == x &amp;&amp; !a[y].ch[<span class="number">0</span>])</span><br><span class="line">            a[y].fa = a[x].ch[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> Link_Cut_Tree;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n = read(), m = read();</span><br><span class="line">    <span class="keyword">for</span> (ri i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">char</span> s[<span class="number">20</span>];</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>, s);</span><br><span class="line">        <span class="keyword">int</span> x = read(), y = read();</span><br><span class="line">        <span class="keyword">switch</span> (s[<span class="number">0</span>])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'C'</span>: Link(x, y); <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'D'</span>: Cut(x, y); <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'Q'</span>: (Find_Root(x) == Find_Root(y)) ? <span class="built_in">printf</span>(<span class="string">"Yes\n"</span>) : <span class="built_in">printf</span>(<span class="string">"No\n"</span>); <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">200 5</span></span><br><span class="line"><span class="comment">Query 123 127</span></span><br><span class="line"><span class="comment">Connect 123 127</span></span><br><span class="line"><span class="comment">Query 123 127</span></span><br><span class="line"><span class="comment">Destroy 127 123</span></span><br><span class="line"><span class="comment">Query 123 127</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="10-ZJOI2012-网络"><a href="#10-ZJOI2012-网络" class="headerlink" title="10.[ZJOI2012]网络"></a>10.<a href="https://www.luogu.org/problemnew/show/P2173" target="_blank" rel="noopener">[ZJOI2012]网络</a></h2><center style="font-size:2em;color:red">Unfinished</center><hr><p>题意：给出一张无向图，每个点有权值，每条边有一个颜色，且满足以下两个条件：</p><ol><li>对于任意节点连出去的边中，相同颜色的边不超过两条；</li><li>图中不存在同色的环，同色的环指相同颜色的边构成的环。</li></ol><p>在这个图上要支持以下三种操作：</p><ol><li>修改一个节点的权值；</li><li>修改一条边的颜色；</li><li>查询由颜色 $c$ 的边构成的图中，所有可能在节点 $u$ 到节点 $v$ 之间的简单路径上的节点的权值的最大值。</li></ol><hr><p>思路：由于题目中的图是动态的，所以 $\text{LCT}$ 是很显然的，但是涉及到多个颜色的问题比较难办，然而由于数据并不是很大，而且时限也给了 $2s$ ，所以暴力对每一种颜色建一棵 $\text{LCT}$ 就行了。</p><hr><h2 id="11-Luogu-1282-多米诺骨牌"><a href="#11-Luogu-1282-多米诺骨牌" class="headerlink" title="11.Luogu 1282 多米诺骨牌"></a>11.<a href="https://www.luogu.org/problemnew/show/P1282" target="_blank" rel="noopener">Luogu 1282 多米诺骨牌</a></h2><center style="font-size:2em;color:green">Finished</center><hr><p>题意：给出两个序列，分别将它们中所有数字的和记为 $S_1, S_2$ ，你可以任意交换两个序列同一位置上的数，使得 $|S_1 - S_2|$ 最小。</p><hr><p>思路：很显然这是一个 $\text{DP}$ ，考虑用 $dp[i][j]$ 表示第一个序列目前和为 $i$ ，当前进行到第 $j$ 个数时的最小交换次数，则有以下转移方程：</p><script type="math/tex; mode=display">dp[i][j] = min(dp[i][j], dp[i - a[j]][j - 1])\ \{i - a[j] \geq 0\}\\dp[i][j] = min(dp[i][j], dp[i - b[j]][j - 1] + 1)\ \{i - b[j] \geq 0\}</script><hr><p>注意：初始化的时候应该先初始化 $dp[b[1]][1] = 1$ 再 $dp[a[1]][1] = 0$ ，这样可以防止 $a_1 = b_1$ 导致的 $\color{red}{\text{WA}}$ 。</p><hr><p>代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ri register int</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span> + <span class="number">110</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">110</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1010</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">il <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">0</span>, f = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">char</span> ch = getchar();</span><br><span class="line"><span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (ch == <span class="string">'-'</span>)</span><br><span class="line">f = <span class="number">-1</span>;</span><br><span class="line">ch = getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch))</span><br><span class="line">&#123;</span><br><span class="line">x = (x &lt;&lt; <span class="number">3</span>) + (x &lt;&lt; <span class="number">1</span>) + ch - <span class="string">'0'</span>;</span><br><span class="line">ch = getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, s;</span><br><span class="line"><span class="keyword">int</span> a[N], b[N];</span><br><span class="line"><span class="keyword">int</span> dp[maxn * <span class="number">6</span>][maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">n = read();</span><br><span class="line"><span class="keyword">for</span> (ri i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line">a[i] = read(), b[i] = read();</span><br><span class="line">s += a[i] + b[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (ri i = <span class="number">0</span>; i &lt;= n * <span class="number">6</span>; i++)</span><br><span class="line"><span class="keyword">for</span> (ri j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">dp[i][j] = inf;</span><br><span class="line">dp[b[<span class="number">1</span>]][<span class="number">1</span>] = <span class="number">1</span>, dp[a[<span class="number">1</span>]][<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (ri i = <span class="number">0</span>; i &lt;= n * <span class="number">6</span>; i++)</span><br><span class="line"><span class="keyword">for</span> (ri j = <span class="number">2</span>; j &lt;= n; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (i - a[j] &gt;= <span class="number">0</span>)</span><br><span class="line">dp[i][j] = min(dp[i][j], dp[i - a[j]][j - <span class="number">1</span>]);</span><br><span class="line"><span class="keyword">if</span> (i - b[j] &gt;= <span class="number">0</span>)</span><br><span class="line">dp[i][j] = min(dp[i][j], dp[i - b[j]][j - <span class="number">1</span>] + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> minn = inf, ans = inf;</span><br><span class="line"><span class="keyword">for</span> (ri i = <span class="number">0</span>; i &lt;= min(s, n * <span class="number">6</span>); i++)</span><br><span class="line"><span class="keyword">if</span> (dp[i][n] != inf)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">abs</span>(i - (s - i)) &lt; minn)</span><br><span class="line">&#123;</span><br><span class="line">minn = <span class="built_in">abs</span>(i - (s - i));</span><br><span class="line">ans = dp[i][n];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">abs</span>(i - (s - i)) == minn)</span><br><span class="line">ans = min(ans, dp[i][n]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>, ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">4</span></span><br><span class="line"><span class="comment">6 1</span></span><br><span class="line"><span class="comment">1 5</span></span><br><span class="line"><span class="comment">1 3</span></span><br><span class="line"><span class="comment">1 2</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="12-NOIp2008-传纸条"><a href="#12-NOIp2008-传纸条" class="headerlink" title="12.[NOIp2008]传纸条"></a>12.<a href="https://www.luogu.org/problemnew/show/P1006" target="_blank" rel="noopener">[NOIp2008]传纸条</a></h2><center style="font-size:2em;color:green">Finished</center><hr><p>题意：给出一个矩阵，从左上角到右下角求出两条不重合的路径，求两条路径上数字之和的最大值。</p><hr><p>思路：很显然是一个动态规划，直接做有一个 $O(n^4)$ 的解法：简单地用 $dp[i][j][k][l]$ 表示第一条路径到了点 $(i, j)$ ，第二条路径到了点 $(k, l)$ 时的最大值。但是这样当数据强了以后就可能会 $\color{darkblue}{\text{TLE}}$ ，所以就必须要优化一下。然后我们可以想到，假设两条路径同步延伸的情况下，很显然就有 $i + j = k + l$ ，于是我们可以考虑将点的横纵坐标之和作为第一维，然后只要枚举横纵坐标中的某一个就可以知道两个点的坐标，然后复杂度就降低到了 $O(n ^ 3)$ ，就可以很轻松的过掉它了。</p><p>转移方程如下：</p><script type="math/tex; mode=display">dp[i][j][k] = max(dp[i - 1][j][k], dp[i - 1][j - 1][k], dp[i - 1][j][k - 1], dp[i - 1][j - 1][k - 1]) + a[j][i - j] + a[k][i - k]</script><hr><p>注意：似乎并没有什么要注意的（</p><hr><p>代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ri register int</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span> + <span class="number">110</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">110</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x7fffffff</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-8</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">il <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">0</span>, f = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> ch = getchar();</span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (ch == <span class="string">'-'</span>)</span><br><span class="line">            f = <span class="number">-1</span>;</span><br><span class="line">        ch = getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch))</span><br><span class="line">    &#123;</span><br><span class="line">        x = (x &lt;&lt; <span class="number">3</span>) + (x &lt;&lt; <span class="number">1</span>) + ch - <span class="string">'0'</span>;</span><br><span class="line">        ch = getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> a[MAXN][MAXN], dp[MAXN][MAXN][MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function">il <span class="keyword">bool</span> <span class="title">Illegal</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> z)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> y == z || x - y &lt; <span class="number">1</span> || x - z &lt; <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n = read(), m = read();</span><br><span class="line">    <span class="keyword">for</span> (ri i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="keyword">for</span> (ri j = <span class="number">1</span>; j &lt;= m; j++)</span><br><span class="line">            a[i][j] = read();</span><br><span class="line">    <span class="built_in">memset</span>(dp, <span class="number">0xc0</span>, <span class="keyword">sizeof</span>(dp));</span><br><span class="line">    dp[<span class="number">2</span>][<span class="number">1</span>][<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (ri i = <span class="number">3</span>; i &lt;= n + m - <span class="number">1</span>; i++)</span><br><span class="line">        <span class="keyword">for</span> (ri j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">            <span class="keyword">for</span> (ri k = <span class="number">1</span>; k &lt;= n; k++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (Illegal(i, j, k))</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                dp[i][j][k] = max(max(dp[i - <span class="number">1</span>][j][k], dp[i - <span class="number">1</span>][j - <span class="number">1</span>][k]),</span><br><span class="line">                                  max(dp[i - <span class="number">1</span>][j][k - <span class="number">1</span>], dp[i - <span class="number">1</span>][j - <span class="number">1</span>][k - <span class="number">1</span>])) +</span><br><span class="line">                                  a[j][i - j] + a[k][i - k];</span><br><span class="line">            &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, dp[n + m - <span class="number">1</span>][n][n - <span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">3 3</span></span><br><span class="line"><span class="comment">0 3 9</span></span><br><span class="line"><span class="comment">2 8 5</span></span><br><span class="line"><span class="comment">5 7 0</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="13-Luogu-1736-创意吃鱼法"><a href="#13-Luogu-1736-创意吃鱼法" class="headerlink" title="13.Luogu 1736 创意吃鱼法"></a>13.<a href="https://www.luogu.org/problemnew/show/P1736" target="_blank" rel="noopener">Luogu 1736 创意吃鱼法</a></h2><center style="font-size:2em;color:green">Finished</center><hr><p>题意：给出一个01矩阵，求出仅一条对角线上全部为1，其余位置均为0的正方形子矩阵的对角线最大长度。</p><hr><p>思路：这个题与<a href="https://www.luogu.org/problemnew/show/P1387" target="_blank" rel="noopener">最大正方形</a>很像，一样可以考虑暴力 $\text{DP}$ ，但是需要做一点简单的预处理。</p><p>考虑用 $s1[i][j]$ 表示从点 $(i, j)$ 向左/右扩展的连续0的个数，用 $s2[i][j]$ 表示从点 $(i, j)$ 向上扩展的连续0的个数，于是乎可以很简单的得到以下转移方程：</p><script type="math/tex; mode=display">dp[i][j] = min(s1[i][j - 1], s2[i - 1][j], dp[i - 1][j - 1]) + 1</script><hr><p>注意：要 $\text{DP}$ 两次，因为正方形的对角线不止一条。</p><hr><p>代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ri register int</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span> + <span class="number">110</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">110</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x7fffffff</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2567</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">il <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">0</span>, f = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> ch = getchar();</span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (ch == <span class="string">'-'</span>)</span><br><span class="line">            f = <span class="number">-1</span>;</span><br><span class="line">        ch = getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch))</span><br><span class="line">    &#123;</span><br><span class="line">        x = (x &lt;&lt; <span class="number">3</span>) + (x &lt;&lt; <span class="number">1</span>) + ch - <span class="string">'0'</span>;</span><br><span class="line">        ch = getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, ans = -inf;</span><br><span class="line"><span class="keyword">int</span> a[maxn][maxn], dp[maxn][maxn];</span><br><span class="line"><span class="keyword">int</span> s1[maxn][maxn], s2[maxn][maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n = read(), m = read();</span><br><span class="line">    <span class="keyword">for</span> (ri i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="keyword">for</span> (ri j = <span class="number">1</span>; j &lt;= m; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            a[i][j] = read();</span><br><span class="line">            <span class="keyword">if</span> (!a[i][j])</span><br><span class="line">            &#123;</span><br><span class="line">                s1[i][j] = s1[i][j - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">                s2[i][j] = s2[i - <span class="number">1</span>][j] + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                dp[i][j] = min(min(s1[i][j - <span class="number">1</span>], s2[i - <span class="number">1</span>][j]), dp[i - <span class="number">1</span>][j - <span class="number">1</span>]) + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (ri i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="keyword">for</span> (ri j = <span class="number">1</span>; j &lt;= m; j++)</span><br><span class="line">            ans = max(ans, dp[i][j]);</span><br><span class="line">    <span class="built_in">memset</span>(s1, <span class="number">0</span>, <span class="keyword">sizeof</span>(s1));</span><br><span class="line">    <span class="built_in">memset</span>(dp, <span class="number">0</span>, <span class="keyword">sizeof</span>(dp));</span><br><span class="line">    <span class="keyword">for</span> (ri i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="keyword">for</span> (ri j = m; j; j--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (!a[i][j])</span><br><span class="line">                s1[i][j] = s1[i][j + <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                dp[i][j] = min(min(s1[i][j + <span class="number">1</span>], s2[i - <span class="number">1</span>][j]), dp[i - <span class="number">1</span>][j + <span class="number">1</span>]) + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">for</span> (ri i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="keyword">for</span> (ri j = <span class="number">1</span>; j &lt;= m; j++)</span><br><span class="line">            ans = max(ans, dp[i][j]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">4 6</span></span><br><span class="line"><span class="comment">0 1 0 1 0 0</span></span><br><span class="line"><span class="comment">0 0 1 0 1 0</span></span><br><span class="line"><span class="comment">1 1 0 0 0 1</span></span><br><span class="line"><span class="comment">0 1 1 0 1 0</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><hr><h2 id="14-Luogu-4918-信仰收集"><a href="#14-Luogu-4918-信仰收集" class="headerlink" title="14.Luogu 4918 信仰收集"></a><a href="https://www.luogu.org/problemnew/show/P4918" target="_blank" rel="noopener">14.Luogu 4918 信仰收集</a></h2><center style="font-size:2em;color:green">Finished</center><hr><p>题意：给出一个 $\text{DAG}$ 图，每条边长为 $1$ 个单位，一些点有 $val$ 的价值，早苗从 $1$ 号点出发，一步可以走 $a$ 个单位或 $b$ 个单位，代价分别为 $w_a$ 和 $w_b$ ，她走到一个点的时候可以获得等于这个点价值的收益，她可以在任意一个点停下来，求获得的(收益-代价)的最大值。</p><hr><p>思路：很显然这可以 $\text{DP}$ ，我最开始想到了一个很暴力的转移，从 $1$ 号点开始枚举往后走 $a$ 个单位和 $b$ 个单位能到达的点然后转移，但是这样很显然是过不了全部点的。<del>于是拿 $60pts$ 走人</del> </p><p>然后正解其实想到了并不难写，但相当的难想，毕竟 $\text{YSJ}$ 聚聚的原话就是这道题难度主要集中在思维难度上（毒瘤！）。</p><p>我们可以把一步走 $k$ 个单位拆成走 $k$ 步，每步走一个单位然后停下来，那么就可以用 $dp[i][j]$ 表示从第 $i$ 个点开始，还要走几步才能停下来的最大(收益-代价)。</p><p>拓扑排序后，对于一个点 $u$ ，枚举与它相邻的所有点 $v$ ，就会有以下转移方程：</p><script type="math/tex; mode=display">dp[v][i] = max(dp[v][i], dp[u][i + 1])\ \ (0 < i < b)\\dp[v][a - 1] = max(dp[v][a - 1], dp[u][0] - w_a)\\dp[v][b - 1] = max(dp[v][b - 1], dp[u][0] - w_b)\\dp[v][0] = max(dp[v][0], dp[u][1] + w[v])</script><hr><p>注意：要特判 $a = 1$ 和 $b = 1$ 的情况。</p><hr><p>代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ri register int</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e5</span> + <span class="number">110</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">110</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x7fffffff</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-8</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">il <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">0</span>, f = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> ch = getchar();</span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (ch == <span class="string">'-'</span>)</span><br><span class="line">            f = <span class="number">-1</span>;</span><br><span class="line">        ch = getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch))</span><br><span class="line">    &#123;</span><br><span class="line">        x = (x &lt;&lt; <span class="number">3</span>) + (x &lt;&lt; <span class="number">1</span>) + ch - <span class="string">'0'</span>;</span><br><span class="line">        ch = getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, k, a, b, w_a, w_b, fr, tl;</span><br><span class="line"><span class="keyword">int</span> w[N], in[N];</span><br><span class="line"><span class="keyword">int</span> dp[N][<span class="number">51</span>], q[N * <span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Graph</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> head[N], cnt;</span><br><span class="line">    </span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">edge</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        <span class="keyword">int</span> to, nxt;</span><br><span class="line">    &#125;;</span><br><span class="line">    edge e[N * <span class="number">2</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="function">il <span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        e[++cnt] = (edge) &#123;v, head[u]&#125;;</span><br><span class="line">        head[u] = cnt;</span><br><span class="line">        in[v]++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">Graph G;</span><br><span class="line"></span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">Delete</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (ri i = G.head[x]; i; i = G.e[i].nxt)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v = G.e[i].to;</span><br><span class="line">        in[v]--;</span><br><span class="line">        <span class="keyword">if</span> (!in[v])</span><br><span class="line">            q[++tl] = v;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">Solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tl = <span class="number">0</span>, fr = <span class="number">0</span>;</span><br><span class="line">    q[++tl] = <span class="number">1</span>;</span><br><span class="line">    dp[<span class="number">1</span>][<span class="number">0</span>] = w[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">while</span> (fr &lt; tl)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u = q[++fr];</span><br><span class="line">        Delete(u);</span><br><span class="line">        <span class="keyword">for</span> (ri i = G.head[u]; i; i = G.e[i].nxt)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> v = G.e[i].to;</span><br><span class="line">            <span class="keyword">if</span> (dp[u][<span class="number">0</span>] != dp[<span class="number">0</span>][<span class="number">0</span>])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (a != <span class="number">1</span>)</span><br><span class="line">                    dp[v][a - <span class="number">1</span>] = max(dp[v][a - <span class="number">1</span>], dp[u][<span class="number">0</span>] - w_a);</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    dp[v][<span class="number">0</span>] = max(dp[v][<span class="number">0</span>], dp[u][<span class="number">0</span>] - w_a + w[v]);</span><br><span class="line">                <span class="keyword">if</span> (b != <span class="number">1</span>)</span><br><span class="line">                    dp[v][b - <span class="number">1</span>] = max(dp[v][b - <span class="number">1</span>], dp[u][<span class="number">0</span>] - w_b);</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    dp[v][<span class="number">0</span>] = max(dp[v][<span class="number">0</span>], dp[u][<span class="number">0</span>] - w_b + w[v]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (dp[u][<span class="number">1</span>] != dp[<span class="number">0</span>][<span class="number">0</span>])</span><br><span class="line">                dp[v][<span class="number">0</span>] = max(dp[v][<span class="number">0</span>], dp[u][<span class="number">1</span>] + w[v]);</span><br><span class="line">            <span class="keyword">for</span> (ri j = b; j &gt; <span class="number">1</span>; j--)</span><br><span class="line">                <span class="keyword">if</span> (dp[u][j] != dp[<span class="number">0</span>][<span class="number">0</span>])</span><br><span class="line">                    dp[v][j - <span class="number">1</span>] = max(dp[v][j - <span class="number">1</span>], dp[u][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n = read(), m = read(), k = read();</span><br><span class="line">    a = read(), b = read(), w_a = read(), w_b = read();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (ri i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> pos = read(), t = read();</span><br><span class="line">        w[pos] += t;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (ri i = <span class="number">1</span>; i &lt;= k; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u = read(), v = read();</span><br><span class="line">        G.add_edge(u, v);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (ri i = <span class="number">2</span>; i &lt;= m; i++)</span><br><span class="line">        <span class="keyword">if</span> (!in[i])</span><br><span class="line">            q[++tl] = i;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (fr &lt; tl)</span><br><span class="line">        Delete(q[++fr]);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">memset</span>(dp, <span class="number">0xc0</span>, <span class="keyword">sizeof</span>(dp));</span><br><span class="line">    Solve();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (ri i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">        ans = max(ans, dp[i][<span class="number">0</span>]);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">3 7 8</span></span><br><span class="line"><span class="comment">1 2</span></span><br><span class="line"><span class="comment">3 2</span></span><br><span class="line"><span class="comment">2 2</span></span><br><span class="line"><span class="comment">4 3</span></span><br><span class="line"><span class="comment">6 4</span></span><br><span class="line"><span class="comment">1 2</span></span><br><span class="line"><span class="comment">2 4</span></span><br><span class="line"><span class="comment">4 5</span></span><br><span class="line"><span class="comment">2 6</span></span><br><span class="line"><span class="comment">7 6</span></span><br><span class="line"><span class="comment">6 4</span></span><br><span class="line"><span class="comment">3 2</span></span><br><span class="line"><span class="comment">3 4</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="15-Luogu-1052-过河"><a href="#15-Luogu-1052-过河" class="headerlink" title="15. Luogu 1052 过河"></a>15. <a href="https://www.luogu.org/problemnew/show/P1052" target="_blank" rel="noopener">Luogu 1052 过河</a></h2><center style="font-size:2em;color:green">Finished</center><hr><p>题意：一座长 $L$ 的桥，某些位置上有石头，一步可以走区间 $[s, t]$ 中的任意正整数，问最少会踩到多少石头。</p><hr><p>思路：其实很显然是一道 $\text{DP}$ ，假如不考虑 $L$ 那个大的变态的范围，还是一道很水的题目，但是现在情况并不一样，所以怎么办呢？当然问题也不大，因为 $m$ 并不是很大，所以有很多石头之间的间距很大，但这些间距并没有意义，所以我们可以考虑把间距合理的缩小。</p><p>由数据范围可知 $s$ 和 $t$ 都在 $10$ 以内，然后我们可以求得 $1$ 到 $10$ 的 $lcm$ 为 $2520$ ，所以我们考虑把间距大于这个值的所有石头平移 $2520n$ 个单位长度，这样就可以做了。</p><hr><p>注意：并没有什么要注意的（</p><hr><p>代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ri register int</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span> + <span class="number">110</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">110</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x7fffffff</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-8</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">il <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">0</span>, f = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">char</span> ch = getchar();</span><br><span class="line"><span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (ch == <span class="string">'-'</span>)</span><br><span class="line">f = <span class="number">-1</span>;</span><br><span class="line">ch = getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch))</span><br><span class="line">&#123;</span><br><span class="line">x = (x &lt;&lt; <span class="number">3</span>) + (x &lt;&lt; <span class="number">1</span>) + ch - <span class="string">'0'</span>;</span><br><span class="line">ch = getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> l;</span><br><span class="line"><span class="keyword">int</span> s, t, m;</span><br><span class="line"><span class="keyword">int</span> a[N], b[N], f[N];</span><br><span class="line"><span class="keyword">bool</span> vis[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">l = read();</span><br><span class="line">s = read(), t = read(), m = read();</span><br><span class="line"><span class="keyword">for</span> (ri i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">a[i] = read();</span><br><span class="line">sort(a + <span class="number">1</span>, a + <span class="number">1</span> + m);</span><br><span class="line"><span class="keyword">for</span> (ri i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> d = a[i] - a[i - <span class="number">1</span>];</span><br><span class="line"><span class="keyword">if</span> (d &gt; <span class="number">2520</span>)</span><br><span class="line">d %= <span class="number">2520</span>;</span><br><span class="line">b[i] = b[i - <span class="number">1</span>] + d;</span><br><span class="line">vis[b[i]] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">b[++m] = b[m] + (l - b[m]) % <span class="number">2520</span>;</span><br><span class="line">l = b[m];</span><br><span class="line"><span class="built_in">memset</span>(f, <span class="number">63</span>, <span class="keyword">sizeof</span>(f));</span><br><span class="line">f[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (ri i = s; i &lt; b[m] + t; i++)</span><br><span class="line"><span class="keyword">for</span> (ri j = s; j &lt;= t; j++)</span><br><span class="line"><span class="keyword">if</span> (i &gt;= j)</span><br><span class="line">f[i] = min(f[i - j] + vis[i], f[i]);</span><br><span class="line"><span class="keyword">int</span> ans = inf;</span><br><span class="line"><span class="keyword">for</span> (ri i = b[m]; i &lt; b[m] + t; i++)</span><br><span class="line">ans = min(ans, f[i]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>, ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">10</span></span><br><span class="line"><span class="comment">2 3 5</span></span><br><span class="line"><span class="comment">2 3 5 6 7</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 水题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 水 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>【SDOI2010】猪国杀题解</title>
      <link href="/2018/11/06/Luogu%20P2482/"/>
      <url>/2018/11/06/Luogu%20P2482/</url>
      <content type="html"><![CDATA[<p><img src="http://wx2.sinaimg.cn/mw690/0060lm7Tly1fwy163d9t7j30xc0ir1kx.jpg" alt=""></p><a id="more"></a><p>这个……真的是码农题中的码农题，真的写的我心态爆炸，所以来写一点东西造(bao)福(fu)社会。</p><p>其实没什么好说的（？）</p><p>首先是规则的理解方面。这玩意就是玩一盘三国杀，很多规则就自己理解了，读那个 $\text{SB}$ 题面根本就不可能打的对，当然我也讲不清楚。 <del>所以说果然我还是三国杀玩的少了（雾）</del> </p><p>然后有一个名叫类反贼的东西非常恶心。哪怕一个玩家是忠臣，只要用了一张 $\text{AOE}$ ，并且主公手里恰好没有可以抵消伤害的牌，那么这个可怜的忠臣就会被主公针对，除非他明示自己的身份。</p><p>然后就是无懈可击。这个是毒瘤中的毒瘤，因为无懈可击可以取消无懈可击，所以就会导致各种毒瘤事情，切莫打挂。</p><p>最后就是这些玩家的行为准则。这些玩家的行动相当的没有脑子，所以不能以常规的玩三国杀的思路来做，请注意。</p><hr><p>如果你注意到了这些东西还没有过的话……恭喜你，可以开始调试了。</p><p>调试这种东西是 <strong>绝对不能</strong> 使用分步查看这种手段的，所以下面我简单地讲一下如何输出调试。</p><ol><li>你的代码一般来说并不是很短，很多时候你的调试难易程度由你的代码决定，打代码时请务必三思 <del>（这跟调试没什么关系吧喂！</del> </li><li>输出调试时加上必要的标志信息，这样面对一大堆调试信息的时候也可以通过 <code>Ctrl + F</code> 来快速的寻找你所需要的关键信息</li><li>根据自己的需要写，哪里挂了在哪里加调试语句，这样有针对性的调试效率会高很多。</li><li>调试的时候应该模拟整局游戏的过程，比如说谁用了一张什么牌，谁杀了谁等等，比起只输出血量变化会有用的多</li><li>调试的时候请确认你已经熟悉了游戏规则。</li></ol><p>大概就这些（吧），总之又是喜闻乐见的贴代码环节，由于调试语句的数量太多，所以删了（就是不给你们看.jpg），总之贴代码的目的只不过是给你们看一下曾经有这么一个人也写的很长罢了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ri register int</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e4</span> + <span class="number">110</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">110</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x7fffffff</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-8</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">il <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">0</span>, f = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">char</span> ch = getchar();</span><br><span class="line"><span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (ch == <span class="string">'-'</span>)</span><br><span class="line">f = <span class="number">-1</span>;</span><br><span class="line">ch = getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch))</span><br><span class="line">&#123;</span><br><span class="line">x = (x &lt;&lt; <span class="number">3</span>) + (x &lt;&lt; <span class="number">1</span>) + ch - <span class="string">'0'</span>;</span><br><span class="line">ch = getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> Heap[N], top;</span><br><span class="line"><span class="keyword">int</span> tot[<span class="number">4</span>];</span><br><span class="line"><span class="keyword">bool</span> End;</span><br><span class="line"></span><br><span class="line"><span class="function">il <span class="keyword">int</span> <span class="title">Card_Type</span><span class="params">(<span class="built_in">string</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">switch</span> (s[<span class="number">0</span>])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'P'</span>: <span class="keyword">return</span> <span class="number">1</span>; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'K'</span>: <span class="keyword">return</span> <span class="number">2</span>; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'D'</span>: <span class="keyword">return</span> <span class="number">3</span>; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'F'</span>: <span class="keyword">return</span> <span class="number">4</span>; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'N'</span>: <span class="keyword">return</span> <span class="number">5</span>; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'W'</span>: <span class="keyword">return</span> <span class="number">6</span>; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'J'</span>: <span class="keyword">return</span> <span class="number">7</span>; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'Z'</span>: <span class="keyword">return</span> <span class="number">8</span>; <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">il <span class="keyword">int</span> <span class="title">Relationship</span><span class="params">(<span class="keyword">int</span> stpa, <span class="keyword">int</span> stpb)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> ((stpb == <span class="number">3</span> &amp;&amp; (stpa == <span class="number">1</span> || stpa == <span class="number">2</span>)) ||</span><br><span class="line">(stpa == <span class="number">3</span> &amp;&amp; (stpb == <span class="number">1</span> || stpb == <span class="number">2</span>)))</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">if</span> ((stpa == <span class="number">1</span> &amp;&amp; stpb == <span class="number">2</span>) || (stpa == <span class="number">2</span> &amp;&amp; stpb == <span class="number">1</span>) ||</span><br><span class="line">(stpa == <span class="number">2</span> &amp;&amp; stpb == <span class="number">2</span>) || (stpa == <span class="number">3</span> &amp;&amp; stpb == <span class="number">3</span>) || (stpa == <span class="number">1</span> &amp;&amp; stpb == <span class="number">1</span>))</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">player</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> stp, num, hp; <span class="comment">//stp : This pig's standpoint.</span></span><br><span class="line"> <span class="comment">//num : The number of this pig's cards.</span></span><br><span class="line"> <span class="comment">//hp : The remaining life of this pig.</span></span><br><span class="line"><span class="keyword">int</span> card[N];</span><br><span class="line"><span class="keyword">int</span> deem[<span class="number">12</span>]; <span class="comment">//This pig's impression of other pigs.</span></span><br><span class="line"><span class="keyword">int</span> tmp[N];</span><br><span class="line"><span class="keyword">bool</span> weapon;</span><br><span class="line"><span class="keyword">bool</span> idn; <span class="comment">//Wether this pig is identified or not.</span></span><br><span class="line"></span><br><span class="line">player()</span><br><span class="line">&#123;</span><br><span class="line">num = stp = weapon = idn = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">memset</span>(card, <span class="number">0</span>, <span class="keyword">sizeof</span>(card));</span><br><span class="line">deem[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">hp = <span class="number">4</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">Get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; s;</span><br><span class="line"><span class="keyword">switch</span> (s[<span class="number">0</span>])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'M'</span>: stp = <span class="number">1</span>, tot[<span class="number">1</span>]++; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'Z'</span>: stp = <span class="number">2</span>, tot[<span class="number">2</span>]++; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'F'</span>: stp = <span class="number">3</span>, tot[<span class="number">3</span>]++; <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (ri i = <span class="number">1</span>; i &lt;= <span class="number">4</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; s;</span><br><span class="line">card[++num] = Card_Type(s);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">Clear</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">weapon = hp = num = stp = idn = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">memset</span>(card, <span class="number">0</span>, <span class="keyword">sizeof</span>(card));</span><br><span class="line"><span class="built_in">memset</span>(tmp, <span class="number">0</span>, <span class="keyword">sizeof</span>(tmp));</span><br><span class="line"><span class="built_in">memset</span>(deem, <span class="number">0</span>, <span class="keyword">sizeof</span>(deem));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">il <span class="keyword">bool</span> <span class="title">Defend</span><span class="params">(<span class="keyword">int</span> type)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (ri i = <span class="number">1</span>; i &lt;= num; i++)</span><br><span class="line"><span class="keyword">if</span> (card[i] == type)</span><br><span class="line">&#123;</span><br><span class="line">card[i] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">Get_One</span><span class="params">()</span> <span class="comment">//Get one card</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (top == m)</span><br><span class="line">card[++num] = Heap[m];</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">card[++num] = Heap[++top];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">Get_Card</span><span class="params">(<span class="keyword">int</span> x)</span> <span class="comment">//Get x cards</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (ri i = <span class="number">1</span>; i &lt;= x; i++)</span><br><span class="line">Get_One();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">Clear_Card</span><span class="params">()</span> <span class="comment">//Clear used cards</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(tmp, <span class="number">0</span>, <span class="keyword">sizeof</span>(tmp));</span><br><span class="line"><span class="keyword">for</span> (ri i = <span class="number">1</span>; i &lt;= num; i++)</span><br><span class="line"><span class="keyword">if</span> (card[i] != <span class="number">0</span>)</span><br><span class="line">tmp[++tmp[<span class="number">0</span>]] = card[i];</span><br><span class="line">num = tmp[<span class="number">0</span>];</span><br><span class="line"><span class="built_in">memset</span>(card, <span class="number">0</span>, <span class="keyword">sizeof</span>(card));</span><br><span class="line"><span class="keyword">for</span> (ri i = <span class="number">1</span>; i &lt;= num; i++)</span><br><span class="line">card[i] = tmp[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">player a[<span class="number">12</span>];</span><br><span class="line"></span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> winner)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (winner == <span class="number">1</span>)</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"MP"</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"FP"</span>);</span><br><span class="line"><span class="keyword">for</span> (ri i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (!a[i].hp)</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"DEAD"</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">a[i].Clear_Card();</span><br><span class="line"><span class="keyword">for</span> (ri j = <span class="number">1</span>; j &lt;= a[i].num; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">switch</span> (a[i].card[j])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>: <span class="built_in">putchar</span>(<span class="string">'P'</span>); <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>: <span class="built_in">putchar</span>(<span class="string">'K'</span>); <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>: <span class="built_in">putchar</span>(<span class="string">'D'</span>); <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>: <span class="built_in">putchar</span>(<span class="string">'F'</span>); <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">5</span>: <span class="built_in">putchar</span>(<span class="string">'N'</span>); <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">6</span>: <span class="built_in">putchar</span>(<span class="string">'W'</span>); <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">7</span>: <span class="built_in">putchar</span>(<span class="string">'J'</span>); <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">8</span>: <span class="built_in">putchar</span>(<span class="string">'Z'</span>); <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">putchar</span>(<span class="string">' '</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">il <span class="keyword">int</span> <span class="title">Check_End</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!a[<span class="number">1</span>].hp)</span><br><span class="line">&#123;</span><br><span class="line">End = <span class="number">1</span>;</span><br><span class="line">print(<span class="number">3</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (ri i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line"><span class="keyword">if</span> (a[i].stp == <span class="number">3</span> &amp;&amp; a[i].hp)</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">print(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">Liquidation</span><span class="params">(<span class="keyword">int</span> from, <span class="keyword">int</span> id)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (a[id].stp == <span class="number">2</span> &amp;&amp; from == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">memset</span>(a[<span class="number">1</span>].card, <span class="number">0</span>, <span class="keyword">sizeof</span>(a[<span class="number">1</span>].card));</span><br><span class="line"><span class="built_in">memset</span>(a[<span class="number">1</span>].tmp, <span class="number">0</span>, <span class="keyword">sizeof</span>(a[<span class="number">1</span>].tmp));</span><br><span class="line">a[<span class="number">1</span>].num = <span class="number">0</span>;</span><br><span class="line">a[<span class="number">1</span>].weapon = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (a[id].stp == <span class="number">3</span>)</span><br><span class="line">a[from].Get_Card(<span class="number">3</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">Death_Check</span><span class="params">(<span class="keyword">int</span> from, <span class="keyword">int</span> id)</span> <span class="comment">//Wether this pig will die or not</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">a[id].hp--;</span><br><span class="line"><span class="keyword">if</span> (a[id].hp &gt; <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">for</span> (ri i = <span class="number">1</span>; i &lt;= a[id].num; i++)</span><br><span class="line"><span class="keyword">if</span> (a[id].card[i] == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">a[id].hp++;</span><br><span class="line">a[id].card[i] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!Check_End())</span><br><span class="line">Liquidation(from, id);</span><br><span class="line">a[id].Clear();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">il <span class="keyword">bool</span> <span class="title">Decide</span><span class="params">(<span class="keyword">int</span> from)</span> <span class="comment">//Decide who to use this Slash</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> dis = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">bool</span> Slash = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (ri i = from % n + <span class="number">1</span>; i != from; i = i % n + <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (!a[i].hp)</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">dis = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (from == <span class="number">1</span> &amp;&amp; !a[i].idn &amp;&amp; Relationship(a[from].stp, a[from].deem[i]) == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">Slash = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (!a[i].Defend(<span class="number">3</span>))</span><br><span class="line">Death_Check(from, i);</span><br><span class="line">a[from].idn = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (a[i].idn &amp;&amp; Relationship(a[from].stp, a[i].stp) == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">Slash = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (!a[i].Defend(<span class="number">3</span>))</span><br><span class="line">Death_Check(from, i);</span><br><span class="line">a[from].idn = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (dis)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> Slash;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">il <span class="keyword">bool</span> <span class="title">Check</span><span class="params">(<span class="keyword">int</span> from, <span class="keyword">int</span> now)</span> <span class="comment">//Check wether this card will come into force</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">bool</span> enable = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> i = from, k = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (k &lt; n)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (i != <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (!a[now].idn)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">if</span> (Relationship(a[i].stp, a[now].stp) == <span class="number">1</span> &amp;&amp; enable ||</span><br><span class="line">Relationship(a[i].stp, a[now].stp) == <span class="number">-1</span> &amp;&amp; !enable || (i == now &amp;&amp; enable))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (ri j = <span class="number">1</span>; j &lt;= a[i].num; j++)</span><br><span class="line"><span class="keyword">if</span> (a[i].card[j] == <span class="number">7</span>)</span><br><span class="line">&#123;</span><br><span class="line">a[i].card[j] = <span class="number">0</span>;</span><br><span class="line">enable ^= <span class="number">1</span>;</span><br><span class="line">a[i].idn = <span class="number">1</span>;</span><br><span class="line">k = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> ((a[now].idn &amp;&amp; (a[now].stp == <span class="number">3</span> &amp;&amp; !enable || a[now].stp == <span class="number">2</span> &amp;&amp; enable)) ||</span><br><span class="line">(i == now &amp;&amp; enable) || !a[now].idn &amp;&amp; a[<span class="number">1</span>].deem[now] == <span class="number">3</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (ri j = <span class="number">1</span>; j &lt;= a[i].num; j++)</span><br><span class="line"><span class="keyword">if</span> (a[i].card[j] == <span class="number">7</span>)</span><br><span class="line">&#123;</span><br><span class="line">a[i].card[j] = <span class="number">0</span>;</span><br><span class="line">enable ^= <span class="number">1</span>;</span><br><span class="line">k = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">i = i % n + <span class="number">1</span>;</span><br><span class="line">k++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> enable;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">Duel</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> <span class="comment">//x------Duel------&gt;y</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (x == <span class="number">1</span> &amp;&amp; a[y].stp == <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line">Death_Check(x, y);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">bool</span> bar = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (ri i = <span class="number">1</span>; i &lt;= a[y].num; i++)</span><br><span class="line"><span class="keyword">if</span> (a[y].card[i] == <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line">bar = <span class="number">1</span>;</span><br><span class="line">a[y].card[i] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!bar)</span><br><span class="line">&#123;</span><br><span class="line">Death_Check(x, y);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> foo = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (ri i = <span class="number">1</span>; i &lt;= a[x].num; i++)</span><br><span class="line"><span class="keyword">if</span> (a[x].card[i] == <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line">foo = <span class="number">1</span>;</span><br><span class="line">a[x].card[i] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!foo)</span><br><span class="line">&#123;</span><br><span class="line">Death_Check(y, x);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">il <span class="keyword">bool</span> <span class="title">Lord_Check_Duel</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">bool</span> foo = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (ri i = <span class="number">2</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (!a[i].hp)</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span> (a[i].idn &amp;&amp; a[i].stp == <span class="number">3</span> || !a[i].idn &amp;&amp; a[<span class="number">1</span>].deem[i] == <span class="number">3</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (Check(<span class="number">1</span>, i))</span><br><span class="line">Duel(<span class="number">1</span>, i);</span><br><span class="line">foo = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> foo;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">bool</span> <span class="title">Loyal_Check_Duel</span><span class="params">(<span class="keyword">int</span> id)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">bool</span> foo = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (ri i = id % n + <span class="number">1</span>; i != id; i = i % n + <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (!a[i].hp)</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span> (a[i].idn &amp;&amp; a[i].stp == <span class="number">3</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (Check(id, i))</span><br><span class="line">Duel(id, i);</span><br><span class="line">foo = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> foo;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">bool</span> <span class="title">Check_Duel</span><span class="params">(<span class="keyword">int</span> id)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">switch</span> (a[id].stp)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>: <span class="keyword">return</span> Lord_Check_Duel(); <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>: <span class="keyword">return</span> Loyal_Check_Duel(id); <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>: <span class="keyword">if</span> (Check(id, <span class="number">1</span>)) Duel(id, <span class="number">1</span>); <span class="keyword">return</span> <span class="number">1</span>; <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">AOE</span><span class="params">(<span class="keyword">int</span> from, <span class="keyword">int</span> type)</span> <span class="comment">//Use an AOE</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (ri i = from % n + <span class="number">1</span>; i != from; i = i % n + <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (!a[i].hp)</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span> (!Check(from, i))</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span> (!a[i].Defend(type))</span><br><span class="line">&#123;</span><br><span class="line">Death_Check(from, i);</span><br><span class="line"><span class="keyword">if</span> (!a[from].idn &amp;&amp; i == <span class="number">1</span>)</span><br><span class="line">a[i].deem[from] = <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">Use_Card</span><span class="params">(<span class="keyword">int</span> id)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">bool</span> foo = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (ri i = <span class="number">1</span>; i &lt;= a[id].num; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (!a[id].card[i])</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span> (a[id].hp &lt; <span class="number">4</span> &amp;&amp; a[id].card[i] == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">a[id].hp++;</span><br><span class="line">a[id].card[i] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!foo &amp;&amp; a[id].card[i] == <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line">a[id].card[i] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (Decide(id))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (!a[id].weapon)</span><br><span class="line">foo = <span class="number">1</span>;</span><br><span class="line">i = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">a[id].card[i] = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (a[id].card[i] == <span class="number">4</span>)</span><br><span class="line">&#123;</span><br><span class="line">a[id].card[i] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (Check_Duel(id))</span><br><span class="line">&#123;</span><br><span class="line">a[id].idn = <span class="number">1</span>;</span><br><span class="line">i = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">a[id].card[i] = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (a[id].card[i] == <span class="number">5</span>)</span><br><span class="line">&#123;</span><br><span class="line">a[id].card[i] = <span class="number">0</span>;</span><br><span class="line">AOE(id, <span class="number">2</span>);</span><br><span class="line">i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (a[id].card[i] == <span class="number">6</span>)</span><br><span class="line">&#123;</span><br><span class="line">a[id].card[i] = <span class="number">0</span>;</span><br><span class="line">AOE(id, <span class="number">3</span>);</span><br><span class="line">i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (a[id].card[i] == <span class="number">8</span>)</span><br><span class="line">&#123;</span><br><span class="line">a[id].weapon = <span class="number">1</span>;</span><br><span class="line">a[id].card[i] = <span class="number">0</span>;</span><br><span class="line">foo = <span class="number">0</span>;</span><br><span class="line">i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">Game_Start</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span> (!End)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (ri i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (!a[i].hp)</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">a[i].Get_Card(<span class="number">2</span>);</span><br><span class="line">Use_Card(i);</span><br><span class="line">a[i].Clear_Card();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">n = read(), m = read();</span><br><span class="line"><span class="keyword">for</span> (ri i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">a[i].Get();</span><br><span class="line"><span class="keyword">for</span> (ri i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; s;</span><br><span class="line">Heap[i] = Card_Type(s);</span><br><span class="line">&#125;</span><br><span class="line">a[<span class="number">1</span>].idn = <span class="number">1</span>;</span><br><span class="line">Game_Start();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">3 10</span></span><br><span class="line"><span class="comment">MP D D F F</span></span><br><span class="line"><span class="comment">ZP N N N D</span></span><br><span class="line"><span class="comment">FP J J J J</span></span><br><span class="line"><span class="comment">F F D D J J F F K D</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 模拟 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Streaming#3模拟赛题解</title>
      <link href="/2018/11/06/20181106/"/>
      <url>/2018/11/06/20181106/</url>
      <content type="html"><![CDATA[<p><img src="http://wx1.sinaimg.cn/mw690/0060lm7Tly1fwycclxfp4j30t90m3h81.jpg" alt=""></p><a id="more"></a><h1 id="Streaming-3NOIp模拟赛Day1题解"><a href="#Streaming-3NOIp模拟赛Day1题解" class="headerlink" title="Streaming#3NOIp模拟赛Day1题解"></a>Streaming#3NOIp模拟赛Day1题解</h1><h2 id="A-数三角形"><a href="#A-数三角形" class="headerlink" title="A. 数三角形"></a>A. 数三角形</h2><p>题意：给出平面上的 $n$ 个点，问能组成的三角形个数。</p><hr><p>思路：没什么思路， $n$ 非常小，所以枚举三个顶点并暴力判断是否贡献就行了。</p><hr><p>注意：似乎要注意掉精的问题（？）</p><hr><p>代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ri register int</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span> + <span class="number">110</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">110</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x7fffffff</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-8</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">il <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">0</span>, f = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">char</span> ch = getchar();</span><br><span class="line"><span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (ch == <span class="string">'-'</span>)</span><br><span class="line">f = <span class="number">-1</span>;</span><br><span class="line">ch = getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch))</span><br><span class="line">&#123;</span><br><span class="line">x = (x &lt;&lt; <span class="number">3</span>) + (x &lt;&lt; <span class="number">1</span>) + ch - <span class="string">'0'</span>;</span><br><span class="line">ch = getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, ans;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">point</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> x, y;</span><br><span class="line">&#125;;</span><br><span class="line">point a[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> Wepdekr</span></span><br><span class="line">freopen(<span class="string">"tri.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line">freopen(<span class="string">"tri.out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">n = read();</span><br><span class="line"><span class="keyword">for</span> (ri i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">a[i].x = read(), a[i].y = read();</span><br><span class="line"><span class="keyword">for</span> (ri i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line"><span class="keyword">for</span> (ri j = i + <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line"><span class="keyword">for</span> (ri k = j + <span class="number">1</span>; k &lt;= n; k++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> ((a[j].x - a[i].x) * (a[k].y - a[j].y) == (a[k].x - a[j].x) * (a[j].y - a[i].y))</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">ans++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>, ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">5</span></span><br><span class="line"><span class="comment">0 0</span></span><br><span class="line"><span class="comment">1 0</span></span><br><span class="line"><span class="comment">2 0</span></span><br><span class="line"><span class="comment">0 1</span></span><br><span class="line"><span class="comment">1 1</span></span><br><span class="line"><span class="comment">2333 3333</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="B-4和7"><a href="#B-4和7" class="headerlink" title="B. 4和7"></a>B. 4和7</h2><p>题意：给出一条线，从 $0$ 开始，每一次可以向正方向走 $4$ 个单位或 $7$ 个单位，走到某一些指定单位上有一定的收益，可以在任意位置停下来，问最大的收益。</p><hr><p>思路：表示做过一个类似的题目，不过是改成了在图上跑，然后……</p><p> <strong>YSJ：这很显然是个思博DP。</strong> </p><p>没错， $\text{DP}$ 部分确实是比较简单，显然有以下方程：</p><script type="math/tex; mode=display">f _ i = max(f _ {i - 4}, f _ {i - 7}) + w _ i</script><p>这样做是 $O(m)$ 的做法，但 $m$ 较大后便不可避免的会超时，所以我们考虑将与 $m$ 有关的状态变成与 $n$ 有关。</p><p>我们将有收益的位置排序后设 $f _ i$ 表示进行到第 $i$ 个有收益的位置是的最大收益。</p><p>然后考虑 $4$ 和 $7$ 的奇怪限制，由于我们已经做过了 <a href="https://www.luogu.org/problemnew/show/P3951" target="_blank" rel="noopener">小凯的疑惑</a> 所以我们知道最大不能表示的数为 $17$ ，然后我们只要记录距离为 $17$ 之前的点的最大值就可以转移过来了。</p><p>转移的时候暴力处理一下 $17$ 以内的数就行了。</p><p>然后我用的是相当暴力的平衡树，所以常数大到天上去了。</p><hr><p>注意：输入的位置可能有相同的，要合并一下。</p><hr><p>代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ri register int</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span> + <span class="number">110</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">110</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x7fffffff</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-8</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">il <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">0</span>, f = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">char</span> ch = getchar();</span><br><span class="line"><span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (ch == <span class="string">'-'</span>)</span><br><span class="line">f = <span class="number">-1</span>;</span><br><span class="line">ch = getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch))</span><br><span class="line">&#123;</span><br><span class="line">x = (x &lt;&lt; <span class="number">3</span>) + (x &lt;&lt; <span class="number">1</span>) + ch - <span class="string">'0'</span>;</span><br><span class="line">ch = getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, cnt;</span><br><span class="line"><span class="keyword">int</span> f[N];</span><br><span class="line"><span class="keyword">bool</span> vis[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">point</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> num, pos;</span><br><span class="line"><span class="keyword">friend</span> <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (point a1, point a2)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> a1.pos &lt; a2.pos;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">point p[N];</span><br><span class="line"></span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">Get_unable</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (ri i = <span class="number">0</span>; i &lt;= <span class="number">5</span>; i++)</span><br><span class="line"><span class="keyword">for</span> (ri j = <span class="number">0</span>; j &lt;= <span class="number">3</span>; j++)</span><br><span class="line">vis[i * <span class="number">4</span> + j * <span class="number">7</span>] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> splay</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> tot, rt;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> fa, ch[<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> cnt, num, val, ans;</span><br><span class="line">&#125;;</span><br><span class="line">node a[N * <span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">Pushup</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">a[x].cnt = a[a[x].ch[<span class="number">0</span>]].cnt + a[a[x].ch[<span class="number">1</span>]].cnt + a[x].num;</span><br><span class="line">a[x].ans = max(max(a[a[x].ch[<span class="number">0</span>]].ans, a[a[x].ch[<span class="number">1</span>]].ans), a[x].val);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">il <span class="keyword">int</span> <span class="title">Search</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span> (a[x].val != w)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (w &lt; a[x].val)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (!a[x].ch[<span class="number">0</span>])</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">x = a[x].ch[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (w &gt; a[x].val)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (!a[x].ch[<span class="number">1</span>])</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">x = a[x].ch[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">Rotate</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> y = a[x].fa;</span><br><span class="line"><span class="keyword">int</span> z = a[y].fa;</span><br><span class="line"><span class="keyword">bool</span> k = (a[y].ch[<span class="number">1</span>] == x);</span><br><span class="line"><span class="keyword">int</span> w = a[x].ch[!k];</span><br><span class="line"><span class="keyword">if</span> (z)</span><br><span class="line">a[z].ch[a[z].ch[<span class="number">1</span>] == y] = x;</span><br><span class="line">a[y].ch[k] = w;</span><br><span class="line">a[x].ch[!k] = y;</span><br><span class="line"><span class="keyword">if</span> (w)</span><br><span class="line">a[w].fa = y;</span><br><span class="line">a[x].fa = z;</span><br><span class="line">a[y].fa = x;</span><br><span class="line"></span><br><span class="line">Pushup(y);</span><br><span class="line">Pushup(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">Splay</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span> (a[x].fa)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> y = a[x].fa;</span><br><span class="line"><span class="keyword">int</span> z = a[y].fa;</span><br><span class="line"><span class="keyword">if</span> (z)</span><br><span class="line">Rotate(((a[y].ch[<span class="number">0</span>] == x) ^ (a[z].ch[<span class="number">0</span>] == y)) ? x : y);</span><br><span class="line">Rotate(x);</span><br><span class="line">&#125;</span><br><span class="line">rt = x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">Insert</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!tot)</span><br><span class="line">&#123;</span><br><span class="line">a[++tot].val = x;</span><br><span class="line">a[tot].ans = x;</span><br><span class="line">a[tot].cnt = a[tot].num = rt = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> k = Search(rt, x);</span><br><span class="line"><span class="keyword">if</span> (a[k].val == x)</span><br><span class="line">a[k].num++;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">a[++tot].val = x;</span><br><span class="line">a[tot].ans = x;</span><br><span class="line">a[tot].cnt = a[tot].num = <span class="number">1</span>;</span><br><span class="line">a[tot].fa = k;</span><br><span class="line">a[k].ch[x &gt; a[k].val] = tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> k1 = k;</span><br><span class="line"><span class="keyword">while</span> (k1)</span><br><span class="line">&#123;</span><br><span class="line">Pushup(k1);</span><br><span class="line">k1 = a[k1].fa;</span><br><span class="line">&#125;</span><br><span class="line">Splay((a[k].val == x) ? k : tot);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">Delete</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> k = Search(rt, x);</span><br><span class="line">Splay(k);</span><br><span class="line"><span class="keyword">if</span> (a[k].val != x)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span> (a[k].num &gt; <span class="number">1</span>)</span><br><span class="line">a[k].cnt--, a[k].num--;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (!a[k].ch[<span class="number">0</span>])</span><br><span class="line">&#123;</span><br><span class="line">rt = a[k].ch[<span class="number">1</span>];</span><br><span class="line">a[rt].fa = a[k].ch[<span class="number">1</span>] = a[k].cnt = a[k].num = <span class="number">0</span>;</span><br><span class="line">a[k].val = a[k].ans = -inf;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">Splay(Search(a[k].ch[<span class="number">0</span>], inf));</span><br><span class="line">a[rt].ch[<span class="number">1</span>] = a[k].ch[<span class="number">1</span>];</span><br><span class="line">Pushup(rt);</span><br><span class="line">a[a[k].ch[<span class="number">1</span>]].fa = rt;</span><br><span class="line">a[k].fa = a[k].ch[<span class="number">0</span>] = a[k].ch[<span class="number">1</span>] = a[k].cnt = a[k].num = <span class="number">0</span>;</span><br><span class="line">a[k].val = a[k].ans = -inf;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">il <span class="keyword">int</span> <span class="title">Get_max</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a[rt].ans;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> Wepdekr</span></span><br><span class="line">freopen(<span class="string">"hop.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line">freopen(<span class="string">"hop.out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">n = read(), m = read();</span><br><span class="line">Get_unable();</span><br><span class="line"><span class="keyword">for</span> (ri i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">p[i].num = read(), p[i].pos = read();</span><br><span class="line">sort(p + <span class="number">1</span>, p + <span class="number">1</span> + n);</span><br><span class="line">cnt = n;</span><br><span class="line"><span class="keyword">for</span> (ri i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line"><span class="keyword">if</span> (p[i].pos == p[i - <span class="number">1</span>].pos)</span><br><span class="line">&#123;</span><br><span class="line">p[i].num += p[i - <span class="number">1</span>].num;</span><br><span class="line">p[i - <span class="number">1</span>].pos = inf;</span><br><span class="line">cnt--;</span><br><span class="line">&#125;</span><br><span class="line">sort(p + <span class="number">1</span>, p + <span class="number">1</span> + n);</span><br><span class="line"><span class="keyword">int</span> foo[<span class="number">20</span>];</span><br><span class="line"><span class="keyword">for</span> (ri i = <span class="number">1</span>; i &lt;= cnt; i++)</span><br><span class="line">&#123;</span><br><span class="line">foo[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (ri j = i - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (p[i].pos - p[j].pos &gt; <span class="number">17</span>)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">if</span> (!vis[p[i].pos - p[j].pos])</span><br><span class="line">&#123;</span><br><span class="line">splay :: Delete(f[j]);</span><br><span class="line">foo[++foo[<span class="number">0</span>]] = j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">f[i] = splay :: Get_max() + p[i].num;</span><br><span class="line"><span class="keyword">for</span> (ri j = <span class="number">1</span>; j &lt;= foo[<span class="number">0</span>]; j++)</span><br><span class="line">splay :: Insert(f[foo[j]]);</span><br><span class="line">splay :: Insert(f[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (ri i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">ans = max(ans, f[i]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld"</span>, ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">3 13</span></span><br><span class="line"><span class="comment">100 4</span></span><br><span class="line"><span class="comment">10 7</span></span><br><span class="line"><span class="comment">1 11</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="C-反射镜"><a href="#C-反射镜" class="headerlink" title="C. 反射镜"></a>C. 反射镜</h2><p>题意：给出坐标平面上的 $n$ 面镜子，它们都与坐标轴成 $45 ^ {\circ}$ 角，一束光从原点向 $x$ 轴正方向射出，走过了 $T$ 个单位后的坐标。</p><hr><p>思路：并没有什么特别的思路，就是模拟，将镜子坐标离散出来后按照 $x, y$ 双关键字排序后就可以二分找到下一面镜子的位置，然后就可以很快的处理出来。</p><p>但是另外有一个很恶心的问题：环。所以我们需要特殊处理。</p><p>首先由于初中光学知识，光路是可逆的，也就是说在这道题的情境下，每面镜子的一面最多经过一次，如果出现第二次经过，则出现了环，那么模一下就可以保证复杂度了。</p><hr><p>注意：……</p><hr><p>代码： $tan 90 ^ {\circ}$ </p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>并不是一场特别难的模拟赛，模拟题放 $\text{T3}$ 实在是太毒瘤了，写到后面心态爆炸。</p><p>不过 $\text{B}$ 的平衡树一遍打对了，倒还是不错。</p><p>整场比赛 $100 + 100 + 5 = 205pts$ 算是不错的成绩，就是可能需要更耐心一些去打模拟，心态爆炸是不行的Da☆Ze</p>]]></content>
      
      
        <tags>
            
            <tag> 水 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Streaming#6模拟赛题解</title>
      <link href="/2018/11/05/20181105/"/>
      <url>/2018/11/05/20181105/</url>
      <content type="html"><![CDATA[<p><img src="http://wx1.sinaimg.cn/mw690/0060lm7Tly1fwxc3g3qk2j30xc0irx1b.jpg" alt=""></p><a id="more"></a><h1 id="Streaming-6模拟赛题解"><a href="#Streaming-6模拟赛题解" class="headerlink" title="Streaming#6模拟赛题解"></a>Streaming#6模拟赛题解</h1><h2 id="A-九九归一"><a href="#A-九九归一" class="headerlink" title="A. 九九归一"></a>A. 九九归一</h2><p>题意：给出整数 $n$ 和 $q$ 个小于 $n$ 的正整数。一个正整数 $a$ 在模 $n$ 意义下自乘的最小循环节恰好等于 $\varphi(n)$ 时我们称 $a$ 是”神奇的“，问这 $q​$ 个正整数中哪些数是神奇的。</p><hr><p>思路：<del>（这个题是真的难！）</del> </p><p>首先我们可以暴力检查对于每一个 $d | \varphi(n)$ 是否有 $a ^ d \bmod n = 1$ ，然后就会获得$80$ 分的好成绩（</p><p>然后我们考虑对上述解法进行优化：</p><p>考虑到只要一个 $d | \varphi(n)$ 满足 $a ^ d \bmod n = 1$ ，则 $d$ 的所有倍数一样满足这个条件，这样就可以减少判断的次数了</p><p>所以考虑枚举 $\varphi(n)$ 的质因数，若有</p><script type="math/tex; mode=display">a ^ {\frac{\varphi(n)} {p _ i}} \bmod n = 1</script><p>则显然不成立，这样可以大幅度降低复杂度。</p><hr><p>注意：最后还是要判断 $a ^ {\varphi(n)} \bmod n$ 是否为 $1$ 。</p><hr><p>代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ri register int</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e7</span> + <span class="number">110</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">110</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x7fffffff</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-8</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">il <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">0</span>, f = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">char</span> ch = getchar();</span><br><span class="line"><span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (ch == <span class="string">'-'</span>)</span><br><span class="line">f = <span class="number">-1</span>;</span><br><span class="line">ch = getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch))</span><br><span class="line">&#123;</span><br><span class="line">x = (x &lt;&lt; <span class="number">3</span>) + (x &lt;&lt; <span class="number">1</span>) + ch - <span class="string">'0'</span>;</span><br><span class="line">ch = getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, q;</span><br><span class="line"><span class="keyword">int</span> phi[N], prime[N], foo[N];</span><br><span class="line"><span class="keyword">bool</span> vis[N];</span><br><span class="line"></span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">Get_phi</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">phi[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">vis[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (ri i = <span class="number">2</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (!vis[i])</span><br><span class="line">&#123;</span><br><span class="line">prime[++prime[<span class="number">0</span>]] = i;</span><br><span class="line">phi[i] = i - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (ri j = <span class="number">1</span>; j &lt;= prime[<span class="number">0</span>] &amp;&amp; (<span class="keyword">long</span> <span class="keyword">long</span>)prime[j] * i &lt;= n; j++)</span><br><span class="line">&#123;</span><br><span class="line">vis[i * prime[j]] = <span class="number">1</span>;</span><br><span class="line">phi[i * prime[j]] = phi[i] * (prime[j] - <span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span> (i % prime[j] == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">phi[i * prime[j]] = phi[i] * prime[j];</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">il ll <span class="title">Kasumi</span><span class="params">(ll x, ll y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ll ret = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (y)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (y &amp; <span class="number">1</span>)</span><br><span class="line">ret = (ret * x) % n;</span><br><span class="line">x = (x * x) % n;</span><br><span class="line">y &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> Wepdekr</span></span><br><span class="line">freopen(<span class="string">"mulone.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line">freopen(<span class="string">"mulone.out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">n = read(), q = read();</span><br><span class="line">Get_phi();</span><br><span class="line"><span class="keyword">for</span> (ri i = <span class="number">1</span>; i &lt;= prime[<span class="number">0</span>] &amp;&amp; prime[i] &lt; phi[n]; i++)</span><br><span class="line"><span class="keyword">if</span> (phi[n] % prime[i] == <span class="number">0</span>)</span><br><span class="line">foo[++foo[<span class="number">0</span>]] = prime[i];</span><br><span class="line"><span class="keyword">for</span> (ri i = <span class="number">1</span>; i &lt;= q; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> x = read();</span><br><span class="line"><span class="keyword">if</span> (x == <span class="number">0</span> || x == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">putchar</span>(<span class="string">'0'</span>);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> f = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (ri j = <span class="number">1</span>; j &lt;= foo[<span class="number">0</span>]; j++)</span><br><span class="line"><span class="keyword">if</span> (Kasumi(x, phi[n] / foo[j]) == <span class="number">1</span> || Kasumi(x, phi[n]) != <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">putchar</span>(<span class="string">'0'</span>);</span><br><span class="line">f = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!f)</span><br><span class="line"><span class="built_in">putchar</span>(<span class="string">'1'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">7 3</span></span><br><span class="line"><span class="comment">5 2 0</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="B-LCA的统计"><a href="#B-LCA的统计" class="headerlink" title="B. LCA的统计"></a>B. LCA的统计</h2><p>题意：给出一棵 $n$ 个结点的有根树，每个结点 $i$ 的权值为 $w _ i$，求</p><script type="math/tex; mode=display">\sum \limits _ {i = 1} ^ n \sum \limits _ {j = 1} ^ n {w _ i w _ j w _ {LCA(i, j)}}</script><hr><p>思路：这很显然是一道树形 $\text{DP}$ ，我们设 $f _ i$ 表示以 $i$ 为根节点的子树的答案</p><p>设 $sum _ i$ 为以 $i$ 为根节点的子树已遍历过的结点的权值之和，然后有以下转移</p><script type="math/tex; mode=display">f _ u = f _ u + f _ v + 2 w _ u (sum _ u + sum _ v)</script><p>统计完答案后要更新 $sum _ u$ 。</p><p>最后对于每个 $u$ 要记得统计 $i = j = u$ 的情况。</p><hr><p>注意：本题大多数运算在模意义下进行，请注意取模。</p><hr><p>代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ri register int</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span> + <span class="number">110</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">110</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x7fffffff</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> ll mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">il <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">0</span>, f = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">char</span> ch = getchar();</span><br><span class="line"><span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (ch == <span class="string">'-'</span>)</span><br><span class="line">f = <span class="number">-1</span>;</span><br><span class="line">ch = getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch))</span><br><span class="line">&#123;</span><br><span class="line">x = (x &lt;&lt; <span class="number">3</span>) + (x &lt;&lt; <span class="number">1</span>) + ch - <span class="string">'0'</span>;</span><br><span class="line">ch = getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, cnt;</span><br><span class="line"><span class="keyword">int</span> head[N];</span><br><span class="line">ll w[N], f[N], foo[N]; </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> to, nxt;</span><br><span class="line">&#125;;</span><br><span class="line">edge e[N];</span><br><span class="line"></span><br><span class="line"><span class="function">il ll <span class="title">pls</span><span class="params">(ll a, ll b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (a + b) &gt;= mod ? a + b - mod : a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il ll <span class="title">mul</span><span class="params">(ll a, ll b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ll ret = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (b)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (b &amp; <span class="number">1</span>)</span><br><span class="line">ret = pls(ret, a);</span><br><span class="line">a = pls(a, a);</span><br><span class="line">b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">e[++cnt] = (edge) &#123;v, head[u]&#125;;</span><br><span class="line">head[u] = cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">Insert</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">add_edge(u, v);</span><br><span class="line">add_edge(v, u);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> pre)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">f[x] = pls(f[x], mul(w[x], mul(w[x], w[x])));</span><br><span class="line">foo[x] = pls(foo[x], w[x]);</span><br><span class="line"><span class="keyword">for</span> (ri i = head[x]; i; i = e[i].nxt)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> v = e[i].to;</span><br><span class="line"><span class="keyword">if</span> (v == pre)</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">DFS(v, x);</span><br><span class="line">f[x] = pls(f[x], f[v]);</span><br><span class="line">f[x] = pls(f[x], mul(pls(w[x], w[x]), mul(foo[v], foo[x])));</span><br><span class="line">foo[x] = pls(foo[x], foo[v]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> Wepdekr</span></span><br><span class="line">freopen(<span class="string">"lcastat.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line">freopen(<span class="string">"lcastat.out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">n = read();</span><br><span class="line">w[<span class="number">1</span>] = read();</span><br><span class="line"><span class="keyword">for</span> (ri i = <span class="number">2</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> fa = read();</span><br><span class="line">w[i] = read();</span><br><span class="line">Insert(i, fa);</span><br><span class="line">&#125;</span><br><span class="line">DFS(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld"</span>, f[<span class="number">1</span>]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">2 2</span></span><br><span class="line"><span class="comment">1 1</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="C-四驱兄弟"><a href="#C-四驱兄弟" class="headerlink" title="C. 四驱兄弟"></a>C. 四驱兄弟</h2><p>题意：给出 $n$ 个人， $m$ 辆赛车，第 $i$ 辆车预计完成比赛的时间为 $a _ i$ ，每辆车对应两个点，可以选择连边或不连边。</p><p>若连边则完成比赛的时间为 $a _ i$ ，否则为 $\infty$ 。</p><p>问在不形成环的情况下第 $1, 2,  …, n$ 名的成绩最小是多少。</p><hr><p>思路：很显然是一个最小生成树，但它为什么是正确的……我也不知道。只要把完成比赛的时间看做两点之间所连边的边权，然后做最小生成树就行了。字符串的处理方面哈希和暴力弄都可以。</p><hr><p>注意：哈希不能挂。</p><hr><p>代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ri register int</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ull unsigned long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mpair make_pair</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span> + <span class="number">110</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">110</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x7fffffff</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> ull base = <span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">const</span> ull base2 = <span class="number">19260817</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">il <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">0</span>, f = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">char</span> ch = getchar();</span><br><span class="line"><span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (ch == <span class="string">'-'</span>)</span><br><span class="line">f = <span class="number">-1</span>;</span><br><span class="line">ch = getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch))</span><br><span class="line">&#123;</span><br><span class="line">x = (x &lt;&lt; <span class="number">3</span>) + (x &lt;&lt; <span class="number">1</span>) + ch - <span class="string">'0'</span>;</span><br><span class="line">ch = getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, tot;</span><br><span class="line"><span class="keyword">int</span> fa[N];</span><br><span class="line">ull hash[N];</span><br><span class="line"><span class="built_in">map</span> &lt;pair &lt;ull, ull&gt; , <span class="keyword">int</span>&gt; mp;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">foo</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> fr, to, dis;</span><br><span class="line"><span class="keyword">friend</span> <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (foo a1, foo a2)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> a1.dis &lt; a2.dis;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">foo a[N];</span><br><span class="line"></span><br><span class="line">il pair &lt;ull, ull&gt; Get_Hash(<span class="built_in">string</span> str)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> len = str.size();</span><br><span class="line">ull ret1 = <span class="number">0</span>, ret2 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (ri i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">ret1 = ret1 * base + str[i];</span><br><span class="line"><span class="keyword">for</span> (ri i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">ret2 = ret2 * base2 + str[i];</span><br><span class="line"><span class="keyword">return</span> mpair(ret1, ret2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">il <span class="keyword">int</span> <span class="title">Find</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x == fa[x] ? x : fa[x] = Find(fa[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">Merge</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> fx = Find(x);</span><br><span class="line"><span class="keyword">int</span> fy = Find(y);</span><br><span class="line">fa[fx] = fy;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">Kruskal</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (ri i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (cnt == n)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">int</span> u = a[i].fr, v = a[i].to;</span><br><span class="line"><span class="keyword">if</span> (Find(u) != Find(v))</span><br><span class="line">&#123;</span><br><span class="line">Merge(u, v);</span><br><span class="line">cnt++;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, a[i].dis);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (ri i = cnt + <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"INF"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> Wepdekr</span></span><br><span class="line">freopen(<span class="string">"letsandgo.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line">freopen(<span class="string">"letsandgo.out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">n = read(), m = read();</span><br><span class="line"><span class="keyword">for</span> (ri i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">string</span> s[<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> w = read();</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; s[<span class="number">0</span>] &gt;&gt; s[<span class="number">1</span>];</span><br><span class="line">pair &lt;ull, ull&gt; ViXbob = Get_Hash(s[<span class="number">0</span>]), Edgration = Get_Hash(s[<span class="number">1</span>]);</span><br><span class="line"><span class="keyword">if</span> (!mp[ViXbob])</span><br><span class="line">mp[ViXbob] = ++tot;</span><br><span class="line"><span class="keyword">if</span> (!mp[Edgration])</span><br><span class="line">mp[Edgration] = ++tot;</span><br><span class="line">a[i] = (foo) &#123;mp[ViXbob], mp[Edgration], w&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (ri i = <span class="number">1</span>; i &lt;= <span class="number">2</span> * m; i++)</span><br><span class="line">fa[i] = i;</span><br><span class="line">sort(a + <span class="number">1</span>, a + <span class="number">1</span> + m);</span><br><span class="line">Kruskal();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">3 3</span></span><br><span class="line"><span class="comment">95 GP_1 GP_2</span></span><br><span class="line"><span class="comment">100 GP_1 gp@3</span></span><br><span class="line"><span class="comment">100 gp@3 GP_2</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>其实很可惜， $\text{B}$ 题因为一个很小的问题错丢了 $10pts$ ，然后 $\text{C}$ 题哈希的时候 $base$ 用 $998244353$ 被卡了（这么大的 $base$ 其实也是我作死），然后丢了 $30pts$ ，于是 $200pts$ 变成了 $160pts$ 。</p><p>同机房的 $\text{ViXbob}$ 在很短的时间内就 $\text{AK}$ 了，说明其实也并不是那么难，没做好……果然还是我太菜了吧。然后下次再作死我就自行去世！</p>]]></content>
      
      <categories>
          
          <category> 模拟赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 水 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>OrzCC杯模拟赛NOIp模拟赛Day1题解</title>
      <link href="/2018/11/03/20181103/"/>
      <url>/2018/11/03/20181103/</url>
      <content type="html"><![CDATA[<p><img src="http://wx3.sinaimg.cn/mw690/0060lm7Tly1fwx9gzxgqgj30xc0fy7sy.jpg" alt=""></p><a id="more"></a><h1 id="OrzCC杯模拟赛NOIp模拟赛Day1题解"><a href="#OrzCC杯模拟赛NOIp模拟赛Day1题解" class="headerlink" title="OrzCC杯模拟赛NOIp模拟赛Day1题解"></a>OrzCC杯模拟赛NOIp模拟赛Day1题解</h1><h2 id="A-队爷的新书"><a href="#A-队爷的新书" class="headerlink" title="A. 队爷的新书"></a>A. 队爷的新书</h2><p>题意：给出 $n$ 个区间，可以选择一个数 $p$，对于每个区间，如果 $p$ 在区间内则获得 $p$ 的收益，问总收益的最大值。</p><hr><p>思路：很显然是一个思博贪心（甚至做过原题），首先很容易看出的一点就是只有区间的端点对于答案是有意义的，所以把端点弄出来离散化一下，然后看每个点左边有几个左端点几个右端点然后暴力乘一下就行了。</p><hr><p>注意：思博题，随便打都能 $\text{A}$ 。</p><hr><p>代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ri register int</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span> + <span class="number">110</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">110</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x7fffffff</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-8</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">il <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">0</span>, f = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">char</span> ch = getchar();</span><br><span class="line"><span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (ch == <span class="string">'-'</span>)</span><br><span class="line">f = <span class="number">-1</span>;</span><br><span class="line">ch = getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch))</span><br><span class="line">&#123;</span><br><span class="line">x = (x &lt;&lt; <span class="number">3</span>) + (x &lt;&lt; <span class="number">1</span>) + ch - <span class="string">'0'</span>;</span><br><span class="line">ch = getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> a[N];</span><br><span class="line"></span><br><span class="line"><span class="function">il <span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">abs</span>(x) == <span class="built_in">abs</span>(y) ? x &lt; y : <span class="built_in">abs</span>(x) &lt; <span class="built_in">abs</span>(y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> Wepdekr</span></span><br><span class="line">freopen(<span class="string">"book.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line">freopen(<span class="string">"book.out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">n = read();</span><br><span class="line"><span class="keyword">for</span> (ri i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">a[<span class="number">2</span> * i - <span class="number">1</span>] = <span class="number">-1</span> * read(), a[<span class="number">2</span> * i] = read();</span><br><span class="line">sort(a + <span class="number">1</span>, a + <span class="number">1</span> + <span class="number">2</span> * n, cmp);</span><br><span class="line">ll num = <span class="number">0</span>, ans = -inf;</span><br><span class="line"><span class="keyword">for</span> (ri i = <span class="number">1</span>; i &lt;= <span class="number">2</span> * n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (a[i] &lt; <span class="number">0</span>)</span><br><span class="line">num++;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">ans = max(ans, a[i] * num);</span><br><span class="line">num--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld"</span>, ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">4</span></span><br><span class="line"><span class="comment">1 3</span></span><br><span class="line"><span class="comment">2 4</span></span><br><span class="line"><span class="comment">3 5</span></span><br><span class="line"><span class="comment">4 7</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="B-队爷的AU-Plan"><a href="#B-队爷的AU-Plan" class="headerlink" title="B. 队爷的AU Plan"></a>B. 队爷的AU Plan</h2><p>题意：</p><p>给出两个长度为 $n$ 的任务，第 $i$ 个任务难度为 $hard_i$ ，完成的收益为 $s_i​$ 。</p><p>初始有一个价值 $m​$ ，可以一次完成难度不超过 $m​$ 的所有任务，只扣除最大的 $hard_i​$ 的价值，可获得这些任务的全部收益，问完成所有任务后的总价值最大是多少。</p><hr><p>思路：很显然作为 $\text{DP}$ ，我们可以设 $f _ i$ 表示完成到第 $i$ 个任务时的最大价值，很显然有以下转移：</p><script type="math/tex; mode=display">f _ i = max (f _ i, f _ j - hard _ i + \sum \limits _ {k = j} ^ {i} {s _ k})</script><p>但是这样是 $O(n ^ 2)$ 级别的复杂度，很显然会 $\color {darkblue} {\text {TLE}}$ ，所以我们考虑优化。</p><p>整理一下我们会发现一个事实：最优的转移状态 $j$ 一定满足以下式子值最大即可：</p><script type="math/tex; mode=display">f _ j - \sum \limits _ {k = 1} ^ {j} {s _ k}</script><p>然后我们不妨用 $sum _ i$ 表示前 $i$ 个任务的收益之和。</p><p>我们假设对于状态 $i$ 可以由 $j$ 和 $k$ 两种状态转移过来，且 $j &lt; k$ ，首先若 $j$ 和 $k$ 不由前面同一个状态转移得到，则很显然 $k$ 的决策层数更大，消耗更多，则 $j$ 优于 $k$ ；若 $j$ 和 $k$ 由前面同一个状态 $l$ 转移得到，则有：</p><script type="math/tex; mode=display">f _ j = f _ l - hard _ j + sum _ j - sum _ l \\f _ k = f _ l - hard _ k + sum _ k - sum _ l</script><p>两式相减得</p><script type="math/tex; mode=display">f _ j - sum _ j - (f _ k - sum _ k) = hard _ k - hard _ j</script><p>则很显然有</p><script type="math/tex; mode=display">f _ j - sum _ j > f _ k - sum _ k</script><p>则由 $j$ 转移过来显然比由 $k$ 转移过来更优。由此推广可得对于每一个状态 $i$ ，最小的能转移到 $i$ 的状态一定是最优的，所以找到第一个能转移的状态就 <code>break</code> 掉就行了。</p><p>但是这样并不能 $\color {green} {\text{AC}}$ ，所以还有另一个优化：假设状态 $i - 1$ 由状态 $j$ 转移过来，那么 $j$ 之前的状态肯定不能转移到 $i$ ，所以就可以省掉无用的枚举。</p><hr><p>注意：似乎也没什么要注意的。</p><hr><p>代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ri register int</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span> + <span class="number">110</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">110</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x7fffffff</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-8</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">il <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">0</span>, f = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">char</span> ch = getchar();</span><br><span class="line"><span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (ch == <span class="string">'-'</span>)</span><br><span class="line">f = <span class="number">-1</span>;</span><br><span class="line">ch = getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch))</span><br><span class="line">&#123;</span><br><span class="line">x = (x &lt;&lt; <span class="number">3</span>) + (x &lt;&lt; <span class="number">1</span>) + ch - <span class="string">'0'</span>;</span><br><span class="line">ch = getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> hard[N], s[N];</span><br><span class="line"><span class="keyword">int</span> dp[N], pre[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> Wepdekr</span></span><br><span class="line">freopen(<span class="string">"plan.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line">freopen(<span class="string">"plan.out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">n = read(), m = read();</span><br><span class="line"><span class="keyword">for</span> (ri i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">hard[i] = read();</span><br><span class="line"><span class="keyword">for</span> (ri i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">s[i] = read(), pre[i] = pre[i - <span class="number">1</span>] + s[i];</span><br><span class="line"><span class="built_in">memset</span>(dp, <span class="number">0xc0</span>, <span class="keyword">sizeof</span>(dp));</span><br><span class="line">dp[<span class="number">0</span>] = m;</span><br><span class="line"><span class="keyword">int</span> last = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (ri i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line"><span class="keyword">for</span> (ri j = last; j &lt; i; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (dp[j] &lt; hard[i])</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">dp[i] = max(dp[i], dp[j] - hard[i] + pre[i] - pre[j]);</span><br><span class="line">last = j;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>, dp[n]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">5 5</span></span><br><span class="line"><span class="comment">2 4 5 7 9</span></span><br><span class="line"><span class="comment">4 4 3 6 5</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="C-队爷的讲学计划"><a href="#C-队爷的讲学计划" class="headerlink" title="C. 队爷的讲学计划"></a>C. 队爷的讲学计划</h2><p>题意：给出一张有向带权图，从一号结点出发，每个 $\text{SCC}$ 内的点互相到达时边权为 $1$ ，问经过最大结点数时经过的最小边权是多少。</p><hr><p>思路：很显然需要使用 $\text{Tarjan}$ 将 $\text{SCC}$ 缩点，缩点后形成了一个 $\text{DAG}$ ，然后在 $\text{DAG}$ 上跑 $\text{SPFA}$ 就行了。</p><hr><p>注意：题目中要求数量最大优先，所以在跑 $\text{SPFA}$ 的时候应该注意这个问题。</p><hr><p>代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ri register int</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span> + <span class="number">110</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">110</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x7fffffff</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-8</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">il <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">0</span>, f = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">char</span> ch = getchar();</span><br><span class="line"><span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (ch == <span class="string">'-'</span>)</span><br><span class="line">f = <span class="number">-1</span>;</span><br><span class="line">ch = getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch))</span><br><span class="line">&#123;</span><br><span class="line">x = (x &lt;&lt; <span class="number">3</span>) + (x &lt;&lt; <span class="number">1</span>) + ch - <span class="string">'0'</span>;</span><br><span class="line">ch = getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, num, top, id;</span><br><span class="line"><span class="keyword">int</span> dfn[N], low[N], st[N], bel[N], siz[N], fa[N], dis[N], foo[N];</span><br><span class="line"><span class="keyword">bool</span> instk[N], vis[N];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Graph</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> cnt, head[N];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> fr, to, nxt, weight;</span><br><span class="line">&#125;;</span><br><span class="line">edge e[N];</span><br><span class="line"></span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">e[++cnt] = (edge) &#123;u, v, head[u], w&#125;;</span><br><span class="line">head[u] = cnt;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">Graph G, T;</span><br><span class="line"></span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">Clear_Stack</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">num++;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line"><span class="keyword">int</span> u = st[top];</span><br><span class="line">bel[u] = num;</span><br><span class="line">instk[u] = <span class="number">0</span>;</span><br><span class="line">siz[num]++;</span><br><span class="line">&#125; <span class="keyword">while</span> (st[top--] != x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">Tarjan</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">st[++top] = x;</span><br><span class="line">instk[x] = <span class="number">1</span>;</span><br><span class="line">dfn[x] = low[x] = ++id;</span><br><span class="line"><span class="keyword">for</span> (ri i = G.head[x]; i; i = G.e[i].nxt)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> v = G.e[i].to;</span><br><span class="line"><span class="keyword">if</span> (!dfn[v])</span><br><span class="line">&#123;</span><br><span class="line">Tarjan(v);</span><br><span class="line">low[x] = min(low[x], low[v]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (instk[v])</span><br><span class="line">low[x] = min(low[x], low[v]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (low[x] == dfn[x])</span><br><span class="line">Clear_Stack(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">queue</span> &lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">SPFA</span><span class="params">(<span class="keyword">int</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (ri i = <span class="number">1</span>; i &lt;= num; i++)</span><br><span class="line">vis[i] = <span class="number">0</span>, dis[i] = -inf;</span><br><span class="line">q.push(s);</span><br><span class="line">vis[s] = <span class="number">1</span>;</span><br><span class="line">foo[s] = siz[s];</span><br><span class="line">dis[s] = siz[s] - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (!q.empty())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> u = q.front();</span><br><span class="line">vis[u] = <span class="number">0</span>;</span><br><span class="line">q.pop();</span><br><span class="line"><span class="keyword">for</span> (ri i = T.head[u]; i; i = T.e[i].nxt)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> v = T.e[i].to;</span><br><span class="line"><span class="keyword">if</span> (foo[u] + siz[v] &gt; foo[v])</span><br><span class="line">&#123;</span><br><span class="line">foo[v] = foo[u] + siz[v];</span><br><span class="line">dis[v] = dis[u] + T.e[i].weight + siz[v] - <span class="number">1</span>;</span><br><span class="line">q.push(v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (foo[u] + siz[v] == foo[v] &amp;&amp; dis[u] + T.e[i].weight + siz[v] - <span class="number">1</span> &lt; dis[v])</span><br><span class="line">&#123;</span><br><span class="line">dis[v] = dis[u] + T.e[i].weight + siz[v] - <span class="number">1</span>;</span><br><span class="line">q.push(v);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> Wepdekr</span></span><br><span class="line">freopen(<span class="string">"teach.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line">freopen(<span class="string">"teach.out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">n = read(), m = read();</span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (ri i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> u = read(), v = read(), w = read();</span><br><span class="line">G.add_edge(u, v, w);</span><br><span class="line">sum += w;</span><br><span class="line">&#125;</span><br><span class="line">Tarjan(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (ri i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (!dfn[i])</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">for</span> (ri j = G.head[i]; j; j = G.e[j].nxt)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> v = G.e[j].to;</span><br><span class="line"><span class="keyword">if</span> (bel[i] != bel[v])</span><br><span class="line">T.add_edge(bel[i], bel[v], G.e[j].weight);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">SPFA(bel[<span class="number">1</span>]);</span><br><span class="line"><span class="keyword">int</span> mx = -inf, mn = inf;</span><br><span class="line"><span class="keyword">for</span> (ri i = <span class="number">1</span>; i &lt;= num; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (foo[i] &gt; mx)</span><br><span class="line">&#123;</span><br><span class="line">mx = foo[i];</span><br><span class="line">mn = dis[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (foo[i] == mx)</span><br><span class="line">mn = min(mn, dis[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d %d"</span>, mx, mn);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">6 6</span></span><br><span class="line"><span class="comment">1 2 3</span></span><br><span class="line"><span class="comment">2 3 7</span></span><br><span class="line"><span class="comment">2 6 4</span></span><br><span class="line"><span class="comment">3 4 5</span></span><br><span class="line"><span class="comment">4 5 4</span></span><br><span class="line"><span class="comment">5 2 3</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>其实是一场还不错的比赛，但是很可惜没有完全发挥出实力来，因为 $\text{Tarjan}$ 忘了导致 $\text{C}$ 题只有 $10$ 分，然后 $\text{B}$ 题的优化也没有想出来，然后就只有 $160pts$ ，被各路神仙吊打。</p><p>或许真的快退役了吧……</p>]]></content>
      
      <categories>
          
          <category> 模拟赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 水 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>SG专题模拟赛</title>
      <link href="/2018/11/02/20181102/"/>
      <url>/2018/11/02/20181102/</url>
      <content type="html"><![CDATA[<p><img src="http://wx1.sinaimg.cn/mw690/0060lm7Tly1fwth1vn8pzj30xc0kudpt.jpg" alt=""></p><a id="more"></a><p>又是一场相当无聊（毒瘤）的模拟赛QwQ</p><h1 id="A-电话微波炉（暂定）"><a href="#A-电话微波炉（暂定）" class="headerlink" title="A. 电话微波炉（暂定）"></a>A. 电话微波炉（暂定）</h1><p>题意：给出一个序列 $a$ ，一次操作的内容是</p><script type="math/tex; mode=display">a_i = a_{i - 1} + a_{i + 1} - a_i\ \ (a_0 = a_{n + 1} = 0)</script><p>问最后序列中所有元素的和最大是多少。</p><hr><p>思路：其实就是一个思博贪心，很显然的一点是最终状态下每次操作都不会让结果更优，即对于每一个 $a_i$ ，都有</p><script type="math/tex; mode=display">a_i \geq a_{i - 1} + a_{i + 1} - a_i</script><p>移项后则有：</p><script type="math/tex; mode=display">a_i - a_{i - 1} \geq a_{i + 1} - a_i</script><p>然后我们再来看一下操作：</p><p>假设对 $a_i$ 进行了一次操作，则</p><script type="math/tex; mode=display">a_i^{'} = a_{i - 1} + a_{i + 1} - a_i</script><p>移项，则</p><script type="math/tex; mode=display">a_i^{'} - a_{i - 1} = a_{i + 1} - a_i\\a_{i + 1} - a_i^{'} = a_i - a_{i - 1}</script><p>我们会发现实质上每次操作就是交换前后的差值，那么只要一开始按照这个差值从大到小排个序就行了。</p><hr><p>注意：要记得开 <code>long long</code> </p><hr><p>代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ri register int</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span> + <span class="number">110</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">110</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x7fffffff</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-8</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">x = <span class="number">0</span>;</span><br><span class="line">T f = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">char</span> ch = getchar();</span><br><span class="line"><span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (ch == <span class="string">'-'</span>)</span><br><span class="line">f = <span class="number">-1</span>;</span><br><span class="line">ch = getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch))</span><br><span class="line">&#123;</span><br><span class="line">x = (x &lt;&lt; <span class="number">3</span>) + (x &lt;&lt; <span class="number">1</span>) + ch - <span class="string">'0'</span>;</span><br><span class="line">ch = getchar();</span><br><span class="line">&#125;</span><br><span class="line">x *= f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line">ll a[N], del[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> Wepdekr</span></span><br><span class="line">freopen(<span class="string">"a.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line">freopen(<span class="string">"a.out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">read(n);</span><br><span class="line"><span class="keyword">for</span> (ri i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">read(a[i]);</span><br><span class="line"><span class="keyword">for</span> (ri i = <span class="number">1</span>; i &lt;= n + <span class="number">1</span>; i++)</span><br><span class="line">del[i] = a[i] - a[i - <span class="number">1</span>];</span><br><span class="line">sort(del + <span class="number">1</span>, del + n + <span class="number">2</span>);</span><br><span class="line">ll now = <span class="number">0</span>, ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (ri i = n + <span class="number">1</span>; i; i--)</span><br><span class="line">&#123;</span><br><span class="line">now += del[i];</span><br><span class="line">ans += now;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld"</span>, ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="B-世界线的波动"><a href="#B-世界线的波动" class="headerlink" title="B. 世界线的波动"></a>B. 世界线的波动</h1><p>题意：给出 $n$ 个不同的点，求这些点能构成的每个点的度数不超过 $2$ 且无 $3n$ 无向图的数量。</p><hr><p>思路：其实就是个 $\text{DP}$ ，但是这个出题人就很无聊，非要考压位高精，然后导致这个题的难点就变成了高精（雾</p><p>讲一下 $\text{DP}$ 部分：</p><p>我们令 $f_i$ 表示选前 $i$ 个点的数量，然后不难发现每加入一个点就有以下三种情况：</p><ol><li><p>这是孤立的一个点，这种情况下</p><script type="math/tex; mode=display">f_i = f_{i - 1}</script></li><li><p>这个点加在了某条链上，这种情况下</p><script type="math/tex; mode=display">f_i = \frac{f_{i - j} \times C_{i - 1}^{j - 1} \times j!}{2}\ \ (j \in [2, i])</script><p>这种情况其实并不难，就相当于在 $i - 1$ 个点中选 $j - 1$ 个点组成链然后用乘法原理乘一下就行了。重要的是虽然链上的点的顺序会影响图，但是由于是无向图，所以正着和反着其实是一条链，所以要除 $2$ 。</p></li><li><p>这个点放进了某个非 $3n$ 元环里，这种情况下</p><script type="math/tex; mode=display">f_i = \frac{f_{i - j} \times C_{i - 1} ^ {j - 1} \times (j - 1)!}{2}</script><p>这种情况和上面的差不多，我也懒得讲了（雾</p></li></ol><p>所以就把以上三种情况加起来就行了</p><hr><p>注意：高精不能打挂！高精不能打挂！高精不能打挂！</p><hr><p>代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ri register int</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span> + <span class="number">110</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">310</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x7fffffff</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> ll base = <span class="number">1e8</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">il <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">0</span>, f = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">char</span> ch = getchar();</span><br><span class="line"><span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (ch == <span class="string">'-'</span>)</span><br><span class="line">f = <span class="number">-1</span>;</span><br><span class="line">ch = getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch))</span><br><span class="line">&#123;</span><br><span class="line">x = (x &lt;&lt; <span class="number">3</span>) + (x &lt;&lt; <span class="number">1</span>) + ch - <span class="string">'0'</span>;</span><br><span class="line">ch = getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Big_Int</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> len, f;</span><br><span class="line">ll val[<span class="number">125</span>];</span><br><span class="line"></span><br><span class="line">Big_Int()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">memset</span>(val, <span class="number">0</span>, <span class="keyword">sizeof</span>(val));</span><br><span class="line">f = len = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Big_Int(T x)</span><br><span class="line">&#123;</span><br><span class="line">len = <span class="number">0</span>, f = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">memset</span>(val, <span class="number">0</span>, <span class="keyword">sizeof</span>(val));</span><br><span class="line"><span class="keyword">if</span> (x &lt; <span class="number">0</span>)</span><br><span class="line">f = <span class="number">-1</span>, x = -x;</span><br><span class="line"><span class="keyword">while</span> (x)</span><br><span class="line">&#123;</span><br><span class="line">val[len++] = x % base;</span><br><span class="line">x /= base;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld"</span>, val[len - <span class="number">1</span>]);</span><br><span class="line"><span class="keyword">for</span> (ri i = len - <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%08lld"</span>, val[i]);</span><br><span class="line"><span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Big_Int <span class="keyword">operator</span> + (<span class="keyword">const</span> Big_Int &amp;x)</span><br><span class="line">&#123;</span><br><span class="line">Big_Int ret;</span><br><span class="line">ret.len = max(x.len, len);</span><br><span class="line"><span class="keyword">for</span> (ri i = <span class="number">0</span>; i &lt; ret.len; i++)</span><br><span class="line">ret.val[i] = val[i] + x.val[i];</span><br><span class="line"><span class="keyword">for</span> (ri i = <span class="number">0</span>; i &lt; ret.len; i++)</span><br><span class="line">ret.val[i + <span class="number">1</span>] += ret.val[i] / base, ret.val[i] %= base;</span><br><span class="line"><span class="keyword">if</span> (ret.val[ret.len] &gt; <span class="number">0</span>)</span><br><span class="line">ret.len++;</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Big_Int <span class="keyword">operator</span> * (<span class="keyword">const</span> Big_Int &amp;x)</span><br><span class="line">&#123;</span><br><span class="line">Big_Int ret;</span><br><span class="line">ret.len = len + x.len;</span><br><span class="line"><span class="keyword">for</span> (ri i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line"><span class="keyword">for</span> (ri j = <span class="number">0</span>; j &lt; x.len; j++)</span><br><span class="line">ret.val[i + j] += val[i] * x.val[j];</span><br><span class="line"><span class="keyword">for</span> (ri i = <span class="number">0</span>; i &lt; ret.len; i++)</span><br><span class="line">ret.val[i + <span class="number">1</span>] += ret.val[i] / base, ret.val[i] %= base;</span><br><span class="line"><span class="keyword">while</span> (!ret.val[ret.len - <span class="number">1</span>] &amp;&amp; ret.len &gt; <span class="number">1</span>)</span><br><span class="line">ret.len--;</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Big_Int <span class="keyword">operator</span> * (<span class="keyword">const</span> T &amp;x)</span><br><span class="line">&#123;</span><br><span class="line">Big_Int ret, k(x);</span><br><span class="line">ret = (*<span class="keyword">this</span>) * k;</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Big_Int <span class="keyword">operator</span> / (<span class="keyword">const</span> T &amp;x)</span><br><span class="line">&#123;</span><br><span class="line">Big_Int ret;</span><br><span class="line">ret.len = len;</span><br><span class="line">T tmp = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (ri i = ret.len - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">&#123;</span><br><span class="line">tmp = tmp * base + val[i];</span><br><span class="line">ret.val[i] = tmp / x;</span><br><span class="line">tmp %= x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (!ret.val[ret.len - <span class="number">1</span>] &amp;&amp; ret.len &gt; <span class="number">1</span>)</span><br><span class="line">ret.len--;</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Big_Int <span class="keyword">operator</span> = (T x)</span><br><span class="line">&#123;</span><br><span class="line">len = <span class="number">0</span>, f = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">memset</span>(val, <span class="number">0</span>, <span class="keyword">sizeof</span>(val));</span><br><span class="line"><span class="keyword">if</span> (x &lt; <span class="number">0</span>)</span><br><span class="line">f = <span class="number">-1</span>, x = -x;</span><br><span class="line"><span class="keyword">while</span> (x)</span><br><span class="line">&#123;</span><br><span class="line">val[len++] = x % base;</span><br><span class="line">x /= base;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Big_Int &lt;ll&gt; dp[MAXN], C[MAXN][MAXN], fac[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> Wepdekr</span></span><br><span class="line">freopen(<span class="string">"b.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line">freopen(<span class="string">"b.out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">n = read();</span><br><span class="line">C[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (ri i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line">C[i][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (ri j = <span class="number">1</span>; j &lt;= i; j++)</span><br><span class="line">C[i][j] = C[i - <span class="number">1</span>][j] + C[i - <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fac[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (ri i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">fac[i] = fac[i - <span class="number">1</span>] * i;</span><br><span class="line"></span><br><span class="line">dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (ri i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line">dp[i] = dp[i - <span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span> (ri j = <span class="number">2</span>; j &lt;= i; j++)</span><br><span class="line">&#123;</span><br><span class="line">Big_Int &lt;ll&gt; tmp;</span><br><span class="line">tmp = C[i - <span class="number">1</span>][j - <span class="number">1</span>] * fac[j];</span><br><span class="line">tmp = tmp / <span class="number">2</span>;</span><br><span class="line">dp[i] = dp[i] + tmp * dp[i - j];</span><br><span class="line"><span class="comment">// C(i - 1, j - 1) * j ! / 2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (ri j = <span class="number">4</span>; j &lt;= i; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (j % <span class="number">3</span> == <span class="number">0</span>)</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">Big_Int &lt;ll&gt; tmp;</span><br><span class="line">tmp = C[i - <span class="number">1</span>][j - <span class="number">1</span>] * fac[j - <span class="number">1</span>];</span><br><span class="line">tmp = tmp / <span class="number">2</span>;</span><br><span class="line">dp[i] = dp[i] + tmp * dp[i - j];</span><br><span class="line"><span class="comment">// C(i - 1, j - 1) * (j - 1) ! / 2</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">dp[n].print();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然，还有更投稽取巧的做法：我会 $\text{Python}$ ！</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">n = int(input())</span><br><span class="line">c = [[] <span class="keyword">for</span> i <span class="keyword">in</span> range(n + <span class="number">1</span>)]</span><br><span class="line">c[<span class="number">0</span>].append(<span class="number">1</span>)</span><br><span class="line">c[<span class="number">0</span>].append(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, n + <span class="number">1</span>):</span><br><span class="line">c[i].append(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>, i + <span class="number">1</span>):</span><br><span class="line">c[i].append(c[i - <span class="number">1</span>][j] + c[i - <span class="number">1</span>][j - <span class="number">1</span>])</span><br><span class="line">c[i].append(<span class="number">0</span>)</span><br><span class="line">fac = [<span class="number">1</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, n + <span class="number">1</span>):</span><br><span class="line">fac.append(fac[i - <span class="number">1</span>] * i);</span><br><span class="line">dp = [<span class="number">1</span>]</span><br><span class="line">tmp = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, n + <span class="number">1</span>):</span><br><span class="line">dp.append(dp[i - <span class="number">1</span>])</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">2</span>, i + <span class="number">1</span>):</span><br><span class="line">tmp = dp[i - j] * c[i - <span class="number">1</span>][j - <span class="number">1</span>] * fac[j]</span><br><span class="line">tmp = tmp // <span class="number">2</span></span><br><span class="line">dp[i] += tmp</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">4</span>, i + <span class="number">1</span>):</span><br><span class="line"><span class="keyword">if</span> j % <span class="number">3</span> == <span class="number">0</span>:</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">tmp = dp[i - j] * c[i - <span class="number">1</span>][j - <span class="number">1</span>] * fac[j - <span class="number">1</span>]</span><br><span class="line">tmp = tmp // <span class="number">2</span></span><br><span class="line">dp[i] += tmp</span><br><span class="line">print(dp[n])</span><br></pre></td></tr></table></figure><h1 id="C-Time-Leaper"><a href="#C-Time-Leaper" class="headerlink" title="C. Time Leaper"></a>C. Time Leaper</h1><p>题意：给出一个金字塔型结构，每一层都是一个正方形网格结构，层数越高边长越小（顶层边长为 $1$ ）。到达每一个方格都需要一定的代价，当且仅当两个方格有公共边或公共面积时它们能互相到达，且只能从下层走向上层。同时还有若干条需要支付一定代价的直达通道，问从最下层左上角走到最上层的最小代价是多少。</p><hr><p>思路：似乎正解是神仙做法，不过这个东西很显然可以建图后跑最短路，具体做法就是暴力把能到达的点之间连接单向边然后跑 $\text{Dijkstra}​$ 就行了。</p><hr><p>注意：同层之间走的时候来回的边权并不相等</p><hr><p>代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ri register int</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e7</span> + <span class="number">110</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">110</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x7fffffff</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-8</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">il <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">0</span>, f = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">char</span> ch = getchar();</span><br><span class="line"><span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (ch == <span class="string">'-'</span>)</span><br><span class="line">f = <span class="number">-1</span>;</span><br><span class="line">ch = getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch))</span><br><span class="line">&#123;</span><br><span class="line">x = (x &lt;&lt; <span class="number">3</span>) + (x &lt;&lt; <span class="number">1</span>) + ch - <span class="string">'0'</span>;</span><br><span class="line">ch = getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, cnt, num;</span><br><span class="line"><span class="keyword">int</span> head[N], dis[N];</span><br><span class="line"><span class="keyword">int</span> a[MAXN][MAXN][MAXN], id[MAXN][MAXN][MAXN];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> to, nxt, weight;</span><br><span class="line">&#125;;</span><br><span class="line">edge e[N];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">element</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> vec, dist;</span><br><span class="line"><span class="keyword">friend</span> <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (element a1, element a2)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> a1.dist &gt; a2.dist;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">priority_queue &lt;element&gt; q;</span><br><span class="line"></span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">e[++cnt] = (edge) &#123;v, head[u], w&#125;;</span><br><span class="line">head[u] = cnt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">Dijkstra</span><span class="params">(<span class="keyword">int</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(dis, <span class="number">63</span>, <span class="keyword">sizeof</span>(dis));</span><br><span class="line">q.push((element) &#123;s, a[n][<span class="number">1</span>][<span class="number">1</span>]&#125;);</span><br><span class="line">dis[s] = a[n][<span class="number">1</span>][<span class="number">1</span>];</span><br><span class="line"><span class="keyword">while</span> (!q.empty())</span><br><span class="line">&#123;</span><br><span class="line">element now = q.top();</span><br><span class="line">q.pop();</span><br><span class="line"><span class="keyword">int</span> u = now.vec, d = now.dist;</span><br><span class="line"><span class="keyword">if</span> (d != dis[u])</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">for</span> (ri i = head[u]; i; i = e[i].nxt)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> v = e[i].to;</span><br><span class="line"><span class="keyword">if</span> (dis[u] + e[i].weight &lt; dis[v])</span><br><span class="line">&#123;</span><br><span class="line">dis[v] = dis[u] + e[i].weight;</span><br><span class="line">q.push((element) &#123;v, dis[v]&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">Insert</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j, <span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (i &lt; n)</span><br><span class="line">&#123;</span><br><span class="line">add_edge(id[i + <span class="number">1</span>][j][k], id[i][j][k], a[i][j][k]);</span><br><span class="line">add_edge(id[i + <span class="number">1</span>][j][k + <span class="number">1</span>], id[i][j][k], a[i][j][k]);</span><br><span class="line">add_edge(id[i + <span class="number">1</span>][j + <span class="number">1</span>][k], id[i][j][k], a[i][j][k]);</span><br><span class="line">add_edge(id[i + <span class="number">1</span>][j + <span class="number">1</span>][k + <span class="number">1</span>], id[i][j][k], a[i][j][k]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (j &gt; <span class="number">1</span>)</span><br><span class="line">add_edge(id[i][j - <span class="number">1</span>][k], id[i][j][k], a[i][j][k]);</span><br><span class="line"><span class="keyword">if</span> (k &gt; <span class="number">1</span>)</span><br><span class="line">add_edge(id[i][j][k - <span class="number">1</span>], id[i][j][k], a[i][j][k]);</span><br><span class="line"><span class="keyword">if</span> (j &lt; i)</span><br><span class="line">add_edge(id[i][j + <span class="number">1</span>][k], id[i][j][k], a[i][j][k]);</span><br><span class="line"><span class="keyword">if</span> (k &lt; i)</span><br><span class="line">add_edge(id[i][j][k + <span class="number">1</span>], id[i][j][k], a[i][j][k]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> Wepdekr</span></span><br><span class="line">freopen(<span class="string">"c.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line">freopen(<span class="string">"c.out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">n = read(), m = read();</span><br><span class="line"><span class="keyword">for</span> (ri i = n; i; i--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (ri j = <span class="number">1</span>; j &lt;= i; j++)</span><br><span class="line"><span class="keyword">for</span> (ri k = <span class="number">1</span>; k &lt;= i; k++)</span><br><span class="line">a[i][j][k] = read(), id[i][j][k] = ++num;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (ri i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line"><span class="keyword">for</span> (ri j = <span class="number">1</span>; j &lt;= i; j++)</span><br><span class="line"><span class="keyword">for</span> (ri k = <span class="number">1</span>; k &lt;= i; k++)</span><br><span class="line">Insert(i, j, k);</span><br><span class="line"><span class="keyword">for</span> (ri i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> a1 = read(), b1 = read(), c1 = read(), a2 = read(), b2 = read(), c2 = read(), foo = read();</span><br><span class="line">add_edge(id[n - a1 + <span class="number">1</span>][b1][c1], id[n - a2 + <span class="number">1</span>][b2][c2], foo + a[n - a2 + <span class="number">1</span>][b2][c2]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Dijkstra(id[n][<span class="number">1</span>][<span class="number">1</span>]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>, dis[id[<span class="number">1</span>][<span class="number">1</span>][<span class="number">1</span>]]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">4 2</span></span><br><span class="line"><span class="comment">4 1 5 2</span></span><br><span class="line"><span class="comment">4 3 4 7</span></span><br><span class="line"><span class="comment">1 9 2 8</span></span><br><span class="line"><span class="comment">0 3 5 1</span></span><br><span class="line"><span class="comment">2 8 5</span></span><br><span class="line"><span class="comment">9 3 9</span></span><br><span class="line"><span class="comment">1 1 8</span></span><br><span class="line"><span class="comment">7 4</span></span><br><span class="line"><span class="comment">4 2</span></span><br><span class="line"><span class="comment">42</span></span><br><span class="line"><span class="comment">1 1 2 2 3 1 1</span></span><br><span class="line"><span class="comment">1 3 2 2 2 1 7</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>考试的时候心态爆炸， $\text{A}$ 题那么思博的贪心只写了 $30pts$ 的暴力， $\text{B}$ 题思博考高精度就不谈了， $\text{C}$ 题最短路还看了半天才看出来，然后就很惨。</p><p>以后还是要提高思考的速度，有时候把式子在草稿纸上写出来会更明显一点。</p>]]></content>
      
      <categories>
          
          <category> 模拟赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 水 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>CodeforcesRound#519</title>
      <link href="/2018/10/31/CodeforcesRound519/"/>
      <url>/2018/10/31/CodeforcesRound519/</url>
      <content type="html"><![CDATA[<p><img src="http://wx2.sinaimg.cn/mw690/0060lm7Tly1fwqd73pepyj30xc0isawq.jpg" alt=""></p><a id="more"></a><h1 id="Codeforces-Round-519"><a href="#Codeforces-Round-519" class="headerlink" title="Codeforces Round #519"></a>Codeforces Round #519</h1><h2 id="A-Elections"><a href="#A-Elections" class="headerlink" title="A. Elections"></a><a href="http://codeforces.com/contest/1043/problem/A" target="_blank" rel="noopener">A. Elections</a></h2><p>题意：有 $n$ 个人，每个人都有 $k$ 票，已知第 $i$ 个人会投给对手 $a_i$ 票，问假若 $\text{Awruk}$ 想赢， $k$ 最小是多少。</p><hr><p>思路：思博题目，很显然对手的总票数为</p><script type="math/tex; mode=display">\sum \limits_{i = 1}^{n} {a_i}</script><p>那么想要赢，$\text{Awruk}$ 的票数应该至少为</p><script type="math/tex; mode=display">\sum \limits_{i = 1}^{n} {a_i} +1</script><p> 可以知道两个人的总票数应该是 $nk$ ，所以就可以得到</p><script type="math/tex; mode=display">k = \lceil \frac{2\sum {a_i} +1}{n} \rceil</script><hr><p>代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ri register int</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span> + <span class="number">110</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">110</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x7fffffff</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-8</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">il <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">0</span>, f = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">char</span> ch = getchar();</span><br><span class="line"><span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (ch == <span class="string">'-'</span>)</span><br><span class="line">f = <span class="number">-1</span>;</span><br><span class="line">ch = getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch))</span><br><span class="line">&#123;</span><br><span class="line">x = (x &lt;&lt; <span class="number">3</span>) + (x &lt;&lt; <span class="number">1</span>) + ch - <span class="string">'0'</span>;</span><br><span class="line">ch = getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, sum, maxx = -inf;</span><br><span class="line"><span class="keyword">int</span> a[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">n = read();</span><br><span class="line"><span class="keyword">for</span> (ri i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">a[i] = read(), sum += a[i], maxx = max(a[i], maxx);</span><br><span class="line">sum = sum * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> k = <span class="built_in">ceil</span>(sum * <span class="number">1.0</span> / n);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>, max(k, maxx));</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B-Lost-Array"><a href="#B-Lost-Array" class="headerlink" title="B. Lost Array"></a><a href="http://codeforces.com/contest/1043/problem/B" target="_blank" rel="noopener">B. Lost Array</a></h2><p>题意：给出一个 $a$ 序列，已知</p><script type="math/tex; mode=display">a_i = x_{(i - 1) \bmod k} + a_{i - 1}</script><p>求 $x$ 序列所有可能的长度。</p><hr><p>思路：一眼看上去表示不会，然而这个题的 $n$ 和 $k$ 都非常小，所以我们可以考虑 $O(n^2)$ 的暴力。具体做法就是枚举长度然后判断是否合法。判断合法的方法很简单：是否有一个位置被重复赋过值。</p><hr><p>代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ri register int</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span> + <span class="number">110</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">110</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x7fffffff</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-8</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">il <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">0</span>, f = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">char</span> ch = getchar();</span><br><span class="line"><span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (ch == <span class="string">'-'</span>)</span><br><span class="line">f = <span class="number">-1</span>;</span><br><span class="line">ch = getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch))</span><br><span class="line">&#123;</span><br><span class="line">x = (x &lt;&lt; <span class="number">3</span>) + (x &lt;&lt; <span class="number">1</span>) + ch - <span class="string">'0'</span>;</span><br><span class="line">ch = getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> a[N], x[N];</span><br><span class="line"><span class="keyword">int</span> ans[N];</span><br><span class="line"><span class="keyword">bool</span> vis[N];</span><br><span class="line"></span><br><span class="line"><span class="function">il <span class="keyword">bool</span> <span class="title">Check</span><span class="params">(<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span>(vis));</span><br><span class="line"><span class="built_in">memset</span>(x, <span class="number">0</span>, <span class="keyword">sizeof</span>(x));</span><br><span class="line"><span class="keyword">for</span> (ri i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (vis[i % k] &amp;&amp; x[i % k] == a[i] - a[i - <span class="number">1</span>])</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (!vis[i % k])</span><br><span class="line">&#123;</span><br><span class="line">vis[i % k] = <span class="number">1</span>;</span><br><span class="line">x[i % k] = a[i] - a[i - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">n = read();</span><br><span class="line"><span class="keyword">for</span> (ri i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">a[i] = read();</span><br><span class="line"><span class="keyword">for</span> (ri i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line"><span class="keyword">if</span> (Check(i))</span><br><span class="line">ans[++ans[<span class="number">0</span>]] = i;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans[<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">for</span> (ri i = <span class="number">1</span>; i &lt;= ans[<span class="number">0</span>]; i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>, ans[i]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C-Smallest-Word"><a href="#C-Smallest-Word" class="headerlink" title="C. Smallest Word"></a><a href="http://codeforces.com/contest/1043/problem/C" target="_blank" rel="noopener">C. Smallest Word</a></h2><p>题意：给出一个只由 $a$ 和 $b$ 组成的字符串 $s$ ，对于第 $i$ 个位置，我们把 $s_1$ 到 $s_i$ 称作一个前缀串，现在 <a href="https://baike.baidu.com/item/IA/74015?fr=aladdin" target="_blank" rel="noopener">$\text{IA}$</a> 从 $s_1$ 开始，到每一个位置时都可以选择是否翻转该位置的前缀串，现在她想使翻转后的串字典序最小，问她该如何操作。</p><hr><p>思路：很显然这又是一道思博贪心题，稍作思考不难发现一定可以把所有的 $a$ 都拼在一起放在最前面，那么如何做到呢？</p><p>由于题目是从前向后择的，也就是说，如果按照最优的情况，当且仅当以下两种情况会需要翻转：</p><ol><li>该位置为连续 $b$ 子串的最后一位且不位于字符串的末尾</li><li>该位置为连续 $a$ 子串的最后一位</li></ol><p>第二种情况很好理解，显然翻转就会把连续 $a$ 子串置于字符串开头；第一种情况成立的理由其实也很简单，因为遇到连续 $b$ 子串的时候字符串最前面一定是连续的 $a$ ，当前位置后面也一定是连续的 $a$ ，翻转可以将两个 $a$ 子串拼在一起，并最终翻转到最前面。</p><hr><p>代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ri register int</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span> + <span class="number">110</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">110</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x7fffffff</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1010</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">il <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">0</span>, f = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">char</span> ch = getchar();</span><br><span class="line"><span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (ch == <span class="string">'-'</span>)</span><br><span class="line">f = <span class="number">-1</span>;</span><br><span class="line">ch = getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch))</span><br><span class="line">&#123;</span><br><span class="line">x = (x &lt;&lt; <span class="number">3</span>) + (x &lt;&lt; <span class="number">1</span>) + ch - <span class="string">'0'</span>;</span><br><span class="line">ch = getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> s[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>, s);</span><br><span class="line"><span class="keyword">int</span> len = <span class="built_in">strlen</span>(s);</span><br><span class="line">s[len] = <span class="string">'b'</span>;</span><br><span class="line"><span class="keyword">for</span> (ri i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (s[i] == <span class="string">'a'</span> &amp;&amp; s[i + <span class="number">1</span>] == <span class="string">'b'</span> || s[i] == <span class="string">'b'</span> &amp;&amp; s[i + <span class="number">1</span>] == <span class="string">'a'</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"1 "</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"0 "</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="D-Mysterious-Crime"><a href="#D-Mysterious-Crime" class="headerlink" title="D. Mysterious Crime"></a><a href="http://codeforces.com/contest/1043/problem/D" target="_blank" rel="noopener">D. Mysterious Crime</a></h2><p>题意：给出 $1$ 到 $n$ 的 $m$ 个排列，问这 $m$ 个排列的公共子序列有几个</p><hr><p>思路：考虑到 $m$ 很小，所以也可以暴力（卡了我一个小时），我们可以枚举起点然后找出从这个点开始的最长公共子序列长度，然后很显然公共子序列的数量就等于长度，然后统计就行了。</p><hr><p>代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ri register int</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">il <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">0</span>, f = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">char</span> ch = getchar();</span><br><span class="line"><span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (ch == <span class="string">'-'</span>)</span><br><span class="line">f = <span class="number">-1</span>;</span><br><span class="line">ch = getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch))</span><br><span class="line">&#123;</span><br><span class="line">x = (x &lt;&lt; <span class="number">3</span>) + (x &lt;&lt; <span class="number">1</span>) + ch - <span class="string">'0'</span>;</span><br><span class="line">ch = getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">10</span>][maxn], b[<span class="number">10</span>][maxn];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> c[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">n = read(), m = read();</span><br><span class="line"><span class="keyword">for</span> (ri j = <span class="number">0</span>; j &lt; m; j++) </span><br><span class="line"><span class="keyword">for</span> (ri i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">a[j][i] = read();</span><br><span class="line"><span class="keyword">for</span> (ri j = <span class="number">0</span>; j &lt; m; j++)</span><br><span class="line"><span class="keyword">for</span> (ri i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">b[j][a[j][i]] = i;</span><br><span class="line"></span><br><span class="line">ll ans = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (ri i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (c[i - <span class="number">1</span>])</span><br><span class="line">c[i] = c[i - <span class="number">1</span>] - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (c[i] + i &gt; n)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">bool</span> fail = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (ri j = <span class="number">1</span>; j &lt; m; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> p = b[j][a[<span class="number">0</span>][i]] + c[i];</span><br><span class="line"><span class="keyword">if</span> (p &gt; n || a[<span class="number">0</span>][i + c[i]] != a[j][p])</span><br><span class="line">&#123;</span><br><span class="line">fail =<span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (fail)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">c[i]++;</span><br><span class="line">&#125;</span><br><span class="line">ans += c[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld"</span>, ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="E-Train-Hard-Win-Easy"><a href="#E-Train-Hard-Win-Easy" class="headerlink" title="E. Train Hard, Win Easy"></a><a href="http://codeforces.com/contest/1043/problem/E" target="_blank" rel="noopener">E. Train Hard, Win Easy</a></h2><p>题意：给出 $n$ 个人，每两个人组成一队做两道题，已知第 $i$ 个人写 $\text{A}$ 题和 $\text{B}$ 题的得分分别为 $x_i$ 和 $y_i$ ，该队伍的得分为两个人做两道题的得分之和（分配题目时以使团队得分最小的方式分配）。同时有 $m$ 对人互相不想组队，问每个人能组的所有队的得分之和。</p><hr><p>思路：很显然就是求一个无向完全图删掉一些边后从每个点连出去的所有边的边权之和。但是 $n$ 相当的大，直接做很显然是不可能的，但是我们如果在草稿纸上写一下式子，就会发现这样一个结论：计算完全图的时候只要按照 $x_i - y_i$ 排序就可以快速计算了。证明很简单：</p><p>我们假设能够让排在 $i$ 前面的选手都写 $\text{A}$ 题，排在 $i$ 后面的选手都写 $\text{B}$ 题最优，那么对于 $\forall j &lt; i$ ，一定有</p><script type="math/tex; mode=display">x_j+y_i < x_i + y_j</script><p>移项，得</p><script type="math/tex; mode=display">x_i - y_i > x_j - y_j</script><p>至此得证。</p><p>所以我们只要 $O(n)$ 的算出完全图时候的答案，删边的时候直接暴力减就可以了，复杂度 $O(nlogn)$ （快排的复杂度）。</p><hr><p>代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ri register int</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">3e5</span> + <span class="number">110</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">110</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x7fffffff</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-8</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">il <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">0</span>, f = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">char</span> ch = getchar();</span><br><span class="line"><span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (ch == <span class="string">'-'</span>)</span><br><span class="line">f = <span class="number">-1</span>;</span><br><span class="line">ch = getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch))</span><br><span class="line">&#123;</span><br><span class="line">x = (x &lt;&lt; <span class="number">3</span>) + (x &lt;&lt; <span class="number">1</span>) + ch - <span class="string">'0'</span>;</span><br><span class="line">ch = getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line">ll pre[N], succ[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> x, y, id;</span><br><span class="line">ll ans;</span><br><span class="line"><span class="keyword">friend</span> <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (node a1, node a2)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> a1.x - a1.y &lt; a2.x - a2.y;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">node a[N];</span><br><span class="line"></span><br><span class="line"><span class="function">il <span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(node a1, node a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a1.id &lt; a2.id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">n = read(), m = read();</span><br><span class="line"><span class="keyword">for</span> (ri i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">a[i].x = read(), a[i].y = read(), a[i].id = i;</span><br><span class="line">sort(a + <span class="number">1</span>, a + <span class="number">1</span> + n);</span><br><span class="line"><span class="keyword">for</span> (ri i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">pre[i] = pre[i - <span class="number">1</span>] + a[i].x;</span><br><span class="line"><span class="keyword">for</span> (ri i = n; i; i--)</span><br><span class="line">succ[i] = succ[i + <span class="number">1</span>] + a[i].y;</span><br><span class="line"><span class="keyword">for</span> (ri i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">a[i].ans += pre[i - <span class="number">1</span>] + <span class="number">1l</span>l * a[i].y * (i - <span class="number">1</span>) + succ[i + <span class="number">1</span>] + <span class="number">1l</span>l * a[i].x * (n - i);</span><br><span class="line">sort(a + <span class="number">1</span>, a + <span class="number">1</span> + n, cmp);</span><br><span class="line"><span class="keyword">for</span> (ri i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> x1 = read(), x2 = read();</span><br><span class="line">a[x1].ans -= min(a[x1].x + a[x2].y, a[x2].x + a[x1].y);</span><br><span class="line">a[x2].ans -= min(a[x1].x + a[x2].y, a[x2].x + a[x1].y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (ri i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld "</span>, a[i].ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">3 2</span></span><br><span class="line"><span class="comment">1 2</span></span><br><span class="line"><span class="comment">2 3</span></span><br><span class="line"><span class="comment">1 3</span></span><br><span class="line"><span class="comment">1 2</span></span><br><span class="line"><span class="comment">2 3</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="F-Make-It-One"><a href="#F-Make-It-One" class="headerlink" title="F. Make It One"></a><a href="http://codeforces.com/contest/1043/problem/F" target="_blank" rel="noopener">F. Make It One</a></h2><p>题意：给出 $n$ 个数，问最少选出几个数，使得选出数的 $gcd$ 为 $1$ 。</p><hr><p>思路：正解是神仙 $\text{DP}$ ，我当然不会了（</p><p>但是，我会莫比乌斯反演！想到在某谷上做过一道四元组统计，这不就是 $k$ 元组统计吗？然后掐指一算，我们发现：</p><script type="math/tex; mode=display">2 \times 3 \times 5 \times 7 \times 11 \times 13 \times 17 = 510510 > 300000</script><p>也就是说，答案不可能超过 $7$ ！这样就使得暴力做 $k$ 元组统计成为可能。判断一个 $k$ 是否可行的时候只要看方案数是否为 $0$ 就行了。</p><p>Q&amp;A：</p><p>Q： $C_{3 \times 10^5}^7$ 太大了爆 $\text{long long}$ 怎么办？</p><p>A：你不会取模吗？</p><p>Q：取模导致误判怎么办？</p><p>A：多模几个数啊！</p><hr><p>代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ri register int</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">3e5</span> + <span class="number">110</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">110</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x7fffffff</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> ll mod = <span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">const</span> ll p = <span class="number">19260817</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">il <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">0</span>, f = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">char</span> ch = getchar();</span><br><span class="line"><span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (ch == <span class="string">'-'</span>)</span><br><span class="line">f = <span class="number">-1</span>;</span><br><span class="line">ch = getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch))</span><br><span class="line">&#123;</span><br><span class="line">x = (x &lt;&lt; <span class="number">3</span>) + (x &lt;&lt; <span class="number">1</span>) + ch - <span class="string">'0'</span>;</span><br><span class="line">ch = getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, maxx = -inf;</span><br><span class="line">ll times[N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> prime[N], mu[N];</span><br><span class="line">ll C[<span class="number">2</span>][N][<span class="number">8</span>];</span><br><span class="line">ll f[<span class="number">2</span>][N];</span><br><span class="line"></span><br><span class="line"><span class="function">il ll <span class="title">pls</span><span class="params">(ll a, ll b, ll foo)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (a + b &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">a += b;</span><br><span class="line"><span class="keyword">while</span> (a &lt; <span class="number">0</span>)</span><br><span class="line">a += foo;</span><br><span class="line"><span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> a + b &gt;= foo ? a + b - foo : a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">Get_C</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">C[<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>] = C[<span class="number">1</span>][<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (ri i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line">C[<span class="number">0</span>][i][<span class="number">0</span>] = C[<span class="number">1</span>][i][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (ri j = <span class="number">1</span>; j &lt;= <span class="number">7</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line">C[<span class="number">0</span>][i][j] = pls(C[<span class="number">0</span>][i - <span class="number">1</span>][j - <span class="number">1</span>], C[<span class="number">0</span>][i - <span class="number">1</span>][j], mod);</span><br><span class="line">C[<span class="number">1</span>][i][j] = pls(C[<span class="number">1</span>][i - <span class="number">1</span>][j - <span class="number">1</span>], C[<span class="number">1</span>][i - <span class="number">1</span>][j], p);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> vis[N];</span><br><span class="line"></span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">Get_mu</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">mu[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (ri i = <span class="number">2</span>; i &lt;= maxx; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (!vis[i])</span><br><span class="line">&#123;</span><br><span class="line">prime[++prime[<span class="number">0</span>]] = i;</span><br><span class="line">mu[i] = <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (ri j = <span class="number">1</span>, foo; j &lt;= prime[<span class="number">0</span>] &amp;&amp; (foo = prime[j] * i) &lt;= maxx; j++)</span><br><span class="line">&#123;</span><br><span class="line">vis[foo] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (i % prime[j])</span><br><span class="line">mu[foo] = -mu[i];</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">n = read();</span><br><span class="line"><span class="keyword">for</span> (ri i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> x = read();</span><br><span class="line">times[x]++;</span><br><span class="line">maxx = max(maxx, x);</span><br><span class="line">&#125;</span><br><span class="line">Get_C();</span><br><span class="line">Get_mu();</span><br><span class="line"><span class="keyword">for</span> (ri i = <span class="number">1</span>; i &lt;= min(n, <span class="number">7</span>); i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">memset</span>(f, <span class="number">0</span>, <span class="keyword">sizeof</span>(f));</span><br><span class="line"><span class="keyword">for</span> (ri j = maxx; j; j--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (ri k = j; k &lt;= maxx; k += j)</span><br><span class="line">f[<span class="number">0</span>][j] += times[k], f[<span class="number">1</span>][j] += times[k];</span><br><span class="line">f[<span class="number">0</span>][j] = C[<span class="number">0</span>][f[<span class="number">0</span>][j]][i], f[<span class="number">1</span>][j] = C[<span class="number">1</span>][f[<span class="number">1</span>][j]][i];</span><br><span class="line">&#125;</span><br><span class="line">ll ans1 = <span class="number">0</span>, ans2 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (ri j = <span class="number">1</span>; j &lt;= maxx; j++)</span><br><span class="line">&#123;</span><br><span class="line">ans1 = pls(ans1, f[<span class="number">0</span>][j] * mu[j], mod);</span><br><span class="line">ans2 = pls(ans2, f[<span class="number">1</span>][j] * mu[j], p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (ans1 || ans2)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>, i);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>, <span class="number">-1</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="G-Speckled-Band"><a href="#G-Speckled-Band" class="headerlink" title="G. Speckled Band"></a><a href="http://codeforces.com/contest/1043/problem/G" target="_blank" rel="noopener">G. Speckled Band</a></h2><p>留个坑以后再填    <del>咕咕咕</del></p>]]></content>
      
      <categories>
          
          <category> Contests </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 水 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>狄利克雷卷积学习笔记</title>
      <link href="/2018/10/29/Dirichlet_Product/"/>
      <url>/2018/10/29/Dirichlet_Product/</url>
      <content type="html"><![CDATA[<p><img src="http://wx2.sinaimg.cn/mw690/0060lm7Tly1fwp7r702r3j30xc0a6792.jpg" alt=""></p><a id="more"></a><p>蒟蒻我在莫比乌斯反演学习笔记里留下了几个坑，于是开始漫长的填坑路。</p><h1 id="狄利克雷卷积学习笔记"><a href="#狄利克雷卷积学习笔记" class="headerlink" title="狄利克雷卷积学习笔记"></a>狄利克雷卷积学习笔记</h1><h2 id="前置知识1：数论函数"><a href="#前置知识1：数论函数" class="headerlink" title="前置知识1：数论函数"></a>前置知识1：数论函数</h2><p>什么是数论函数呢？数论函数指定义域为正整数，陪域为复数的函数。</p><p><strong>以下知识中涉及到的函数大部分为数论函数</strong></p><h2 id="前置知识2：积性函数"><a href="#前置知识2：积性函数" class="headerlink" title="前置知识2：积性函数"></a>前置知识2：积性函数</h2><p>积性函数是数论函数中很重要的一类。</p><p>对于函数 $f$ ，若 $\forall a, b\ (gcd(a,b) = 1)$ 都有 $f(ab) = f(a) \times f(b)$ ，则函数 $f$ 为<strong>积性函数</strong>。</p><p>另外的，若 $\forall a, b$ 都有 $f(ab) = f(a) \times f(b)$ ，则函数 $f$ 为<strong>完全积性函数</strong>。</p><p>常见的积性函数：</p><ol><li>$\mu(x)$ ，莫比乌斯函数。这个函数我在 <a href="https://dimensiontripper.github.io/2018/10/29/Mobius_Inversion/" target="_blank" rel="noopener">莫比乌斯反演学习笔记</a>中讲的挺清楚的（</li><li>$\varphi(x)$ ，欧拉函数。表示不大于 $x$ 且与 $x$ 互质的正整数个数，即 $\varphi(x) = \sum \limits_{i = 1}^{n} {[gcd(n, i) = 1]}$ </li><li>$d(x)$ ，约数个数。表示 $x$ 的约数的个数，即 $d(x) = \sum \limits_{d|n} {1}$ </li><li>$\sigma(x)$ ，约数和函数。表示 $x$ 的各个约数之和，即 $\sigma(x) = \sum \limits_{d|n} d$ </li></ol><p>常见的完全积性函数：</p><ol><li>$\epsilon(x)$ ，元函数。 $\epsilon(x) = [x = 1]$ </li><li>$I(x)$ ，恒等函数。 $I(x) = 1$ </li><li>$N(x)$ ，单位函数。$N(x) = x$ </li></ol><h2 id="什么是狄利克雷卷积"><a href="#什么是狄利克雷卷积" class="headerlink" title="什么是狄利克雷卷积"></a>什么是狄利克雷卷积</h2><p>我们定义 $f$ ， $g$ 两个函数的狄利克雷卷积 $(*)$ 运算为：</p><script type="math/tex; mode=display">(f*g)(n) = \sum \limits_{d|n} {f(d)g(\frac{n}{d})}</script><p>我们把 $(f*g)$ 称为“ $f$ 卷 $g$ ”， $(n)$ 为范围（不写时默认范围为 $n$ ）。</p><p>很<del>不</del>显然，狄利克雷卷积满足一下运算规律：</p><ol><li><p>交换律： </p><script type="math/tex; mode=display">f * g = g * f</script></li><li><p>结合律：</p><script type="math/tex; mode=display">(f * g) * h = f * (g * h)</script></li><li><p>分配律：</p><script type="math/tex; mode=display">(f + g) * h = f * h + g * h</script></li></ol><p>总之就和乘法是类似的，所以记忆方面并没有什么困难，然而这些运算律是可以证明的</p><ol><li>交换律：很显然我们交换 $f$ 和 $g$ 仅仅是交换了枚举元素的顺序，对结果并没有影响；</li><li>结合律：很显然原式就是三个函数所有 $n$ 的约数项的和的乘积，那么无论先卷哪两个函数对结果都没有影响；</li><li>分配律：同样很显然，我们可以得到以下式子：</li></ol><script type="math/tex; mode=display">\begin{align*}(f + g) * h &= \sum \limits_{d | n} {(f + g)(d)h(\frac{n}{d})}\\&= \sum \limits_{d | n} {(f(d) + g(d))h(\frac{n}{d})}\\&= \sum \limits_{d | n} {f(d)h(\frac{n}{d}) + g(d)h(\frac{n}{d})}\\&= \sum \limits_{d | n} {f(d)h(\frac{n}{d})} + \sum \limits_{d | n} {g(d)h(\frac{n}{d})}\\&= f * h + g * h\end{align*}</script><p>解决完运算律之后，我们来看一下之前讲过的积性函数。</p><p>首先是元函数 $\epsilon$ ，所谓元函数，指的就是在狄利克雷卷积中充当单位元的作用，即有 $f * \epsilon = f$ 。</p><p>然后，狄利克雷卷积有一个非常重要的性质：<strong>如果 $f$ 和 $g$ 均为积性函数，那么 $f * g$ 一定也为积性函数</strong>。</p><h2 id="用卷积的眼光看其他函数"><a href="#用卷积的眼光看其他函数" class="headerlink" title="用卷积的眼光看其他函数"></a>用卷积的眼光看其他函数</h2><h3 id="莫比乌斯函数"><a href="#莫比乌斯函数" class="headerlink" title="莫比乌斯函数"></a>莫比乌斯函数</h3><p>（开始填坑）</p><p>在莫比乌斯反演笔记中，我们提到了莫比乌斯函数的几个性质，现在我们再来看一下它们。</p><h4 id="关于莫比乌斯函数的重要等式"><a href="#关于莫比乌斯函数的重要等式" class="headerlink" title="关于莫比乌斯函数的重要等式"></a>关于莫比乌斯函数的重要等式</h4><p>对于 $\forall n​$ ， $\sum \limits_{d|n} {\mu(d)} = [n =1]​$ ；</p><p>我们将这个式子写成卷积的形式可以得到在卷积中的一个重要等式：</p><script type="math/tex; mode=display">\mu * I = \epsilon</script><p>利用这个式子，我们可以证明其他的东西。</p><h4 id="莫比乌斯反演定理的证明"><a href="#莫比乌斯反演定理的证明" class="headerlink" title="莫比乌斯反演定理的证明"></a>莫比乌斯反演定理的证明</h4><p>是不是觉得用定义证明莫比乌斯反演定理的时候的和式变换相当的麻烦呐？这里就给出一种相当简单的证明方法：</p><script type="math/tex; mode=display">f(n) = \sum \limits_{d | n} {g(d)}</script><p>将上式写成卷积的形式：</p><script type="math/tex; mode=display">f = g * I</script><p>两边同时卷上 $\mu$ ：</p><script type="math/tex; mode=display">f * \mu = g * I * \mu</script><p>又因为有 $\mu * I = \epsilon$ 所以有：</p><script type="math/tex; mode=display">f * \mu = g * \epsilon = g</script><p>即：</p><script type="math/tex; mode=display">g(n) = \sum \limits_{d | n} {\mu(d)f(\frac{n}{d})}</script><h3 id="欧拉函数"><a href="#欧拉函数" class="headerlink" title="欧拉函数"></a>欧拉函数</h3><h4 id="欧拉函数的性质"><a href="#欧拉函数的性质" class="headerlink" title="欧拉函数的性质"></a>欧拉函数的性质</h4><p>欧拉函数有一个相当美妙的性质：</p><script type="math/tex; mode=display">\sum \limits_{d | n} {\varphi(d) = n}</script><p>证明过程如下：</p><p>设 $n = \prod \limits_{i = 1}^{m} {p_i^{a_i}}$ ，由于欧拉函数是积性函数，有</p><script type="math/tex; mode=display">\sum \limits_{d | n} {\varphi(d)} = \sum \prod \limits_{i = 1}^{m} {\varphi(p_i^j)} (0 \leq j \leq a_i)</script><p>因式分解，上式等价于</p><script type="math/tex; mode=display">\prod \limits_{i = 1}^{m} {(\sum \limits_{j = 0}^{a_i} {\varphi(p_i^j)})} = \prod \limits_{i = 1}^{m} {(\sum \limits_{j = 0}^{a_i} {(p_i^j - p_i^{j - 1}) + 1})} = \prod \limits_{i = 1}^{m} {p_i^{a_i}} = n</script><p>命题得证。</p><h4 id="莫比乌斯函数与欧拉函数的关系"><a href="#莫比乌斯函数与欧拉函数的关系" class="headerlink" title="莫比乌斯函数与欧拉函数的关系"></a>莫比乌斯函数与欧拉函数的关系</h4><p>将欧拉函数的性质写成卷积形式：</p><script type="math/tex; mode=display">\varphi * I = N</script><p>同样的，将等式两边同时卷上一个 $\mu$ ，得到：</p><script type="math/tex; mode=display">\varphi * I * \mu = N * \mu</script><p>同样得到 $\varphi = N * \mu$ ，展开：</p><script type="math/tex; mode=display">\varphi(n) = \sum \limits_{d | n} {\mu(d) \times \frac{n}{d}}</script><p>将两边同时除以 $n$ </p><script type="math/tex; mode=display">\frac{\varphi(n)}{n} = \sum \limits_{d | n} {\frac{\mu(d)}{d}}</script><p>于是得证。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>坑终于填的差不多了，累死本鸽子了咕咕咕（</p><p>然后，老师也说得好：数学是<del>物理</del>OI的工具，狄利克雷卷积也充当了一种工具的作用，在解决许多实际问题的时候有这工具总比没有要简单许多。</p><p>实际上可以看出来，有的时候利用好了数学的工具会使得本来相当麻烦的证明过程变得很简单，所以说还是要熟悉它们。</p><p>然后，下一个坑是：杜教筛！（立flag.jpg）</p>]]></content>
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数论 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>莫比乌斯反演学习笔记</title>
      <link href="/2018/10/29/Mobius_Inversion/"/>
      <url>/2018/10/29/Mobius_Inversion/</url>
      <content type="html"><![CDATA[<p><img src="http://wx2.sinaimg.cn/mw690/0060lm7Tly1fwox20us35j30xc0nmhdg.jpg" alt=""></p><a id="more"></a><p>作为一个蒟蒻，最开始看到莫反的时候觉得：这什么毒瘤玩意，溜了溜了。</p><p>然而终于大概懂一点了，于是来写一篇博客记录一下。</p><h1 id="莫比乌斯反演学习笔记"><a href="#莫比乌斯反演学习笔记" class="headerlink" title="莫比乌斯反演学习笔记"></a>莫比乌斯反演学习笔记</h1><h2 id="莫比乌斯函数"><a href="#莫比乌斯函数" class="headerlink" title="莫比乌斯函数"></a>莫比乌斯函数</h2><p>在讲莫比乌斯反演前，我们先来看一个新的函数：莫比乌斯函数，记作 $\mu$ 。</p><p>$\mu (x)$ 的定义为：</p><ol><li>当 $x = 1$ 时， $\mu (x) = 1$ ；</li><li>当 $x = \prod\limits_{i = 1}^{k}{p_i}$ 且 $p_i$ 为互异质数时， $\mu (x) = (-1)^k$ ；（说人话：将 $x$ 分解质因数后每个质因子的次数都是1，此时函数值由质因子个数决定）</li><li>若 $x$ 有任意一个质因子的次数大于1，则 $\mu (x) = 0$ 。</li></ol><p>可以看出莫比乌斯函数有以下几个性质：</p><ol><li><p>莫比乌斯函数为积性函数，即有 $\mu(ab) = \mu(a) \times \mu(b)$ 。这个比较容易证明，就不证了（懒得打了.jpg）</p></li><li><p>对于 $\forall n$ ， $\sum \limits_{d|n} {\mu(d)} = [n =1]$ 。（ $d|n$ 表示 $d$ 整除 $n$ ， $[n = 1]$ 表示 $n = 1$ 这个布尔式的值。）证明如下：</p><p>当 $n = 1$ 时显然成立</p><p>当 $n \ne 1$ 时， $n = p_1^{a_1}p_2^{a_2}p_3^{a_3}…p_k^{a_k}$ </p><script type="math/tex; mode=display">\mu(d) \ne 0 \iff d = p_1p_2p_3…p_t</script><p>质因子个数为 $r$ 的因子只有 $C_k^r$ 个</p><script type="math/tex; mode=display">\sum \limits_{d | n} = C_k^0 - C_k^1 + … + (-1)^kC_k^k = \sum \limits_{i = 0}^k {(-1) ^ i C_k^i}</script><p>接下来只需要证明以下式子即可</p><script type="math/tex; mode=display">\sum \limits_{i = 0}^n {(-1)^i C_n^i} = 0\ (n \in N_+)</script><p>根据二项式定理</p><script type="math/tex; mode=display">(x + y) ^ n = \sum \limits_{i = 0}^{n} {C_n^i x^i y^{n - i}}</script><p>令 $x = -1\ ,\ y = 1$ 代入即可证。</p></li><li><p>对于 $\forall n$ ， $\sum \limits_{d|n} {\frac{\mu(d)} {d}} = \frac{\varphi(n)}{n}$ 。证明如下：</p><p>将欧拉函数的性质写成卷积形式：</p><script type="math/tex; mode=display">\varphi * I = N</script><p>将等式两边同时卷上一个 $\mu$ ，得到：</p><script type="math/tex; mode=display">\varphi * I * \mu = N * \mu</script><p>得到 $\varphi = N * \mu$ ，展开：</p><script type="math/tex; mode=display">\varphi(n) = \sum \limits_{d | n} {\mu(d) \times \frac{n}{d}}</script><p>将两边同时除以 $n$ </p><script type="math/tex; mode=display">\frac{\varphi(n)}{n} = \sum \limits_{d | n} {\frac{\mu(d)}{d}}</script><p>于是得证。</p></li></ol><p>然后你就会发现程序实现其实并不是特别困难，只要在线性筛的程序上稍作修改就可以写出了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">Get_mu</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    mu[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (ri i = <span class="number">2</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!vis[i])</span><br><span class="line">        &#123;</span><br><span class="line">            prime[++cnt] = i;</span><br><span class="line">            mu[i] = <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (ri j = <span class="number">1</span>; j &lt;= cnt &amp;&amp; prime[j] * i &lt;= n; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            vis[prime[j] * i] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (i % prime[j])</span><br><span class="line">                mu[i * prime[j]] = -mu[i];</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么，莫比乌斯函数的讲解就先到这里了，毕竟接下来的才是重点</p><hr><h2 id="莫比乌斯反演"><a href="#莫比乌斯反演" class="headerlink" title="莫比乌斯反演"></a>莫比乌斯反演</h2><p>在解决完莫比乌斯函数的问题后，我们就开始本文的主题：莫比乌斯反演。</p><p>首先讲一个定理： $f(x)$ 和 $g(x)$ 为定义在非负整数集合上的两个函数，且满足 $f(n) = \sum \limits_{d|n}{g(d)}$ ，则存在以下结论：</p><script type="math/tex; mode=display">g(n) = \sum \limits_{d|n} {\mu(d)f(\frac{n}{d})}</script><p>这个定理就称作<strong>莫比乌斯反演定理</strong>。（由于已知 $d|n$ 所以没必要加下取整符号）</p><p>莫比乌斯反演定理主要有两种证明方式：狄利克雷卷积和定义。</p><h3 id="狄利克雷卷积法"><a href="#狄利克雷卷积法" class="headerlink" title="狄利克雷卷积法"></a>狄利克雷卷积法</h3><p>已知</p><script type="math/tex; mode=display">f(n) = \sum \limits_{d | n} {g(d)}</script><p>将上式写成卷积的形式：</p><script type="math/tex; mode=display">f = g * I</script><p>两边同时卷上 $\mu$ ：</p><script type="math/tex; mode=display">f * \mu = g * I * \mu</script><p>又因为有 $\mu * I = \epsilon$ 所以有：</p><script type="math/tex; mode=display">f * \mu = g * \epsilon = g</script><p>即：</p><script type="math/tex; mode=display">g(n) = \sum \limits_{d | n} {\mu(d)f(\frac{n}{d})}</script><h3 id="定义法"><a href="#定义法" class="headerlink" title="定义法"></a>定义法</h3><script type="math/tex; mode=display">由 f(n) 的定义有\\\sum \limits_{d|n} {\mu(d)f(\frac{n}{d})} = \sum \limits_{d|n} {\mu(d) \sum \limits_{i|\frac{n}{d}}g(i)} = \sum \limits_{d|n} \sum \limits_{i|\frac{n}{d}} {\mu(d)g(i)}\\变形得\\\sum \limits_{d|n} \sum \limits_{i|\frac{n}{d}} {\mu(d)g(i)} = \sum \limits_{i|n} \sum \limits_{d|\frac{n}{i}} {\mu(d)g(i)} = \sum \limits_{i|n} {g(i)} \sum \limits_{d|\frac{n}{i}} {\mu(d)}\\根据莫比乌斯函数的性质有\\\sum \limits_{i|n} {g(i)} \sum \limits_{d|\frac{n}{i}} {\mu(d)} = g(n)</script><p>由 $\mu(\frac{1}{d}) = \mu(d)$ ，代换后可以得出莫比乌斯反演的另一种形式，如果 $f(x)$ 和 $g(x)$ 满足 $g(n) = \sum \limits_{n|d} {f(d)}$ 那么有：</p><script type="math/tex; mode=display">f(n) = \sum \limits_{n|d} {\mu(\frac{d}{n})g(d)}</script><h2 id="例题：Luogu-2714-四元组统计"><a href="#例题：Luogu-2714-四元组统计" class="headerlink" title="例题：Luogu 2714 四元组统计"></a>例题：<a href="https://www.luogu.org/problemnew/show/P2714" target="_blank" rel="noopener">Luogu 2714 四元组统计</a></h2><p>题意：给出 $n$ 个正整数，求四元组 $(a_i, a_j, a_k, a_l)$ 使得 $gcd(a_i, a_j, a_k, a_l) = 1$ 的四元组的数量。</p><hr><p>思路：其实就是一个组合数学×莫比乌斯反演的模板<del>水</del>题，首先我们不妨设 $f(x)$ 表示 $gcd$ 为 $x$ 的四元组的数量， $g(x)$ 表示 $gcd$ 为 $x$ 的倍数的四元组的个数，所以就是要求 $f(1)$ 。很显然有 $g(n) = \sum \limits_{n|d} {f(d)}$ ，于是根据莫比乌斯反演定理，只要知道 $g$ 就可以求出 $f$ 。而且 $g$ 并不难求，只要知道对于一个数 $i$ ，它的倍数在序列中出现过的次数就可以用组合数求出 $g(i)$ 了。</p><hr><p>代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ri register int</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e4</span> + <span class="number">110</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">110</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x7fffffff</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-8</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">il <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">0</span>, f = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> ch = getchar();</span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (ch == <span class="string">'-'</span>)</span><br><span class="line">            f = <span class="number">-1</span>;</span><br><span class="line">        ch = getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch))</span><br><span class="line">    &#123;</span><br><span class="line">        x = (x &lt;&lt; <span class="number">3</span>) + (x &lt;&lt; <span class="number">1</span>) + ch - <span class="string">'0'</span>;</span><br><span class="line">        ch = getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> num[N], mu[N], prime[N], f[N];</span><br><span class="line"><span class="keyword">bool</span> vis[N];</span><br><span class="line"><span class="keyword">int</span> C[N][<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">Get_C</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    C[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (ri i = <span class="number">1</span>; i &lt;= N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        C[i][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (ri j = <span class="number">1</span>; j &lt;= <span class="number">4</span>; j++)</span><br><span class="line">            C[i][j] = C[i - <span class="number">1</span>][j - <span class="number">1</span>] + C[i - <span class="number">1</span>][j];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">Get_mu</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    mu[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (ri i = <span class="number">2</span>; i &lt;= N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!vis[i])</span><br><span class="line">        &#123;</span><br><span class="line">            prime[++cnt] = i;</span><br><span class="line">            mu[i] = <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (ri j = <span class="number">1</span>, foo; j &lt;= cnt &amp;&amp; (foo = prime[j] * i) &lt;= N; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            vis[foo] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (i % prime[j])</span><br><span class="line">                mu[foo] = -mu[i];</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> Wepdekr</span></span><br><span class="line">    freopen(<span class="string">"testdata.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    Get_C();</span><br><span class="line">    Get_mu();</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;n) == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(num, <span class="number">0</span>, <span class="keyword">sizeof</span>(num));</span><br><span class="line">        <span class="built_in">memset</span>(f, <span class="number">0</span>, <span class="keyword">sizeof</span>(f));</span><br><span class="line">        <span class="keyword">int</span> maxx = -inf, ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (ri i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> x = read();</span><br><span class="line">            num[x]++;</span><br><span class="line">            maxx = max(maxx, x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (ri i = maxx; i; i--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (ri j = i; j &lt;= maxx; j += i)</span><br><span class="line">                f[i] += num[j];</span><br><span class="line">            f[i] = C[f[i]][<span class="number">4</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (ri i = <span class="number">1</span>; i &lt;= maxx; i++)</span><br><span class="line">            ans += f[i] * mu[i];</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>坑终于填完了QwQ</p><p>总之那些看似很复杂<del>实际上真的很复杂</del>的东西终于是讲完了，但是想要熟练的应用还是需要多练习。</p><p>下一篇大概肝一个狄利克雷卷积吧（立flag.jpg</p>]]></content>
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数论 </tag>
            
            <tag> 莫比乌斯反演 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>整除分块学习笔记</title>
      <link href="/2018/10/29/Mobius_Inversion_pre/"/>
      <url>/2018/10/29/Mobius_Inversion_pre/</url>
      <content type="html"><![CDATA[<p><img src="http://wx1.sinaimg.cn/mw690/0060lm7Tly1fwotatx4t6j30xc0oaty3.jpg" alt=""></p><a id="more"></a><p>虽然说不是什么很难的东西就是了，不过好像在莫反中会有用到，就先来讲一下。</p><h1 id="整除分块学习笔记"><a href="#整除分块学习笔记" class="headerlink" title="整除分块学习笔记"></a>整除分块学习笔记</h1><h2 id="1-提出问题"><a href="#1-提出问题" class="headerlink" title="1.提出问题"></a>1.提出问题</h2><p>这里给出一个相当典型的例子。</p><p>求以下式子的结果（ $\lfloor n \rfloor$ 表示对 $n$ 下取整）：</p><script type="math/tex; mode=display">\sum\limits_{i = 1}^{n}{\lfloor\frac{n}{i}\rfloor}</script><p>很显然当 $n$ 并不大的时候可以思博 $O(n)$ 的解决，但如果 $n$ 比较大了呢？</p><h2 id="2-整除分块"><a href="#2-整除分块" class="headerlink" title="2.整除分块"></a>2.整除分块</h2><p>由以上问题我们提出整除分块这个概念。</p><p>很显然我们可以知道在我们 $O(n)$ 做的时候会很多次的计算相同的值，然后我们冷静分析<del>暴力打表</del>一波会发现有以下性质：</p><ol><li>$\lfloor \frac{n}{i} \rfloor$ 最多只有 $2\sqrt{n}$ 种取值，理由很简单：对于 $i \leq \sqrt{n}$ ，显然只有 $\sqrt{n}$ 种，对于 $i &gt; \sqrt{n}$ 的情况，显然 $\frac{n}{i} &lt; \sqrt{n}$ ，于是也只有 $\sqrt{n}$ 种。</li><li>假如 $\lfloor \frac{n}{j} \rfloor = \lfloor \frac{n}{i} \rfloor$ ，则 $j$ 的最大值为 $\lfloor\frac{n}{\lfloor\frac{n}{i}\rfloor}\rfloor$ 。</li></ol><p>证明如下：</p><p>设 $\lfloor \frac{n}{i} \rfloor = k$ ，则有 $ki + p = n\ \ (\ p\in[1,i)\ )$ ，我们再假设 $\lfloor \frac{n}{i + d} \rfloor = k$ ，于是有 $k(i + d) + q = n\ \ (\ q\in[1, i + d)\ )$ ，两式相减可以得到 $q = p - kd$ ，则有 $d_{max} = \lfloor \frac{p}{k} \rfloor$ ，于是：</p><script type="math/tex; mode=display">\begin{align*}j &= i + d_{max} \\ &= i + \lfloor \frac{p}{k} \rfloor \\ &=i + \lfloor \frac{n \bmod i}{\lfloor \frac{n}{i} \rfloor} \rfloor \\ &= i + \lfloor \frac{n - \lfloor \frac{n}{i} \rfloor i}{\lfloor \frac{n}{i} \rfloor} \rfloor \\ &= \lfloor i + \frac{n - \lfloor \frac{n}{i} \rfloor i}{\lfloor \frac{n}{i} \rfloor} \rfloor \\ &= \lfloor \frac{\lfloor \frac{n}{i} \rfloor i}{\lfloor \frac{n}{i} \rfloor} + \frac{n - \lfloor \frac{n}{i} \rfloor i}{\lfloor \frac{n}{i} \rfloor} \rfloor \\ &= \lfloor \frac{n}{\lfloor \frac{n}{i} \rfloor} \rfloor\end{align*}</script><p>此时再来谈到整除分块，已知一个块的左端点为 $l$ ，我们就可以根据以上性质求出右端点 $r =  \lfloor\frac{n}{\lfloor\frac{n}{l}\rfloor}\rfloor$ ，然后统计答案的时候加上 $(r - l + 1) \times \lfloor \frac{n}{l} \rfloor$ 就可以了，然后由于性质1，我们可以知道块数最多为 $2\sqrt{n}$ ，所以复杂度为 $O{\sqrt{n}}$ ，可以通过 $n​$ 较大的数据Da☆Ze。</p><p>以下放出代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (ri l = <span class="number">1</span>, r; l &lt;= r; l = r + <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">    r = n / (n / l);</span><br><span class="line">    ans += (r - l  + <span class="number">1</span>) * (n / l);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分块 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Nescafe28 树/图论专项练习</title>
      <link href="/2018/10/21/20181021/"/>
      <url>/2018/10/21/20181021/</url>
      <content type="html"><![CDATA[<p><img src="http://wx4.sinaimg.cn/mw690/0060lm7Tly1fwg0rq9jg5j30xc0ir16e.jpg" alt=""></p><a id="more"></a><h1 id="Nescafe28-树-图论专项练习"><a href="#Nescafe28-树-图论专项练习" class="headerlink" title="Nescafe28 树/图论专项练习"></a>Nescafe28 树/图论专项练习</h1><h2 id="A-升降梯上-updown"><a href="#A-升降梯上-updown" class="headerlink" title="A 升降梯上(updown)"></a>A 升降梯上(updown)</h2><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>一个电梯，在 $1～n$ 层中运动，手柄有 $m$ 个控制槽，位于第 $i$ 个槽时可以让电梯移动 $C_i$ 层。手柄移动一个槽耗时 $1$ 秒，电梯移动一层耗时 $2$ 秒。手柄一开始位于 $C_i=0$ 处，求从第 $1$ 层到第 $n$ 层所用的最短时间。</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>很显然这是一道水题，只要联想到这场比赛的主题就很简单了。</p><p>考虑建图，由于 $n$ 并不是很大，所以可以暴力 $O(n\times m)$ 地建图，具体来说就是对每一个节点 $i$ ，把它和所有使 $1\leq i+C_j\leq n$ 的 $j$ 连一条单向边，由于手柄移动需要时间，所以要附带两个属性：边权和此时手柄处在的位置。然后暴力 $\text{SPFA}$ 就行了。</p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>建图不能错，而且由于做法的差异，此处应使用堆优化以保证在取得最短路径的同时手柄处在正确的位置。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ri register int</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span> + <span class="number">110</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">110</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x7fffffff</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-8</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">il <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">0</span>, f = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">char</span> ch = getchar();</span><br><span class="line"><span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (ch == <span class="string">'-'</span>)</span><br><span class="line">f = <span class="number">-1</span>;</span><br><span class="line">ch = getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch))</span><br><span class="line">&#123;</span><br><span class="line">x = (x &lt;&lt; <span class="number">3</span>) + (x &lt;&lt; <span class="number">1</span>) + ch - <span class="string">'0'</span>;</span><br><span class="line">ch = getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> a[N];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Graph</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> cnt, head[N];</span><br><span class="line"><span class="keyword">int</span> dis[N];</span><br><span class="line"><span class="keyword">bool</span> vis[N];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> to, nxt, weight, type;</span><br><span class="line">&#125;;</span><br><span class="line">edge e[N];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> ver, dist, last;</span><br><span class="line"><span class="keyword">friend</span> <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (node a1, node a2)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> a1.dist &gt; a2.dist;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> w, <span class="keyword">int</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">e[++cnt] = (edge)&#123;v, head[u], w, t&#125;;</span><br><span class="line">head[u] = cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">Insert</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> w, <span class="keyword">int</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">add_edge(u, v, w, t);</span><br><span class="line">add_edge(v, u, w, t);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">SPFA</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> now)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (ri i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">dis[i] = inf, vis[i] = <span class="number">0</span>;</span><br><span class="line">priority_queue &lt;node&gt; q;</span><br><span class="line">vis[s] = <span class="number">1</span>;</span><br><span class="line">dis[s] = <span class="number">0</span>;</span><br><span class="line">q.push((node) &#123;s, <span class="number">0</span>, now&#125;);</span><br><span class="line"><span class="keyword">while</span> (!q.empty())</span><br><span class="line">&#123;</span><br><span class="line">node ViXbob = q.top();</span><br><span class="line">q.pop();</span><br><span class="line"><span class="keyword">int</span> u = ViXbob.ver, Zhyic = ViXbob.last, Edgration = ViXbob.dist;</span><br><span class="line"><span class="keyword">if</span> (dis[u] != Edgration)</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">for</span> (ri i = head[u]; i; i = e[i].nxt)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> v = e[i].to, KL = e[i].type;</span><br><span class="line"><span class="keyword">if</span> (dis[v] &gt; dis[u] + e[i].weight + <span class="built_in">abs</span>(KL - Zhyic))</span><br><span class="line">&#123;</span><br><span class="line">dis[v] = dis[u] + e[i].weight + <span class="built_in">abs</span>(KL - Zhyic);</span><br><span class="line">q.push((node) &#123;v, dis[v], KL&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">Graph G;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> Wepdekr</span></span><br><span class="line">freopen(<span class="string">"updown.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line">freopen(<span class="string">"updown.out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">n = read(), m = read();</span><br><span class="line"><span class="keyword">int</span> now = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (ri i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">&#123;</span><br><span class="line">a[i] = read();</span><br><span class="line"><span class="keyword">if</span> (a[i] == <span class="number">0</span>)</span><br><span class="line">now = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (ri i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line"><span class="keyword">for</span> (ri j = <span class="number">1</span>; j &lt;= m; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (i + a[j] &lt; <span class="number">1</span> || i + a[j] &gt; n || a[j] == <span class="number">0</span>)</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">G.add_edge(i, i + a[j], <span class="built_in">abs</span>(a[j]) * <span class="number">2</span>, j);</span><br><span class="line">&#125;</span><br><span class="line">G.SPFA(<span class="number">1</span>, now);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, (G.dis[n] &lt; inf) ? G.dis[n] : <span class="number">-1</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">6 3</span></span><br><span class="line"><span class="comment">-1 0 2</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="B-塔顶试探-probe"><a href="#B-塔顶试探-probe" class="headerlink" title="B 塔顶试探(probe)"></a>B 塔顶试探(probe)</h2><h3 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h3><p>给出一棵有根树的 $\text{DFS}$ 序，问有多少种不同的树可以使 $\text{DFS}$ 序与给出序列相同，答案对 $10^9$ 取模</p><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>很显然这是一个 $\text{DP}$ ，由于给出的是 $\text{DFS}$ 序，我们可以知道一棵子树的根节点一定在子树的 $\text{DFS}$ 序列的首位都会出现，我们只需要在两个端点中枚举一个划分点 $k$ ，由乘法原理就可以得到答案。</p><p>转移方程如下：</p><script type="math/tex; mode=display">dp[i][j] = dp[i+1][j-1]+\sum\limits_{k=i+2}^{j-2}{dp[i+1][k-1]\times dp[k][j]}</script><h3 id="注意-1"><a href="#注意-1" class="headerlink" title="注意"></a>注意</h3><p>枚举划分点时不要忘记只有一棵子树的情况</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ri register int</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span> + <span class="number">110</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">310</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x7fffffff</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">il <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">0</span>, f = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">char</span> ch = getchar();</span><br><span class="line"><span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (ch == <span class="string">'-'</span>)</span><br><span class="line">f = <span class="number">-1</span>;</span><br><span class="line">ch = getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch))</span><br><span class="line">&#123;</span><br><span class="line">x = (x &lt;&lt; <span class="number">3</span>) + (x &lt;&lt; <span class="number">1</span>) + ch - <span class="string">'0'</span>;</span><br><span class="line">ch = getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> s[N];</span><br><span class="line">ll dp[MAXN][MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> Wepdekr</span></span><br><span class="line">freopen(<span class="string">"probe.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line">freopen(<span class="string">"probe.out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>, s);</span><br><span class="line"><span class="keyword">int</span> len = <span class="built_in">strlen</span>(s);</span><br><span class="line"><span class="keyword">for</span> (ri i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">dp[i][i] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (ri i = len - <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line"><span class="keyword">for</span> (ri j = i + <span class="number">1</span>; j &lt; len; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (s[i] == s[j])</span><br><span class="line">&#123;</span><br><span class="line">dp[i][j] = (dp[i][j] + dp[i + <span class="number">1</span>][j - <span class="number">1</span>]) % mod;</span><br><span class="line"><span class="keyword">for</span> (ri k = i + <span class="number">2</span>; k &lt; j - <span class="number">1</span>; k++)</span><br><span class="line"><span class="keyword">if</span> (s[i] == s[k])</span><br><span class="line">dp[i][j] = (dp[i][j] + (dp[i + <span class="number">1</span>][k - <span class="number">1</span>] * dp[k][j]) % mod) % mod;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld"</span>, dp[<span class="number">0</span>][len - <span class="number">1</span>]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">ABABABA</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="C-礼物运送-transport"><a href="#C-礼物运送-transport" class="headerlink" title="C 礼物运送(transport)"></a>C 礼物运送(transport)</h2><h3 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h3><p>给出一张无向带权图，有两个人遍历这张图，定义遍历这张图的时间为耗时较长的人的时间，问这个时间最小是多少</p><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><p>先看数据范围可以猜出是状压 $\text{DP}$ ，然而他们虽然是两个人一起走，但没有任何限制，所以我们不妨将此题看为一个人走。否则设计状态就要三维，分别为1号人最后走到的地方 $i$ ，2号人最后走到的地方 $j$ ，和此时两人一共走过的集合 $S$ 。</p><p>（二进制状压），你悄悄算算就会发现一件很奇妙的事情： $\text{MLE}$ 。所以我们只能考虑记录一个 $i$ 和 $S$ ，所以得到的应该是对于这个图的每一种遍历过的点集 $S$ ，走到的末位置为 $i$ 的情况下的最少步数。考虑两个人无论谁走都是一样的，那么我们想要得到答案就应该是 $min{max(dp[s|1][i],dp[(2^n-1-s)|1][j])} (i,j\in V)$ ；（之所以要|1是因为1是出发点，其他点可以取反，但1不能）</p><p>所以是这样的吗？如果你照着这个思路用普通的状压 $\text{DP}$ 扩展你会发现你连样例都过不了。因为样例中两人还共同走了一段，而这一段是必须的。如何把这一段加进去呢？其实，跑最短路将连通图的每两个点的最短距离算出来即可，因为在运用最短路扩展时，计算 $dist$ 数组会加进一些必要经过的点，并且这些点是最优的。所以现在我们完善状态：一定会经过 $S$ 中的点，但经过的点不一定是 $S$（子集关系）因为有可能多经过其他点而更优。所以到这里状态转移方程才是正确的。建议用 $\text{Floyed}$ 求多源点最短路。</p><h3 id="注意-2"><a href="#注意-2" class="headerlink" title="注意"></a>注意</h3><p> $\text{DP}$ 时要注意了两人一起走的一段</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ri register int</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span> + <span class="number">110</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">110</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x7fffffff</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = (<span class="number">1</span> &lt;&lt; <span class="number">20</span>);</span><br><span class="line"></span><br><span class="line"><span class="function">il <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">0</span>, f = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">char</span> ch = getchar();</span><br><span class="line"><span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (ch == <span class="string">'-'</span>)</span><br><span class="line">f = <span class="number">-1</span>;</span><br><span class="line">ch = getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch))</span><br><span class="line">&#123;</span><br><span class="line">x = (x &lt;&lt; <span class="number">3</span>) + (x &lt;&lt; <span class="number">1</span>) + ch - <span class="string">'0'</span>;</span><br><span class="line">ch = getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> mp[<span class="number">50</span>][<span class="number">50</span>];</span><br><span class="line"><span class="keyword">int</span> dp[maxn][<span class="number">50</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> Wepdekr</span></span><br><span class="line">freopen(<span class="string">"transport.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line">freopen(<span class="string">"transport.out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">n = read(), m = read();</span><br><span class="line"><span class="built_in">memset</span>(mp, <span class="number">63</span>, <span class="keyword">sizeof</span>(mp));</span><br><span class="line"><span class="keyword">for</span> (ri i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> u = read(), v = read(), w = read();</span><br><span class="line">mp[u][v] = mp[v][u] = w;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (ri i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">mp[i][i] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (ri k = <span class="number">1</span>; k &lt;= n; k++)</span><br><span class="line"><span class="keyword">for</span> (ri i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line"><span class="keyword">for</span> (ri j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line"><span class="keyword">if</span> (mp[i][k] + mp[k][j] &lt; mp[i][j])</span><br><span class="line">mp[i][j] = mp[i][k] + mp[k][j];</span><br><span class="line"><span class="built_in">memset</span>(dp, <span class="number">63</span>, <span class="keyword">sizeof</span>(dp));</span><br><span class="line">dp[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (ri i = <span class="number">1</span>; i &lt;= (<span class="number">1</span> &lt;&lt; n) - <span class="number">1</span>; i++)</span><br><span class="line"><span class="keyword">for</span> (ri j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line"><span class="keyword">if</span> ((<span class="number">1</span> &lt;&lt; j - <span class="number">1</span>) &amp; i)</span><br><span class="line"><span class="keyword">for</span> (ri k = <span class="number">1</span>; k &lt;= n ; k++)</span><br><span class="line"><span class="keyword">if</span> (((<span class="number">1</span> &lt;&lt; k - <span class="number">1</span>) &amp; i) &amp;&amp; (dp[i][j] &gt; dp[i - (<span class="number">1</span> &lt;&lt; j - <span class="number">1</span>)][k] + mp[k][j]) &amp;&amp; i != j)</span><br><span class="line">dp[i][j] = dp[i - (<span class="number">1</span> &lt;&lt; j - <span class="number">1</span>)][k] + mp[k][j];</span><br><span class="line"><span class="keyword">for</span> (ri i = <span class="number">1</span>; i &lt;= (<span class="number">1</span> &lt;&lt; n) - <span class="number">1</span>; i++)</span><br><span class="line"><span class="keyword">for</span> (ri j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">dp[i][<span class="number">0</span>] = min(dp[i][<span class="number">0</span>], dp[i][j]);</span><br><span class="line"><span class="keyword">int</span> ans = inf;</span><br><span class="line"><span class="keyword">for</span> (ri i = <span class="number">1</span>; i &lt;= (<span class="number">1</span> &lt;&lt; n) - <span class="number">1</span>; i++)</span><br><span class="line">ans = min(ans, max(dp[i | <span class="number">1</span>][<span class="number">0</span>], dp[((<span class="number">1</span> &lt;&lt; n) - <span class="number">1</span> - i) | <span class="number">1</span>][<span class="number">0</span>]));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>, ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">6 6</span></span><br><span class="line"><span class="comment">1 2 10</span></span><br><span class="line"><span class="comment">2 3 10</span></span><br><span class="line"><span class="comment">3 4 5</span></span><br><span class="line"><span class="comment">4 5 10</span></span><br><span class="line"><span class="comment">5 6 20</span></span><br><span class="line"><span class="comment">2 5 10</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本次模拟赛整体上难度适中，但是由于动态规划做题的底力并不是很够，所以BC两题没有拿到分</p><ol><li>多练习 $\text{DP}$ ，培养做题的感觉，看到 $\text{DP}$ 就没有思路瞎搞的话肯定会出事的</li><li>对与一些性质应当更敏感一些，有时在草稿纸上写出来会看的更清楚一些</li></ol>]]></content>
      
      <categories>
          
          <category> 模拟赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图论 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>【计算几何】计算几何 从入门到去世</title>
      <link href="/2018/10/19/ComputationGeometry/"/>
      <url>/2018/10/19/ComputationGeometry/</url>
      <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="The article hasn't been finished,if you want to know how it is now,please enter the password." />    <label for="pass">The article hasn't been finished,if you want to know how it is now,please enter the password.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算几何 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>【仙人掌学习笔记】二、圆方树——变仙人掌为树的艺术</title>
      <link href="/2018/08/30/cactus-2/"/>
      <url>/2018/08/30/cactus-2/</url>
      <content type="html"><![CDATA[<p><img src="http://wx3.sinaimg.cn/mw690/0060lm7Tly1fv3biwkykjj30ir07hdhu.jpg" alt=""></p><a id="more"></a><p>近年来，仙人掌在各大OI竞赛中的出现逐渐频繁，虽然仙人掌本身就有一些特殊而优美的性质，但我们终究是没有很多针对仙人掌的算法，就使得很多仙人掌的题变得很棘手。</p><p>那么真的没有办法快速解决仙人掌上的问题吗？不不不，我们可以想到的是，如果把仙人掌变成一棵树，那么我们学的大量的树上算法就有了用武之地。那么怎么做呢？我在这里介绍一种优美的方法：使用圆方树。</p><p>所谓圆方树，顾名思义，就是有圆点和方点的树。我们假设原图的点都为圆点，方点则是新加入的点，对于每一个点双，我们都会新加入一个方点。</p><p>同时，为了使圆方树成为一棵树，我们要断掉原来点双之间的边，相应的，每一个点双中的圆点都要和对应的方点连一条边。这样每个点双中都由n个点变为了n+1个点，同时有n个圆点，就有n条边，也就可以保证新图是一棵树了。</p><p>举个例子，下图就是一棵仙人掌：</p><p><img src="http://wx3.sinaimg.cn/mw690/0060lm7Tly1furkx6855wj30m80goglu.jpg" alt=""></p><p>然后建成圆方树之后就变成了这样：</p><p><img src="http://wx1.sinaimg.cn/mw690/0060lm7Tly1furl2n6f0lj30m80gsjro.jpg" alt=""></p><p>圆方树有这些优美的性质：</p><ol><li>无论如何换根，圆方树形态不变</li><li>圆方树的子树=原仙人掌的子仙人掌</li><li>方点不会和方点相连</li></ol><p>在代码实现方面，求点双的方法在本系列第一篇文章<a href="https://dimensiontripper.github.io/2018/09/09/%E3%80%90%E4%BB%99%E4%BA%BA%E6%8E%8C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E3%80%91%E4%B8%80%E3%80%81Tarjan%EF%BC%8C%E4%BB%8E%E5%BC%BA%E8%BF%9E%E9%80%9A%E5%88%86%E9%87%8F%E5%88%B0%E7%82%B9%E5%8F%8C/" target="_blank" rel="noopener">【仙人掌学习笔记】一、Tarjan，从强连通分量到点双</a>中已有提到，剩下的就几乎没有什么难点了。</p><p>以下是代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Graph</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> head[N],cnt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> to,nxt,weight;</span><br><span class="line">&#125;;</span><br><span class="line">edge e[N];</span><br><span class="line">Graph()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">memset</span>(head,<span class="number">-1</span>,<span class="keyword">sizeof</span>(head));</span><br><span class="line">cnt=<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">e[++cnt]=(edge)&#123;v,head[u],w&#125;;</span><br><span class="line">head[u]=cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Insert</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">add_edge(u,v,w);</span><br><span class="line">add_edge(v,u,w);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">Graph G,T;</span><br><span class="line"><span class="function">il <span class="keyword">int</span> <span class="title">findf</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x==father[x]?x:father[x]=findf(father[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">ClearStack</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">BCC_num++;</span><br><span class="line"><span class="keyword">int</span> tot=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line"><span class="keyword">int</span> ed=st[top];</span><br><span class="line"><span class="keyword">int</span> v=G.e[ed^<span class="number">1</span>].to;</span><br><span class="line">bel[v]=BCC_num;</span><br><span class="line">len[BCC_num]+=G.e[ed].weight;</span><br><span class="line">cur[v]=len[BCC_num];</span><br><span class="line"><span class="keyword">if</span>(dfn[v]&lt;dfn[rt[BCC_num]])</span><br><span class="line">rt[BCC_num]=v;</span><br><span class="line">tmp[++tot]=v;</span><br><span class="line">&#125;<span class="keyword">while</span>(st[top--]!=x);</span><br><span class="line"><span class="keyword">for</span>(ri i=<span class="number">1</span>;i&lt;=tot;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> t=<span class="built_in">abs</span>(cur[tmp[i]]-cur[rt[BCC_num]]);</span><br><span class="line">dis[tmp[i]]=min(t,len[BCC_num]-t);</span><br><span class="line">zip[tmp[i]]=(dis[tmp[i]]==t);</span><br><span class="line"><span class="keyword">if</span>(tot&gt;<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">T.Insert(tmp[i],n+BCC_num,dis[tmp[i]]);</span><br><span class="line"><span class="keyword">int</span> findx=findf(tmp[i]),findy=findf(n+BCC_num);</span><br><span class="line"><span class="keyword">if</span>(findx!=findy)</span><br><span class="line">father[findx]=findy;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">Tarjan</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> pre)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">dfn[x]=low[x]=++id;</span><br><span class="line"><span class="keyword">int</span> child=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(ri i=G.head[x];~i;i=G.e[i].nxt)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> v=G.e[i].to;</span><br><span class="line"><span class="keyword">if</span>(vis[i]||v==pre)</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">st[++top]=i;</span><br><span class="line">vis[i]=vis[i^<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(!dfn[v])</span><br><span class="line">&#123;</span><br><span class="line">child++;</span><br><span class="line">Tarjan(v,x);</span><br><span class="line">low[x]=min(low[x],low[v]);</span><br><span class="line"><span class="keyword">if</span>((x==pre&amp;&amp;child&gt;<span class="number">1</span>)||(x!=pre&amp;&amp;low[v]&gt;=dfn[x]))</span><br><span class="line">ClearStack(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">low[x]=min(low[x],dfn[v]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">read()</span><br><span class="line"><span class="keyword">for</span>(ri i=<span class="number">1</span>;i&lt;=n*<span class="number">2</span>;i++)</span><br><span class="line">father[i]=i;</span><br><span class="line">dfn[<span class="number">0</span>]=inf;</span><br><span class="line">Tarjan(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(top)</span><br><span class="line">ClearStack(st[<span class="number">1</span>]);</span><br><span class="line"><span class="keyword">for</span>(ri u=<span class="number">1</span>;u&lt;=n;u++)</span><br><span class="line"><span class="keyword">for</span>(ri i=G.head[u];~i;i=G.e[i].nxt)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> v=G.e[i].to;</span><br><span class="line"><span class="keyword">int</span> findx=findf(u),findy=findf(v);</span><br><span class="line"><span class="keyword">if</span>(findx!=findy)</span><br><span class="line">&#123;</span><br><span class="line">T.add_edge(u,v,G.e[i].weight);</span><br><span class="line">father[findx]=findy;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图论 </tag>
            
            <tag> 圆方树 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>【仙人掌学习笔记】一、Tarjan，从强连通分量到点双</title>
      <link href="/2018/08/30/cactus-1/"/>
      <url>/2018/08/30/cactus-1/</url>
      <content type="html"><![CDATA[<p><img src="http://wx2.sinaimg.cn/mw690/0060lm7Tly1fv3bcyecr0j30u60c3dke.jpg" alt=""></p><a id="more"></a><p>Tarjan，一个由美国计算机科学家Robert Tarjan发明的算法。它的一个广为人知的应用是求出有向图中的强连通分量。但是这里，我将会简单的介绍一下它的另一个应用：求双连通分量。</p><p>双连通分量分为两种：点双连通分量（点双）和边双连通分量。我这里主要讲前者。</p><p>点双连通分量（下称“点双”）的定义是：若一个无向图中的去掉任意一个节点都不会改变此图的连通性，即不存在割点，则称作点双连通图；一个无向图中的每一个极大点双连通子图称作此无向图的点双连通分量。</p><p>简单来说，若一个无向图中的一个子图在任意两点间都存在两条点不重复路径，那么该子图为一个点双。再简单一点，无向图中的每一个简单环都是一个点双。</p><p>那么点双和Tarjan有何联系呢？</p><p>我们知道，Tarjan是一个基于对图的深度优先搜索（DFS）的算法，每次在搜索过程中通过记录搜索顺序（dfn）与能到达的最早的节点（low）来判断割点。我们显然可以发现对于节点u以及它能到达的节点v，有low[v]&gt;=dfn[u]时u为割点。</p><p>然后我们就可以发现，当我们找到一个割点的时候，其实我们已经遍历完了一个点双。那么就只要用一个栈记录一下遍历过的边，然后在找到割点后不断取出栈内元素直到遇到当前边为止，我们取出来的边就是连接点双内点的边。</p><p>以下是代码实现：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">ClearStack</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">BCC_num++;</span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line"><span class="keyword">int</span> ed=st[top];</span><br><span class="line"><span class="keyword">int</span> v=G.e[ed^<span class="number">1</span>].to;</span><br><span class="line">bel[v]=BCC_num;</span><br><span class="line"><span class="keyword">if</span>(dfn[v]&lt;dfn[rt[BCC_num]])</span><br><span class="line">rt[BCC_num]=v;</span><br><span class="line">&#125;<span class="keyword">while</span>(st[top--]!=x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">Tarjan</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> pre)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">dfn[x]=low[x]=++id;</span><br><span class="line"><span class="keyword">int</span> child=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(ri i=G.head[x];~i;i=G.e[i].nxt)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> v=G.e[i].to;</span><br><span class="line"><span class="keyword">if</span>(vis[i]||v==pre)</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">st[++top]=i;</span><br><span class="line">vis[i]=vis[i^<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(!dfn[v])</span><br><span class="line">&#123;</span><br><span class="line">child++;</span><br><span class="line">Tarjan(v,x);</span><br><span class="line">low[x]=min(low[x],low[v]);</span><br><span class="line"><span class="keyword">if</span>((x==pre&amp;&amp;child&gt;<span class="number">1</span>)||(x!=pre&amp;&amp;low[v]&gt;=dfn[x]))</span><br><span class="line">ClearStack(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">low[x]=min(low[x],dfn[v]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我们会发现在上面这段代码中，最后得到的各点的bel值就是它所在的点双的编号（割点的bel值无意义，在求解过程中会多次变化）。</p>]]></content>
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图论 </tag>
            
            <tag> Tarjan </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>【NOI2018】归程</title>
      <link href="/2018/08/07/%5BNOI2018%5DDay1T1/"/>
      <url>/2018/08/07/%5BNOI2018%5DDay1T1/</url>
      <content type="html"><![CDATA[<p><img src="http://wx4.sinaimg.cn/mw690/0060lm7Tly1fupn447f0xj30jv0a8gpy.jpeg" alt=""></p><a id="more"></a><p>话说同步赛因为没打爆零了QwQ</p><p>这道Day1T1……个人觉得它领着我自学了一波Kruskal重构树，然后再加上出题人恶意卡SPFA，所以导致我不得不学了一波堆优化（对，差不多就是Dijkstra）</p><p>然后其实思维难度就并不算太大了（？）首先求出1号节点到其他点的最短路长度，然后把边按海拔从大到小排序后建一棵Kruskal重构树，这样就只需要找到一个节点u的海拔高于水位线，它的子树的叶子节点就都可以乘车相互到达，在这些点中找到到1号点距离最短的那个就行了。</p><p>接下来有一个严肃的问题就是如何找到这个u，我们知道Kruskal重构树是满足堆的性质的，越往上的节点海拔越低，也就是说我们可以用倍增解决这个问题。</p><p>所以代码就很简单了：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ri register int</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">2000000</span>+<span class="number">110</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">0x7fffffff</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN=<span class="number">110</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps=<span class="number">1e-8</span>;</span><br><span class="line"><span class="function">il <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">char</span> ch=getchar();</span><br><span class="line"><span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(ch==<span class="string">'-'</span>)</span><br><span class="line">f=<span class="number">-1</span>;</span><br><span class="line">ch=getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))</span><br><span class="line">&#123;</span><br><span class="line">x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+ch-<span class="string">'0'</span>;</span><br><span class="line">ch=getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> T,n,m,cnt,tot,num,q,k,s;</span><br><span class="line"><span class="keyword">int</span> head[N],dis[N],Head[N],fa[N],H[N],dep[N],ans[N],lg[N];</span><br><span class="line"><span class="keyword">int</span> father[N][<span class="number">50</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> fr,to,nxt,weight,height;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function">il <span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(edge e1,edge e2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> e1.height&gt;e2.height;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> x,d;</span><br><span class="line">&#125;;</span><br><span class="line">il <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (node a,node b)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> a.d&gt;b.d;</span><br><span class="line">&#125;</span><br><span class="line">edge e[N],E[N];</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> w,<span class="keyword">int</span> h)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">e[++cnt]=(edge)&#123;u,v,head[u],w,h&#125;;</span><br><span class="line">head[u]=cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">Add_edge</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">E[++tot]=(edge)&#123;u,v,Head[u],<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line">Head[u]=tot;</span><br><span class="line">E[++tot]=(edge)&#123;v,u,Head[v],<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line">Head[v]=tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">Dij</span><span class="params">(<span class="keyword">int</span> S)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(ri i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">dis[i]=inf;</span><br><span class="line">priority_queue&lt;node&gt;heap;</span><br><span class="line">dis[S]=<span class="number">0</span>;</span><br><span class="line">heap.push((node)&#123;S,dis[S]&#125;);</span><br><span class="line"><span class="keyword">while</span>(!heap.empty())</span><br><span class="line">&#123;</span><br><span class="line">node now=heap.top();</span><br><span class="line">heap.pop();</span><br><span class="line"><span class="keyword">if</span>(now.d!=dis[now.x])</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">int</span> u=now.x;</span><br><span class="line"><span class="keyword">for</span>(ri i=head[u];i;i=e[i].nxt)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> v=e[i].to;</span><br><span class="line"><span class="keyword">if</span>(dis[u]+e[i].weight&lt;dis[v])</span><br><span class="line">&#123;</span><br><span class="line">dis[v]=dis[u]+e[i].weight;</span><br><span class="line">heap.push((node)&#123;v,dis[v]&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">int</span> <span class="title">findf</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x==fa[x])</span><br><span class="line"><span class="keyword">return</span> fa[x];</span><br><span class="line"><span class="keyword">return</span> fa[x]=findf(fa[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">Ex_Kruskal</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">num=n;</span><br><span class="line"><span class="keyword">for</span>(ri i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">fa[i]=i,fa[i+n]=i+n;</span><br><span class="line"><span class="keyword">for</span>(ri i=<span class="number">1</span>;i&lt;=cnt;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> f1=findf(e[i].fr);</span><br><span class="line"><span class="keyword">int</span> f2=findf(e[i].to);</span><br><span class="line"><span class="keyword">if</span>(f1!=f2)</span><br><span class="line">&#123;</span><br><span class="line">num++;</span><br><span class="line">Add_edge(num,f1);</span><br><span class="line">Add_edge(num,f2);</span><br><span class="line">fa[f1]=num,fa[f2]=num;</span><br><span class="line">H[num]=e[i].height;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> pre)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">dep[x]=dep[pre]+<span class="number">1</span>;</span><br><span class="line">father[x][<span class="number">0</span>]=pre;</span><br><span class="line"><span class="keyword">for</span>(ri i=<span class="number">1</span>;(<span class="number">1</span>&lt;&lt;i)&lt;=dep[x];i++)</span><br><span class="line">father[x][i]=father[father[x][i<span class="number">-1</span>]][i<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">for</span>(ri i=Head[x];i;i=E[i].nxt)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> v=E[i].to;</span><br><span class="line"><span class="keyword">if</span>(v==pre)</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">DFS(v,x);</span><br><span class="line">ans[x]=min(ans[x],ans[v]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(ri i=<span class="number">20</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line"><span class="keyword">if</span>((<span class="number">1</span>&lt;&lt;i)&lt;=dep[x]&amp;&amp;H[father[x][i]]&gt;p)</span><br><span class="line">x=father[x][i];</span><br><span class="line"><span class="keyword">return</span> ans[x];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">T=read();</span><br><span class="line"><span class="keyword">while</span>(T--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">memset</span>(e,<span class="number">0</span>,<span class="keyword">sizeof</span>(e));</span><br><span class="line"><span class="built_in">memset</span>(head,<span class="number">0</span>,<span class="keyword">sizeof</span>(head));</span><br><span class="line"><span class="built_in">memset</span>(E,<span class="number">0</span>,<span class="keyword">sizeof</span>(E));</span><br><span class="line"><span class="built_in">memset</span>(Head,<span class="number">0</span>,<span class="keyword">sizeof</span>(Head));</span><br><span class="line">n=read(),m=read();</span><br><span class="line"><span class="keyword">for</span>(ri i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> u=read(),v=read(),w=read(),h=read();</span><br><span class="line">add_edge(u,v,w,h);</span><br><span class="line">add_edge(v,u,w,h);</span><br><span class="line">&#125;</span><br><span class="line">Dij(<span class="number">1</span>);</span><br><span class="line">sort(e+<span class="number">1</span>,e+<span class="number">1</span>+cnt,cmp);</span><br><span class="line">Ex_Kruskal();</span><br><span class="line"><span class="keyword">int</span> rt=findf(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(ri i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">ans[i]=dis[i],ans[i+n]=inf;</span><br><span class="line">DFS(rt,<span class="number">0</span>);</span><br><span class="line">q=read(),k=read(),s=read();</span><br><span class="line"><span class="keyword">int</span> last_ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(ri i=<span class="number">1</span>;i&lt;=q;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> v=read(),p=read();</span><br><span class="line">v=(v+k*last_ans<span class="number">-1</span>)%n+<span class="number">1</span>;</span><br><span class="line">p=(p+k*last_ans)%(s+<span class="number">1</span>);</span><br><span class="line">last_ans=query(v,p);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,last_ans);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然而有一个小问题：按照我的<del>错误</del>计算，N开到1e6应该就够了，然而并不是，我开到2e6才能A。</p>]]></content>
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kruskal重构树 </tag>
            
            <tag> 最短路 </tag>
            
            <tag> 倍增 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Kruskal重构树</title>
      <link href="/2018/08/02/Kruskal%E9%87%8D%E6%9E%84%E6%A0%91/"/>
      <url>/2018/08/02/Kruskal%E9%87%8D%E6%9E%84%E6%A0%91/</url>
      <content type="html"><![CDATA[<p><img src="http://wx4.sinaimg.cn/mw690/0060lm7Tly1fupna3edmsj30xc0jwn27.jpeg" alt=""></p><a id="more"></a><p>看到NOI2018Day1T1要用到Kruskal重构树，蒟蒻就学习了一下。</p><p>看到这个名字，大家一定会想起Kruskal，对，没错，可以说这个重构树就是稍微改动了一点的Kruskal。它的基本思想就是将一个图的最小生成树中的边转成点建一棵新树，边权也就转换成了点权。</p><p>做法依然是每次取出一条最短的边，如果它所连接的两个节点不在一个集合里，那么就加入一个新的节点，它的两个儿子节点为所连节点的最远祖先，并将这两个节点以及新点合并。</p><p>可知这样新建的树共有$2 \times n-1$个节点以及$2 \times n-2$条边，它还满足以下几个性质：</p><ol><li>二叉树</li><li>原树与新树两点间路径上边权（点权）值相等</li><li>子节点的边权小于等于父亲节点</li><li>原树中两点之间路径上边权的最大值等于新树上两点的LCA的点权</li></ol><p>如果你对建树过程依然不能理解，那么我们来看一道例题：<a href="https://www.lydsy.com/JudgeOnline/problem.php?id=3732" target="_blank" rel="noopener">BZOJ 3732 Network</a></p><p>可以看到原图是这样的：</p><p><img src="http://wx2.sinaimg.cn/mw690/0060lm7Tly1fupndw1hdyj30m80gowev.jpg" alt=""></p><p>然后它对应的Kruskal重构树就长这样（圆点为原图中的点，方点为新加入的点，绿框内数为点权）：</p><p><img src="http://wx2.sinaimg.cn/mw690/0060lm7Tly1fupnf9pwqzj30m80gowf0.jpg" alt=""></p><p>然而这两张图并不能让你理解它是如何建成的，所以我将会分步描述建树过程</p><ol><li>按边权从小到大排序</li><li>当前最小边为4 6 2，发现4,6并不在一个集合中，加入7号点，点权为2，并与4,6分别连边，将4,6加入7的集合中</li><li>当前最小边为3 4 3，发现3,4也不在一个集合中，加入8号点，点权为3，此时3号点的最远祖先为3，4号点的最远祖先为7，于是在8,7、8,3之间连边，并将3,7加入8的集合中</li><li>当前最小边为2 3 4，发现2,3还不在一个集合中，加入9号点，点权为4，此时2号点的最远祖先为2，3号点的最远祖先为8，于是在9,8、9,2之间连边，并将2,8加入9的集合中</li><li>当前最小边为1 2 5，发现1,2依然不在一个集合中，加入10号点，点权为5，此时1号点的最远祖先为1，2号点的最远祖先为9，于是在10,9、10,1之间连边，并将1,9加入10的集合中</li><li>当前最小边为2 5 7，发现2,5居然也不在一个集合中，加入11号点，点权为7，此时2号点的最远祖先为10，5号点的最远祖先为5，于是在11,10、11,5之间连边，并将10,5加入11的集合中</li><li>当前最小边为1 4 8，然而1,4在同一个集合里，不做任何操作</li><li>已经没有边了，重构树宣告建成</li></ol><p>这样剩下的就只有求LCA的过程了，瞎yy两下代码就出来了，然而还是把代码放一下（树剖求LCA）：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ri register int</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">110</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x7fffffff</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">110</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-8</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">il <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">0</span>, f = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">char</span> ch = getchar();</span><br><span class="line"><span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (ch == <span class="string">'-'</span>)</span><br><span class="line">f = <span class="number">-1</span>;</span><br><span class="line">ch = getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch))</span><br><span class="line">&#123;</span><br><span class="line">x = (x &lt;&lt; <span class="number">3</span>) + (x &lt;&lt; <span class="number">1</span>) + ch - <span class="string">'0'</span>;</span><br><span class="line">ch = getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, k, cnt, tot;</span><br><span class="line"><span class="keyword">int</span> fa[N], head[N], w[N], dfn[N], top[N], dep[N], son[N], siz[N];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> fr, to, weight;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> to, nxt;</span><br><span class="line">&#125;;</span><br><span class="line">edge e[N];</span><br><span class="line">Edge E[N];</span><br><span class="line"><span class="function">il <span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(edge x, edge y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x.weight &lt; y.weight;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">il <span class="keyword">int</span> <span class="title">findf</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (fa[x] == x)</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line"><span class="keyword">return</span> fa[x] = findf(fa[x]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">E[++tot] = (Edge)&#123;v, head[u]&#125;;</span><br><span class="line">head[u] = tot;</span><br><span class="line">E[++tot] = (Edge)&#123;u, head[v]&#125;;</span><br><span class="line">head[v] = tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">Ex_Kruskal</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cnt = n;</span><br><span class="line"><span class="keyword">for</span> (ri i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> f1 = findf(e[i].fr);</span><br><span class="line"><span class="keyword">int</span> f2 = findf(e[i].to);</span><br><span class="line"><span class="keyword">if</span> (f1 != f2)</span><br><span class="line">&#123;</span><br><span class="line">cnt++;</span><br><span class="line">add_edge(cnt, f1);</span><br><span class="line">add_edge(cnt, f2);</span><br><span class="line">fa[f1] = cnt, fa[f2] = cnt;</span><br><span class="line">w[cnt] = e[i].weight;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">dfn[++dfn[<span class="number">0</span>]] = x;</span><br><span class="line">siz[x]++;</span><br><span class="line"><span class="keyword">for</span> (ri i = head[x]; i; i = E[i].nxt)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> v = E[i].to;</span><br><span class="line"><span class="keyword">if</span> (v == fa[x])</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">fa[v] = x;</span><br><span class="line">dep[v] = dep[x] + <span class="number">1</span>;</span><br><span class="line">DFS(v);</span><br><span class="line">siz[x] += siz[v];</span><br><span class="line"><span class="keyword">if</span> (siz[v] &gt; siz[son[x]])</span><br><span class="line">son[x] = v;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!son[x])</span><br><span class="line">son[x] = x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">int</span> <span class="title">LCA</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span> (top[x] != top[y])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (dep[top[x]] &lt; dep[top[y]])</span><br><span class="line">swap(x, y);</span><br><span class="line">x = fa[top[x]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (dep[x] &gt; dep[y])</span><br><span class="line">swap(x, y);</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">n=read(), m=read(), k=read();</span><br><span class="line"><span class="keyword">for</span> (ri i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">e[i].fr = read(), e[i].to = read(), e[i].weight = read();</span><br><span class="line">sort(e + <span class="number">1</span>, e + <span class="number">1</span> + m, cmp);</span><br><span class="line"><span class="keyword">for</span> (ri i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">fa[i] = i, fa[i + n] = i + n;</span><br><span class="line">Ex_Kruskal();</span><br><span class="line"><span class="keyword">int</span> rt = findf(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">memset</span>(fa, <span class="number">0</span>, <span class="keyword">sizeof</span>(fa));</span><br><span class="line">DFS(rt);</span><br><span class="line"><span class="keyword">for</span> (ri i = <span class="number">1</span>; i &lt;= dfn[<span class="number">0</span>]; i++)</span><br><span class="line">top[dfn[i]] = (dfn[i] == son[fa[dfn[i]]]) ? top[fa[dfn[i]]] : dfn[i];</span><br><span class="line"><span class="keyword">for</span> (ri i = <span class="number">1</span>; i &lt;= k; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> x = read(), y = read();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, w[LCA(x, y)]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kurskla重构树 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>关于那些骗分的随机算法</title>
      <link href="/2018/07/28/%E5%85%B3%E4%BA%8E%E9%82%A3%E4%BA%9B%E9%AA%97%E5%88%86%E7%9A%84%E9%9A%8F%E6%9C%BA%E7%AE%97%E6%B3%95/"/>
      <url>/2018/07/28/%E5%85%B3%E4%BA%8E%E9%82%A3%E4%BA%9B%E9%AA%97%E5%88%86%E7%9A%84%E9%9A%8F%E6%9C%BA%E7%AE%97%E6%B3%95/</url>
      <content type="html"><![CDATA[<p>作为一名OIer，我们都会参加各种各样的比赛或者模拟赛，然而并不是每次都能很完美地想到正解，但是打暴力混的那点分又远远不够，怎么办呢？</p><p>于是我在这里简单的讲几种骗分的算法，适用于最优化问题。</p><a id="more"></a><hr><p>这种问题通常是让我们求解某个情景下的最优状态，方法也主要有两种：爬山和模拟退火。</p><h1 id="爬山"><a href="#爬山" class="headerlink" title="爬山"></a>爬山</h1><p>这个算法……名字很奇怪，不过倒是一个贴切的比喻，我们可以把它比喻成一个失忆的攀登者在爬一座云雾缭绕的山，他不知道最高的峰在哪里，只能看清离自己很近的地方，所以他会尽可能往高处爬，爬到他周围的位置都比他目前所在的位置低，他就认为他爬到山顶了。</p><p>然而我们仔细一想，不对啊，这有可能是局部最优，不一定就是全局最优啊。这句话是没错，但是由于单次爬山的复杂度并不高，所以可以多次重复。每次随机选取一个起点，爬到不能爬为止，在多次爬山得到的值中选取最小的那一个，这样就有很大的几率能得到全局最优。<del>实在过不了的调调参就过去了（滑稽</del></p><p>例题：<a href="https://www.luogu.org/problemnew/show/P1337" target="_blank" rel="noopener">Luogu P1337 【JSOI2004】平衡点 / 吊打XXX</a></p><p>这道题大概是一个挺经典的爬山/退火练习题吧，就是找到一个(x,y)，使$\sum ^{n}_{i=1}{\sqrt {(x_i-x)^2+(y_i-y)^2}*w_i}$最小。</p><p>基础思路就是每次随机一个起点，枚举四个方向，如果更优就接受，同时每次减小步数。然后调调参，卡卡精就过去了。</p><p>特别说明：如果不确定需要爬多少次可以尽可能开大，然后利用卡时在超时之前退出。</p><p>以下是代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ri register int</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 1ll&lt;&lt;50</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">2000000</span>+<span class="number">110</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN=<span class="number">50</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps=<span class="number">1e-6</span>;</span><br><span class="line"><span class="function">il <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">char</span> ch=getchar();</span><br><span class="line"><span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(ch==<span class="string">'-'</span>)</span><br><span class="line">f=<span class="number">-1</span>;</span><br><span class="line">ch=getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))</span><br><span class="line">&#123;</span><br><span class="line">x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+ch-<span class="string">'0'</span>;</span><br><span class="line">ch=getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">double</span> ans=inf,X,Y;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">hole</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">double</span> x,y;</span><br><span class="line"><span class="keyword">int</span> weight;</span><br><span class="line">&#125;;</span><br><span class="line">hole A[N];</span><br><span class="line"><span class="function">il <span class="keyword">double</span> <span class="title">dis</span><span class="params">(<span class="keyword">double</span> x1,<span class="keyword">double</span> y1,<span class="keyword">double</span> x2,<span class="keyword">double</span> y2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">sqrt</span>((x1-x2)*(x1-x2)+(y1-y2)*(y1-y2));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">double</span> <span class="title">get_weight</span><span class="params">(<span class="keyword">double</span> x,<span class="keyword">double</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">double</span> ret=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(ri i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">ret+=dis(x,y,A[i].x,A[i].y)*A[i].weight;</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> t=clock();</span><br><span class="line">srand((<span class="keyword">unsigned</span>)time(<span class="literal">NULL</span>));</span><br><span class="line">n=read();</span><br><span class="line"><span class="keyword">for</span>(ri i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lf%lf"</span>,&amp;A[i].x,&amp;A[i].y);</span><br><span class="line">A[i].weight=read();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(ri i=<span class="number">1</span>;i&lt;=<span class="number">5000</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(clock()-t&gt;<span class="number">950000</span>)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">double</span> x=<span class="number">-10000</span>+rand()%<span class="number">20000</span>,y=<span class="number">-10000</span>+rand()%<span class="number">20000</span>;</span><br><span class="line"><span class="keyword">double</span> step=<span class="number">1000</span>,k=get_weight(x,y);</span><br><span class="line"><span class="keyword">while</span>(step&gt;eps)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> xi,yi;</span><br><span class="line"><span class="keyword">for</span>(ri i=<span class="number">1</span>;i&lt;=<span class="number">4</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(i==<span class="number">1</span>)</span><br><span class="line">xi=x+step,yi=y;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(i==<span class="number">2</span>)</span><br><span class="line">xi=x-step,yi=y;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(i==<span class="number">3</span>)</span><br><span class="line">xi=x,yi=y+step;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(i==<span class="number">4</span>)</span><br><span class="line">xi=x,yi=y-step;</span><br><span class="line"><span class="keyword">double</span> now=get_weight(xi,yi);</span><br><span class="line"><span class="keyword">if</span>(now&lt;k)</span><br><span class="line">x=xi,y=yi,k=now;</span><br><span class="line">&#125;</span><br><span class="line">step=step*<span class="number">0.921</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(k&lt;ans)</span><br><span class="line">X=x,Y=y,ans=k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%.3lf %.3lf"</span>,X,Y);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="模拟退火"><a href="#模拟退火" class="headerlink" title="模拟退火"></a>模拟退火</h1><p>就像字面上描述的那样，这个算法是对金属退火的模拟。</p><p>对于这个算法呢，如果说爬山中的那个攀登者是神志清晰的，那么这里面的那个攀登者就喝醉了酒。由于他神志不清，所以有一定的概率会往更低的方向爬，并且随着时间的推移，酒力逐渐消退，这个概率会越来越小。这样就有一定的概率跳出局部最优的陷阱，达到全局最优。</p><p>然而由于并不一定是全局最优，所以与爬山类似，需要做多次（不过好像并不是特别需要调参</p><p>例题：<a href="https://www.luogu.org/problemnew/show/P2503" target="_blank" rel="noopener">Luogu P2503 【HAOI2006】均分数据</a></p><p>这道题其实也比较基础，基本思路就是每次随机一个分组，然后降温过程中每次随机一个元素，将其放入和最小的组里，看结果是否更优。如果更优则接受，反之则以一定概率接受。</p><p>以下是代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ri register int</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sqr(x) ((x)*(x))</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">100000</span>+<span class="number">110</span>;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">1l</span>l&lt;&lt;<span class="number">50</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN=<span class="number">110</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps=<span class="number">1e-6</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> deltaT=<span class="number">0.9</span>;</span><br><span class="line"><span class="function">il <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">'-'</span>)</span><br><span class="line">            f=<span class="number">-1</span>;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))</span><br><span class="line">    &#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+ch-<span class="string">'0'</span>;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">int</span> a[MAXN],bel[MAXN],sum[MAXN];</span><br><span class="line"><span class="keyword">double</span> ave,ans=inf;</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">SimulatedAnnealing</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(sum,<span class="number">0</span>,<span class="keyword">sizeof</span>(sum));</span><br><span class="line">    <span class="keyword">double</span> now=<span class="number">0</span>,T=<span class="number">1926</span>;</span><br><span class="line">    <span class="keyword">for</span>(ri i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        bel[i]=<span class="number">1</span>+rand()%m;</span><br><span class="line">        sum[bel[i]]+=a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(ri i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">        now+=sqr(sum[i]-ave);</span><br><span class="line">    <span class="keyword">while</span>(T&gt;eps)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> P=min_element(sum+<span class="number">1</span>,sum+<span class="number">1</span>+m)-sum;</span><br><span class="line">        <span class="keyword">int</span> X=<span class="number">1</span>+rand()%n;</span><br><span class="line">        <span class="keyword">double</span> pre=now;</span><br><span class="line">        now-=(sqr(sum[bel[X]]-ave)+sqr(sum[P]-ave));</span><br><span class="line">        sum[bel[X]]-=a[X];</span><br><span class="line">        sum[P]+=a[X];</span><br><span class="line">        now+=(sqr(sum[bel[X]]-ave)+sqr(sum[P]-ave));</span><br><span class="line">        <span class="keyword">if</span>(now&lt;pre||(<span class="built_in">exp</span>((now-pre)/T)*RAND_MAX&lt;rand()))</span><br><span class="line">            bel[X]=P;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            now=pre,sum[bel[X]]+=a[X],sum[P]-=a[X];</span><br><span class="line">        T*=deltaT;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(now&lt;ans)</span><br><span class="line">        ans=now;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    srand((<span class="keyword">unsigned</span>)time(<span class="literal">NULL</span>));</span><br><span class="line">    n=read(),m=read();</span><br><span class="line">    <span class="keyword">for</span>(ri i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        a[i]=read();</span><br><span class="line">        ave+=a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    ave/=m;</span><br><span class="line">    <span class="keyword">for</span>(ri i=<span class="number">1</span>;i&lt;=<span class="number">1000</span>;i++)</span><br><span class="line">        SimulatedAnnealing();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%.2lf"</span>,<span class="built_in">sqrt</span>(ans/m));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><p>到这里就基本讲完了，其他的这类算法还有蚁群、遗传等，不过由于不常用，这里就不讲了QwQ</p>]]></content>
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 骗分 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Luogu P3936 Coloring题解</title>
      <link href="/2018/07/26/Luogu%20P3936/"/>
      <url>/2018/07/26/Luogu%20P3936/</url>
      <content type="html"><![CDATA[<p>这道题……作为退火的练习题非常毒瘤，因为这个参是真的不好调。</p><p>但最后终于还是切掉了，于是非常的高兴，决定写个题解纪念一下QwQ</p><a id="more"></a><p>这道题退火的思路似乎还是挺好想的，每次退火随机出一个染色方案，然后在降温过程中每次随机的交换两个色块，如果更优则接受，更新答案，反之则以一定概率接受，多次进行直到找到最优解为止。然后调一调参就A掉了（然而调参调的精分了QwQ</p><p>以下是代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ri register int</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sqr(x) ((x)*(x))</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">100000</span>+<span class="number">110</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">0x7fffffff</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN=<span class="number">110</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps=<span class="number">1e-15</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> deltaT=<span class="number">0.999911</span>;</span><br><span class="line"><span class="function">il <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">'-'</span>)</span><br><span class="line">            f=<span class="number">-1</span>;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))</span><br><span class="line">    &#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+ch-<span class="string">'0'</span>;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n,m,c,ans=inf;</span><br><span class="line"><span class="keyword">int</span> E[MAXN],p[MAXN];</span><br><span class="line"><span class="keyword">int</span> C[MAXN][MAXN],put[MAXN][MAXN];</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">Rand</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1.0</span>*(rand()%<span class="number">100000000</span>)/<span class="number">100000000</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&gt;=ans)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    ans=x;</span><br><span class="line">    <span class="keyword">for</span>(ri i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span>(ri j=<span class="number">1</span>;j&lt;=m;j++)</span><br><span class="line">            put[i][j]=C[i][j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">int</span> <span class="title">get_num</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ret=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(C[x][y]!=C[x][y<span class="number">-1</span>])</span><br><span class="line">        ret++;</span><br><span class="line">    <span class="keyword">if</span>(C[x][y]!=C[x][y+<span class="number">1</span>])</span><br><span class="line">        ret++;</span><br><span class="line">    <span class="keyword">if</span>(C[x][y]!=C[x<span class="number">-1</span>][y])</span><br><span class="line">        ret++;</span><br><span class="line">    <span class="keyword">if</span>(C[x][y]!=C[x+<span class="number">1</span>][y])</span><br><span class="line">        ret++;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">SimulatedAnneal</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> T=<span class="number">24101632</span>;</span><br><span class="line">    <span class="keyword">for</span>(ri i=<span class="number">1</span>;i&lt;=c;i++)</span><br><span class="line">        E[i]=p[i];</span><br><span class="line">    <span class="keyword">for</span>(ri i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span>(ri j=<span class="number">1</span>;j&lt;=m;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> colour=<span class="number">1</span>+rand()%c;</span><br><span class="line">            <span class="keyword">while</span>(!E[colour])</span><br><span class="line">                colour=<span class="number">1</span>+rand()%c;</span><br><span class="line">            C[i][j]=colour,E[colour]--;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">int</span> now=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(ri i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span>(ri j=<span class="number">1</span>;j&lt;=m;j++)</span><br><span class="line">            now+=get_num(i,j);</span><br><span class="line">    <span class="keyword">while</span>(T&gt;eps)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> x1=<span class="number">1</span>+rand()%n,y1=<span class="number">1</span>+rand()%m;</span><br><span class="line">        <span class="keyword">int</span> x2=<span class="number">1</span>+rand()%n,y2=<span class="number">1</span>+rand()%m;</span><br><span class="line">        <span class="keyword">int</span> pre=now;</span><br><span class="line">        now-=(get_num(x1,y1)+get_num(x2,y2));</span><br><span class="line">        swap(C[x1][y1],C[x2][y2]);</span><br><span class="line">        now+=(get_num(x1,y1)+get_num(x2,y2));</span><br><span class="line">        <span class="keyword">if</span>(now&lt;pre||<span class="built_in">exp</span>((pre-now)/T)&gt;Rand())</span><br><span class="line">            update(now);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            now=pre,swap(C[x1][y1],C[x2][y2]);</span><br><span class="line">        T*=deltaT;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    srand((<span class="keyword">unsigned</span>)time(<span class="literal">NULL</span>));</span><br><span class="line">    n=read(),m=read(),c=read();</span><br><span class="line">    <span class="keyword">for</span>(ri i=<span class="number">1</span>;i&lt;=c;i++)</span><br><span class="line">        p[i]=read();</span><br><span class="line">    <span class="keyword">for</span>(ri i=<span class="number">1</span>;i&lt;=<span class="number">50</span>;i++)</span><br><span class="line">        SimulatedAnneal();</span><br><span class="line">    <span class="keyword">for</span>(ri i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(ri j=<span class="number">1</span>;j&lt;=m;j++)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d "</span>,put[i][j]);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很奇怪的就是不开O2优化会RE，我也不知道为什么，反正过了就过了（雾</p>]]></content>
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 模拟退火 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Luogu P3693 琪露诺的冰雪小屋 题解</title>
      <link href="/2018/07/24/Luogu%20P3693/"/>
      <url>/2018/07/24/Luogu%20P3693/</url>
      <content type="html"><![CDATA[<p>超级大模拟，简直写的我头疼，但终于还是A掉了，所以来写一篇题解QwQ</p><a id="more"></a><p>首先，我们不管别的，拿20分再说，然后我们发现20分其实挺好拿的啊，瞎jb搞一搞分就来了。以下是20分核心代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> num;<span class="comment">//这是⑨现在有的冰砖数量</span></span><br><span class="line"><span class="keyword">int</span> frz[MAXN][MAXN];<span class="comment">//frz数组记录地面的冷冻值,如果有冰砖则为inf</span></span><br><span class="line"><span class="function">il <span class="keyword">int</span> <span class="title">Spell_Card</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> dir,<span class="keyword">int</span> s)</span><span class="comment">//弹幕操作，暴力搞就完了</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ret=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(ri i=<span class="number">0</span>;i&lt;=s;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> Xi,Yi;</span><br><span class="line">        <span class="keyword">switch</span>(dir)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>:Xi=x-i,Yi=y;<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:Xi=x-i,Yi=y-i;<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:Xi=x,Yi=y-i;<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:Xi=x+i,Yi=y-i;<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>:Xi=x+i,Yi=y;<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">5</span>:Xi=x+i,Yi=y+i;<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">6</span>:Xi=x,Yi=y+i;<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">7</span>:Xi=x-i,Yi=y+i;<span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(Xi&lt;<span class="number">0</span>||Xi&gt;=n||Yi&lt;<span class="number">0</span>||Yi&gt;=n||frz[Xi][Yi]==inf)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(frz[Xi][Yi]==<span class="number">4</span>)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            frz[Xi][Yi]++;</span><br><span class="line">            ret++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">int</span> <span class="title">Make</span><span class="params">()</span><span class="comment">//做冰砖，直接n*n枚举每一块地面就行了</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ret=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(ri i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="keyword">for</span>(ri j=<span class="number">0</span>;j&lt;n;j++)</span><br><span class="line">            <span class="keyword">if</span>(frz[i][j]==<span class="number">4</span>)</span><br><span class="line">                frz[i][j]=<span class="number">0</span>,ret++,num++;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><p>20分之后，我们会发现30分其实也挺好写的，于是瞎搞一下就又多了10分。以下是30分核心（其实就是PUT_ICE_BLOCK的操作了）<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">Put</span><span class="params">(<span class="keyword">int</span> r,<span class="keyword">int</span> c,<span class="keyword">int</span> h)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(num==<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"CIRNO HAS NO ICE_BLOCK\n"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(vis[r][c][h]||(h&gt;<span class="number">0</span>&amp;&amp;!vis[r<span class="number">-1</span>][c][h]&amp;&amp;!vis[r+<span class="number">1</span>][c][h]&amp;&amp;!vis[r][c<span class="number">-1</span>][h]&amp;&amp;!vis[r][c+<span class="number">1</span>][h]&amp;&amp;!vis[r][c][h<span class="number">-1</span>]&amp;&amp;!vis[r][c][h+<span class="number">1</span>]))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"BAKA CIRNO,CAN'T PUT HERE\n"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(r&lt;Hr||r&gt;Hr+Hx<span class="number">-1</span>||c&lt;Hc||c&gt;Hc+Hy<span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"CIRNO MISSED THE PLACE\n"</span>);</span><br><span class="line">        vis[r][c][h]=<span class="number">1</span>;</span><br><span class="line">        num--;</span><br><span class="line">        <span class="keyword">if</span>(h==<span class="number">0</span>)</span><br><span class="line">            frz[r][c]=inf;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(r&gt;=Hr+<span class="number">1</span>&amp;&amp;r&lt;=Hr+Hx<span class="number">-2</span>&amp;&amp;c&gt;=Hc+<span class="number">1</span>&amp;&amp;c&lt;=Hc+Hy<span class="number">-2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"CIRNO PUT AN ICE_BLOCK INSIDE THE HOUSE\n"</span>);</span><br><span class="line">        vis[r][c][h]=<span class="number">1</span>;</span><br><span class="line">        num--;</span><br><span class="line">        <span class="keyword">if</span>(h==<span class="number">0</span>)</span><br><span class="line">            frz[r][c]=inf;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        vis[r][c][h]=<span class="number">1</span>;</span><br><span class="line">        num--;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"CIRNO SUCCESSFULLY PUT AN ICE_BLOCK,NOW SHE HAS %d ICE_BLOCK(S)\n"</span>,num);</span><br><span class="line">        <span class="keyword">if</span>(h==<span class="number">0</span>)</span><br><span class="line">            frz[r][c]=inf;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>别看我打得长，其实没多大的思维难度，毕竟出题人很仁慈地把位置位于屋内屋外的判定条件都给出来了，直接抄就行了。</p><p>要注意的有两点：</p><ol><li>“可依靠的方块”为上下左右前后六个方向，对没错，上面也可以。</li><li>一定要判定h=0，即冰砖放在地上的情况，要将frz[r][c]修改为inf。<br> 然后就没太大问题了。</li></ol><hr><p>30分之后，我们遇到了第一个难题：如何判断悬空联通块。</p><p>实际上，如果BFS学的比较熟练的几乎不需要思考，在移除方块之后向6个方向做BFS就完了，如果搜到了h=0的方块，就可以保留，如果搜完了还没有遇到h=0的方块，那么这就是一个悬空联通块了，这个时候所有进过队的方块都要删掉，删掉并统计一下就行了。</p><p>以下是50分的核心：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> f[MAXN][MAXN][MAXN];<span class="comment">//每个方块所属的联通块</span></span><br><span class="line"><span class="keyword">int</span> dx[]=&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">-1</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> dy[]=&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> dz[]=&#123;<span class="number">1</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">bool</span> vis[MAXN][MAXN][MAXN];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x,y,z;</span><br><span class="line">&#125;;</span><br><span class="line">node q[MAXN];</span><br><span class="line"><span class="function">il <span class="keyword">bool</span> <span class="title">BFS</span><span class="params">(<span class="keyword">int</span> r,<span class="keyword">int</span> c,<span class="keyword">int</span> h,<span class="keyword">int</span> dir)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    fr=<span class="number">1</span>,tl=<span class="number">0</span>;</span><br><span class="line">    q[<span class="number">1</span>]=(node)&#123;r,c,h&#125;;</span><br><span class="line">    f[r][c][h]=dir;</span><br><span class="line">    <span class="keyword">bool</span> flag=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(tl&lt;fr)</span><br><span class="line">    &#123;</span><br><span class="line">        node u=q[++tl];</span><br><span class="line">        <span class="keyword">if</span>(u.z==<span class="number">0</span>)</span><br><span class="line">            flag=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(ri i=<span class="number">0</span>;i&lt;<span class="number">6</span>;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            node v=(node)&#123;u.x+dx[i],u.y+dy[i],u.z+dz[i]&#125;;</span><br><span class="line">            <span class="keyword">if</span>(vis[v.x][v.y][v.z]&amp;&amp;f[v.x][v.y][v.z]==<span class="number">-1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                q[++fr]=v;</span><br><span class="line">                f[v.x][v.y][v.z]=dir;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!flag)</span><br><span class="line">        <span class="keyword">for</span>(ri i=<span class="number">1</span>;i&lt;=fr;i++)</span><br><span class="line">            vis[q[i].x][q[i].y][q[i].z]=<span class="number">0</span>;<span class="comment">//对悬空联通块的处理</span></span><br><span class="line">    <span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">Remove</span><span class="params">(<span class="keyword">int</span> r,<span class="keyword">int</span> c,<span class="keyword">int</span> h)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!vis[r][c][h])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"BAKA CIRNO,THERE IS NO ICE_BLOCK\n"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        num++,</span><br><span class="line">        vis[r][c][h]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(h==<span class="number">0</span>)</span><br><span class="line">            frz[r][c]=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">memset</span>(f,<span class="number">-1</span>,<span class="keyword">sizeof</span>(f));</span><br><span class="line">        <span class="keyword">int</span> brk=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(ri i=<span class="number">0</span>;i&lt;<span class="number">6</span>;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> R=r+dx[i],C=c+dy[i],H=h+dz[i];</span><br><span class="line">            <span class="keyword">if</span>(f[R][C][H]!=<span class="number">-1</span>||!vis[R][C][H])<span class="comment">//对6个方向做BFS</span></span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(!BFS(R,C,H,i))</span><br><span class="line">                brk+=fr;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"CIRNO REMOVED AN ICE_BLOCK"</span>);</span><br><span class="line">        <span class="keyword">if</span>(brk&gt;<span class="number">0</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">",AND %d BLOCK(S) ARE BROKEN"</span>,brk);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><p>写到这里也许你们会说：这也不是特别难啊，题面又长，还特别水，结果4/5不是一下就打完了吗？然而出题人表示这才刚刚开始呢。</p><p>先来看70分，建造屋顶时没有塌陷与方块掉落，也就是说不用BFS，可是我们注意到之前的BFS改造一下就可以放过来用，于是就可以直接冲90分了。</p><p>以下是90分部分核心：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">il <span class="keyword">bool</span> <span class="title">BFS</span><span class="params">(<span class="keyword">int</span> r,<span class="keyword">int</span> c,<span class="keyword">int</span> h,<span class="keyword">int</span> dir,<span class="keyword">bool</span> last)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    fr=<span class="number">1</span>,tl=<span class="number">0</span>;</span><br><span class="line">    q[<span class="number">1</span>]=(node)&#123;r,c,h&#125;;</span><br><span class="line">    f[r][c][h]=dir;</span><br><span class="line">    <span class="keyword">bool</span> flag=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(tl&lt;fr)</span><br><span class="line">    &#123;</span><br><span class="line">        node u=q[++tl];</span><br><span class="line">        <span class="keyword">if</span>(u.z==<span class="number">0</span>)</span><br><span class="line">            flag=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(ri i=<span class="number">0</span>;i&lt;<span class="number">6</span>;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            node v=(node)&#123;u.x+dx[i],u.y+dy[i],u.z+dz[i]&#125;;</span><br><span class="line">            <span class="keyword">if</span>(vis[v.x][v.y][v.z]&amp;&amp;f[v.x][v.y][v.z]==<span class="number">-1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                q[++fr]=v;</span><br><span class="line">                f[v.x][v.y][v.z]=dir;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!flag)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!last)</span><br><span class="line">            <span class="keyword">for</span>(ri i=<span class="number">1</span>;i&lt;=fr;i++)</span><br><span class="line">                vis[q[i].x][q[i].y][q[i].z]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">for</span>(ri i=<span class="number">1</span>;i&lt;=fr;i++)</span><br><span class="line">                vis[q[i].x][q[i].y][q[i].z]=<span class="number">0</span>,num++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>修改之后的BFS，增加一个last标记，判定是否为MAKE_ROOF时进行的。是，则由于题目条件给出，对悬空联通块中的冰砖进行回收。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bool</span> perfect=<span class="number">1</span>;</span><br><span class="line"><span class="function">il <span class="keyword">int</span> <span class="title">Get_Height</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ret=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(ri i=Hr;i&lt;=Hr+Hx<span class="number">-1</span>;i++)</span><br><span class="line">        <span class="keyword">for</span>(ri j=Hc;j&lt;=Hc+Hy<span class="number">-1</span>;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(i&gt;=Hr+<span class="number">1</span>&amp;&amp;i&lt;=Hr+Hx<span class="number">-2</span>&amp;&amp;j&gt;=Hc+<span class="number">1</span>&amp;&amp;j&lt;=Hc+Hy<span class="number">-2</span>)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">int</span> h=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(ri k=Hm;k;k--)</span><br><span class="line">                <span class="keyword">if</span>(vis[i][j][k])</span><br><span class="line">                &#123;</span><br><span class="line">                    h=k;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            ret=max(ret,h);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> ret+<span class="number">1</span>;</span><br><span class="line">&#125;<span class="comment">//房屋高度</span></span><br><span class="line"><span class="function">il <span class="keyword">int</span> <span class="title">Get_Need</span><span class="params">(<span class="keyword">int</span> h)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ret=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(ri i=Hr;i&lt;=Hr+Hx<span class="number">-1</span>;i++)</span><br><span class="line">        <span class="keyword">for</span>(ri j=Hc;j&lt;=Hc+Hy<span class="number">-1</span>;j++)</span><br><span class="line">            <span class="keyword">if</span>(!vis[i][j][h])</span><br><span class="line">                vis[i][j][h]=<span class="number">1</span>,ret++;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">bool</span> <span class="title">Check_place</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x==Hr||x==Hr+Hx<span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(Hy%<span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(y==(Hc+(Hc+Hy<span class="number">-1</span>))/<span class="number">2</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">if</span>(y==(Hc+(Hc+Hy<span class="number">-1</span>))/<span class="number">2</span>||y==(Hc+(Hc+Hy<span class="number">-1</span>))/<span class="number">2</span>+<span class="number">1</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(y==Hc||y==Hc+Hy<span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(Hx%<span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(x==(Hr+(Hr+Hx<span class="number">-1</span>))/<span class="number">2</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">if</span>(x==(Hr+(Hr+Hx<span class="number">-1</span>))/<span class="number">2</span>||x==(Hr+(Hr+Hx<span class="number">-1</span>))/<span class="number">2</span>+<span class="number">1</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;<span class="comment">//判断一个坐标是否在某面墙的正中间</span></span><br><span class="line"><span class="function">il <span class="keyword">bool</span> <span class="title">Check_Door</span><span class="params">(<span class="keyword">int</span> &amp;x,<span class="keyword">int</span> &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">bool</span> flag=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(ri i=Hr;i&lt;=Hr+Hx<span class="number">-1</span>;i++)</span><br><span class="line">        <span class="keyword">for</span>(ri j=Hc;j&lt;=Hc+Hy<span class="number">-1</span>;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>((i==Hr&amp;&amp;j==Hc)||(i==Hr&amp;&amp;j==Hc+Hy<span class="number">-1</span>)||(i==Hr+Hx<span class="number">-1</span>&amp;&amp;j==Hc)||(i==Hr+Hx<span class="number">-1</span>&amp;&amp;j==Hc+Hy<span class="number">-1</span>)||(i&gt;=Hr+<span class="number">1</span>&amp;&amp;i&lt;=Hr+Hx<span class="number">-2</span>&amp;&amp;j&gt;=Hc+<span class="number">1</span>&amp;&amp;j&lt;=Hc+Hy<span class="number">-2</span>))</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span>(!vis[i][j][<span class="number">0</span>]&amp;&amp;!vis[i][j][<span class="number">1</span>])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>((x==<span class="number">-1</span>&amp;&amp;y==<span class="number">-1</span>)||(!Check_place(x,y)&amp;&amp;Check_place(i,j)))</span><br><span class="line">                    x=i,y=j,flag=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> flag;</span><br><span class="line">&#125;<span class="comment">//判断是否有完整的门</span></span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">Get_door_place</span><span class="params">(<span class="keyword">int</span> &amp;x,<span class="keyword">int</span> &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(ri i=Hr;i&lt;=Hr+Hx<span class="number">-1</span>;i++)</span><br><span class="line">        <span class="keyword">for</span>(ri j=Hc;j&lt;=Hc+Hy<span class="number">-1</span>;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>((i==Hr&amp;&amp;j==Hc)||(i==Hr&amp;&amp;j==Hc+Hy<span class="number">-1</span>)||(i==Hr+Hx<span class="number">-1</span>&amp;&amp;j==Hc)||(i==Hr+Hx<span class="number">-1</span>&amp;&amp;j==Hc+Hy<span class="number">-1</span>)||(i&gt;=Hr+<span class="number">1</span>&amp;&amp;i&lt;=Hr+Hx<span class="number">-2</span>&amp;&amp;j&gt;=Hc+<span class="number">1</span>&amp;&amp;j&lt;=Hc+Hy<span class="number">-2</span>))</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span>(!vis[i][j][<span class="number">0</span>]||!vis[i][j][<span class="number">1</span>])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>((x==<span class="number">-1</span>&amp;&amp;y==<span class="number">-1</span>)||(!Check_place(x,y)&amp;&amp;Check_place(i,j)))</span><br><span class="line">                    x=i,y=j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;<span class="comment">//寻找门的位置</span></span><br><span class="line"><span class="function">il <span class="keyword">int</span> <span class="title">Get_need</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> h)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ret=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(ri i=Hr;i&lt;=Hr+Hx<span class="number">-1</span>;i++)</span><br><span class="line">        <span class="keyword">for</span>(ri j=Hc;j&lt;=Hc+Hy<span class="number">-1</span>;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>((i==Hr&amp;&amp;j==Hc)||(i==Hr&amp;&amp;j==Hc+Hy<span class="number">-1</span>)||(i==Hr+Hx<span class="number">-1</span>&amp;&amp;j==Hc)||(i==Hr+Hx<span class="number">-1</span>&amp;&amp;j==Hc+Hy<span class="number">-1</span>)||(i&gt;=Hr+<span class="number">1</span>&amp;&amp;i&lt;=Hr+Hx<span class="number">-2</span>&amp;&amp;j&gt;=Hc+<span class="number">1</span>&amp;&amp;j&lt;=Hc+Hy<span class="number">-2</span>))</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">for</span>(ri k=(i==x&amp;&amp;j==y)?<span class="number">2</span>:<span class="number">0</span>;k&lt;h;k++)</span><br><span class="line">                <span class="keyword">if</span>(!vis[i][j][k])</span><br><span class="line">                    vis[i][j][k]=<span class="number">1</span>,ret++;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;<span class="comment">//墙上的空缺也是暴力枚举</span></span><br><span class="line"><span class="function">il <span class="keyword">int</span> <span class="title">Check_Corner</span><span class="params">(<span class="keyword">int</span> h)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ret=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(ri i=<span class="number">0</span>;i&lt;h;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!vis[Hr][Hc][i])</span><br><span class="line">            ret++;</span><br><span class="line">        <span class="keyword">if</span>(!vis[Hr][Hc+Hy<span class="number">-1</span>][i])</span><br><span class="line">            ret++;</span><br><span class="line">        <span class="keyword">if</span>(!vis[Hr+Hx<span class="number">-1</span>][Hc][i])</span><br><span class="line">            ret++;</span><br><span class="line">        <span class="keyword">if</span>(!vis[Hr+Hx<span class="number">-1</span>][Hc+Hy<span class="number">-1</span>][i])</span><br><span class="line">            ret++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;<span class="comment">//枚举四个角落寻找空缺</span></span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">Fix</span><span class="params">(<span class="keyword">int</span> h)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">bool</span> door=<span class="number">0</span>,corner=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> x=<span class="number">-1</span>,y=<span class="number">-1</span>;</span><br><span class="line">    door=Check_Door(x,y);<span class="comment">//检查是否有完整的门</span></span><br><span class="line">    <span class="keyword">if</span>(!door)</span><br><span class="line">        Get_door_place(x,y);<span class="comment">//没有完整的门就寻找只需要拆掉一块冰砖的位置</span></span><br><span class="line">    <span class="keyword">int</span> need=Get_need(x,y,h);<span class="comment">//墙上的空缺</span></span><br><span class="line">    <span class="keyword">if</span>(num&lt;need)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"SORRY CIRNO,NOT ENOUGH ICE_BLOCKS TO FIX THE WALL\n"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    num-=need;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"GOOD JOB CIRNO,SUCCESSFULLY BUILT THE HOUSE\n"</span>);</span><br><span class="line">    <span class="keyword">if</span>(!door)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"HOUSE HAS NO DOOR\n"</span>),perfect=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"DOOR IS OK\n"</span>);</span><br><span class="line">    <span class="keyword">if</span>(need&gt;<span class="number">0</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"WALL NEED TO BE FIXED\n"</span>),perfect=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"WALL IS OK\n"</span>);</span><br><span class="line">    need=Check_Corner(h);<span class="comment">//角落的空缺</span></span><br><span class="line">    <span class="keyword">if</span>(need&gt;<span class="number">0</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"CORNER NEED TO BE FIXED\n"</span>),perfect=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"CORNER IS OK\n"</span>);</span><br><span class="line">    <span class="keyword">if</span>(need&gt;num)</span><br><span class="line">        num=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        num-=need;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"CIRNO FINALLY HAS %d ICE_BLOCK(S)\n"</span>,num);</span><br><span class="line">    <span class="keyword">if</span>(perfect)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"CIRNO IS PERFECT!\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">Remove_Blocks</span><span class="params">(<span class="keyword">int</span> h)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(f,<span class="number">-1</span>,<span class="keyword">sizeof</span>(f));</span><br><span class="line">    <span class="keyword">if</span>(!BFS(Hr,Hc,h,<span class="number">0</span>,<span class="number">1</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"SORRY CIRNO,HOUSE IS BROKEN WHEN REMOVING BLOCKS\n"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;<span class="comment">//优先判断屋顶塌陷的情况</span></span><br><span class="line">    <span class="keyword">int</span> dir=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(ri i=Hr;i&lt;=Hr+Hx<span class="number">-1</span>;i++)</span><br><span class="line">        <span class="keyword">for</span>(ri j=Hc;j&lt;=Hc+Hy<span class="number">-1</span>;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(i&gt;=Hr+<span class="number">1</span>&amp;&amp;i&lt;=Hr+Hx<span class="number">-2</span>&amp;&amp;j&gt;=Hc+<span class="number">1</span>&amp;&amp;j&lt;=Hc+Hy<span class="number">-2</span>)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">for</span>(ri k=<span class="number">0</span>;k&lt;h;k++)</span><br><span class="line">                <span class="keyword">if</span>(vis[i][j][k]&amp;&amp;f[i][j][k]==<span class="number">-1</span>)</span><br><span class="line">                    BFS(i,j,k,dir++,<span class="number">1</span>);</span><br><span class="line">        &#125;<span class="comment">//回收墙上的悬空联通块</span></span><br><span class="line">    Fix(h);<span class="comment">//修复</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">Make_Roof</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> h=Get_Height();<span class="comment">//获取屋顶高度</span></span><br><span class="line">    <span class="keyword">int</span> need=Get_Need(h);<span class="comment">//获取建造屋顶所需数量</span></span><br><span class="line">    <span class="keyword">if</span>(num&lt;need)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"SORRY CIRNO,NOT ENOUGH ICE_BLOCK(S) TO MAKE ROOF\n"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;\\砖块不够</span><br><span class="line">    <span class="keyword">int</span> S=(Hx<span class="number">-2</span>)*(Hy<span class="number">-2</span>)*h;<span class="comment">//计算内部空间</span></span><br><span class="line">    <span class="keyword">if</span>(h&lt;<span class="number">2</span>||S&lt;<span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"SORRY CIRNO,HOUSE IS TOO SMALL\n"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;<span class="comment">//空间不足</span></span><br><span class="line">    num-=need;</span><br><span class="line">    <span class="keyword">int</span> num1=<span class="number">0</span>,num2=<span class="number">0</span>;<span class="comment">//num1--&gt;屋内|num2--&gt;屋外</span></span><br><span class="line">    <span class="keyword">for</span>(ri i=Hr+<span class="number">1</span>;i&lt;=Hr+Hx<span class="number">-2</span>;i++)</span><br><span class="line">        <span class="keyword">for</span>(ri j=Hc+<span class="number">1</span>;j&lt;=Hc+Hy<span class="number">-2</span>;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(ri k=<span class="number">0</span>;k&lt;h;k++)</span><br><span class="line">                <span class="keyword">if</span>(vis[i][j][k])</span><br><span class="line">                    vis[i][j][k]=<span class="number">0</span>,num1++,num++,perfect=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(ri k=h+<span class="number">1</span>;k&lt;Hm;k++)</span><br><span class="line">                <span class="keyword">if</span>(vis[i][j][k])</span><br><span class="line">                    vis[i][j][k]=<span class="number">0</span>,num2++,num++,perfect=<span class="number">0</span>;<span class="comment">//注意,这里是一个大坑。</span></span><br><span class="line">        &#125;<span class="comment">//回收屋内冰砖</span></span><br><span class="line">    <span class="keyword">for</span>(ri i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="keyword">for</span>(ri j=<span class="number">0</span>;j&lt;n;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(i&gt;=Hr&amp;&amp;i&lt;=Hr+Hx<span class="number">-1</span>&amp;&amp;j&gt;=Hc&amp;&amp;j&lt;=Hc+Hy<span class="number">-1</span>)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">for</span>(ri k=<span class="number">0</span>;k&lt;Hm;k++)</span><br><span class="line">                <span class="keyword">if</span>(vis[i][j][k])</span><br><span class="line">                    vis[i][j][k]=<span class="number">0</span>,num2++,num++,perfect=<span class="number">0</span>;</span><br><span class="line">        &#125;<span class="comment">//回收屋外冰砖</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d ICE_BLOCK(S) INSIDE THE HOUSE NEED TO BE REMOVED\n"</span>,num1);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d ICE_BLOCK(S) OUTSIDE THE HOUSE NEED TO BE REMOVED\n"</span>,num2);</span><br><span class="line">    Remove_Blocks(h);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这样大概就有90-95分了，要注意的是封上屋顶后，高于h的冰砖也算是屋外冰砖了。</p><hr><p>然后我们会发现第二组数据非常的奇怪，墙壁上没有空缺标准输出却有<code>WALL NEED TO BE FIXED</code>，而本有空缺的角落却输出了<code>CORNER IS OK</code>。怎么回事呢？数据有问题吗？不是，如果再回去仔细读题会发现题目对墙壁有残缺的定义是“在屋内能看到缺口”，而#2的情况中，门被开在了角落旁边，这样角落的空缺就能被看见了。</p><p>那么怎么办？只判定门的位置是否在中间的方法肯定不行了，单独打特判的话绝对会疯掉，毕竟我不想再像出题人那样为10分多打200行。于是我想到了对每个可能作为门的位置进行估价，选取估价较高的位置作为门。</p><p>以下是核心部分：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">il <span class="keyword">bool</span> <span class="title">Mid</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x==Hr||x==Hr+Hx<span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(Hy%<span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(y==(Hc+(Hc+Hy<span class="number">-1</span>))/<span class="number">2</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">if</span>(y==(Hc+(Hc+Hy<span class="number">-1</span>))/<span class="number">2</span>||y==(Hc+(Hc+Hy<span class="number">-1</span>))/<span class="number">2</span>+<span class="number">1</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(y==Hc||y==Hc+Hy<span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(Hx%<span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(x==(Hr+(Hr+Hx<span class="number">-1</span>))/<span class="number">2</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">if</span>(x==(Hr+(Hr+Hx<span class="number">-1</span>))/<span class="number">2</span>||x==(Hr+(Hr+Hx<span class="number">-1</span>))/<span class="number">2</span>+<span class="number">1</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;<span class="comment">//这就是之前的Check_door_placeQwQ</span></span><br><span class="line"><span class="function">il <span class="keyword">int</span> <span class="title">Corner</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">bool</span> last)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ret=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>((x==Hr&amp;&amp;y==Hc+<span class="number">1</span>)||(x==Hr+<span class="number">1</span>&amp;&amp;y==Hc))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(ri i=<span class="number">0</span>;i&lt;<span class="number">2</span>;i++)</span><br><span class="line">            <span class="keyword">if</span>(!vis[Hr][Hc][i])</span><br><span class="line">            &#123;</span><br><span class="line">                ret++;</span><br><span class="line">                <span class="keyword">if</span>(last)</span><br><span class="line">                    vis[Hr][Hc][i]=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>((x==Hr+Hx<span class="number">-1</span>&amp;&amp;y==Hc+<span class="number">1</span>)||(x==Hr+Hc<span class="number">-2</span>&amp;&amp;y==Hc))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(ri i=<span class="number">0</span>;i&lt;<span class="number">2</span>;i++)</span><br><span class="line">            <span class="keyword">if</span>(!vis[Hr+Hx<span class="number">-1</span>][Hc][i])</span><br><span class="line">            &#123;</span><br><span class="line">                ret++;</span><br><span class="line">                <span class="keyword">if</span>(last)</span><br><span class="line">                    vis[Hr+Hx<span class="number">-1</span>][Hc][i]=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>((x==Hr&amp;&amp;y==Hc+Hy<span class="number">-2</span>)||(x==Hr+<span class="number">1</span>&amp;&amp;y==Hc+Hy<span class="number">-1</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(ri i=<span class="number">0</span>;i&lt;<span class="number">2</span>;i++)</span><br><span class="line">            <span class="keyword">if</span>(!vis[Hr][Hc+Hy<span class="number">-1</span>][i])</span><br><span class="line">            &#123;</span><br><span class="line">                ret++;</span><br><span class="line">                <span class="keyword">if</span>(last)</span><br><span class="line">                    vis[Hr][Hc+Hy<span class="number">-1</span>][i]=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>((x==Hr+Hx<span class="number">-1</span>&amp;&amp;y==Hc+Hy<span class="number">-2</span>)||(x==Hr+Hc<span class="number">-2</span>&amp;&amp;y==Hc+Hy<span class="number">-1</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(ri i=<span class="number">0</span>;i&lt;<span class="number">2</span>;i++)</span><br><span class="line">            <span class="keyword">if</span>(!vis[Hr+Hx<span class="number">-1</span>][Hc+Hy<span class="number">-1</span>][i])</span><br><span class="line">            &#123;</span><br><span class="line">                ret++;</span><br><span class="line">                <span class="keyword">if</span>(last)</span><br><span class="line">                    vis[Hr+Hx<span class="number">-1</span>][Hc+Hy<span class="number">-1</span>][i]=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;<span class="comment">//也是暴力，懒的解释了QwQ</span></span><br><span class="line"><span class="function">il <span class="keyword">int</span> <span class="title">Evaluate</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ret=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(ri i=<span class="number">0</span>;i&lt;<span class="number">2</span>;i++)</span><br><span class="line">        <span class="keyword">if</span>(!vis[x][y][i])</span><br><span class="line">            ret+=<span class="number">1000</span>;<span class="comment">//由于我们优先选择更完整的空隙作为门，所以完整度的估价最高</span></span><br><span class="line">    <span class="keyword">if</span>(Mid(x,y))</span><br><span class="line">        ret+=<span class="number">100</span>;<span class="comment">//中间的位置仅次于完整度</span></span><br><span class="line">    <span class="keyword">int</span> A=Corner(x,y,<span class="number">0</span>);<span class="comment">//获取当前位置是否在角落旁边和与其相邻的角落有多少空缺</span></span><br><span class="line">    ret+=((<span class="number">5</span>-A)*<span class="number">10</span>)<span class="comment">//空缺越少估价越高;</span></span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">bool</span> <span class="title">Check_Door</span><span class="params">(<span class="keyword">int</span> &amp;x,<span class="keyword">int</span> &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">bool</span> flag=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(ri i=Hr;i&lt;=Hr+Hx<span class="number">-1</span>;i++)</span><br><span class="line">        <span class="keyword">for</span>(ri j=Hc;j&lt;=Hc+Hy<span class="number">-1</span>;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>((i==Hr&amp;&amp;j==Hc)||(i==Hr&amp;&amp;j==Hc+Hy<span class="number">-1</span>)||(i==Hr+Hx<span class="number">-1</span>&amp;&amp;j==Hc)||(i==Hr+Hx<span class="number">-1</span>&amp;&amp;j==Hc+Hy<span class="number">-1</span>)||(i&gt;=Hr+<span class="number">1</span>&amp;&amp;i&lt;=Hr+Hx<span class="number">-2</span>&amp;&amp;j&gt;=Hc+<span class="number">1</span>&amp;&amp;j&lt;=Hc+Hy<span class="number">-2</span>))</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span>(!vis[i][j][<span class="number">0</span>]||!vis[i][j][<span class="number">1</span>])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>((x==<span class="number">-1</span>&amp;&amp;y==<span class="number">-1</span>)||Evaluate(i,j)&gt;Evaluate(x,y))</span><br><span class="line">                    x=i,y=j,flag=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">int</span> E=Evaluate(x,y);</span><br><span class="line">    <span class="keyword">if</span>(flag)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">if</span>((E/<span class="number">1000</span>)%<span class="number">10</span>==<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;<span class="comment">//找千位数就可以知道是否完整了</span></span><br><span class="line">    <span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">int</span> <span class="title">Get_need</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> h)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ret=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(ri i=Hr;i&lt;=Hr+Hx<span class="number">-1</span>;i++)</span><br><span class="line">        <span class="keyword">for</span>(ri j=Hc;j&lt;=Hc+Hy<span class="number">-1</span>;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>((i==Hr&amp;&amp;j==Hc)||(i==Hr&amp;&amp;j==Hc+Hy<span class="number">-1</span>)||(i==Hr+Hx<span class="number">-1</span>&amp;&amp;j==Hc)||(i==Hr+Hx<span class="number">-1</span>&amp;&amp;j==Hc+Hy<span class="number">-1</span>)||(i&gt;=Hr+<span class="number">1</span>&amp;&amp;i&lt;=Hr+Hx<span class="number">-2</span>&amp;&amp;j&gt;=Hc+<span class="number">1</span>&amp;&amp;j&lt;=Hc+Hy<span class="number">-2</span>))</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">for</span>(ri k=(i==x&amp;&amp;j==y)?<span class="number">2</span>:<span class="number">0</span>;k&lt;h;k++)</span><br><span class="line">                <span class="keyword">if</span>(!vis[i][j][k])</span><br><span class="line">                    vis[i][j][k]=<span class="number">1</span>,ret++;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">int</span> E=Evaluate(x,y);</span><br><span class="line">    ret+=(<span class="number">5</span>-(E/<span class="number">10</span>)%<span class="number">10</span>);</span><br><span class="line">    Corner(x,y,<span class="number">1</span>);<span class="comment">//如果角落有空缺也要补上</span></span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然后就可以AC了，实际上最后10分也不需要200+排对吧QwQ</p><p>以下是完整代码（504排，比出题人写的题解大概少了60排吧，并不压行QwQ）：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ri register int</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">2000000</span>+<span class="number">110</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">0x7fffffff</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN=<span class="number">50</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps=<span class="number">1e-8</span>;</span><br><span class="line"><span class="function">il <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">'-'</span>)</span><br><span class="line">            f=<span class="number">-1</span>;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))</span><br><span class="line">    &#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+ch-<span class="string">'0'</span>;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">Getstr</span><span class="params">(<span class="keyword">char</span> ch[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> c=getchar();</span><br><span class="line">    <span class="keyword">int</span> len=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span>(c&lt;<span class="string">'A'</span>||c&gt;<span class="string">'Z'</span>)</span><br><span class="line">        c=getchar();</span><br><span class="line">    <span class="keyword">while</span>((c&gt;=<span class="string">'A'</span>&amp;&amp;c&lt;=<span class="string">'Z'</span>)||c==<span class="string">'_'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ch[++len]=c;</span><br><span class="line">        c=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n,m,num,fr,tl;</span><br><span class="line"><span class="keyword">int</span> Hm,Hr,Hc,Hx,Hy;</span><br><span class="line"><span class="keyword">int</span> frz[MAXN][MAXN],f[MAXN][MAXN][MAXN];</span><br><span class="line"><span class="keyword">int</span> dx[]=&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">-1</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> dy[]=&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> dz[]=&#123;<span class="number">1</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">bool</span> perfect=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">bool</span> vis[MAXN][MAXN][MAXN];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x,y,z;</span><br><span class="line">&#125;;</span><br><span class="line">node q[MAXN];</span><br><span class="line"><span class="function">il <span class="keyword">int</span> <span class="title">Spell_Card</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> dir,<span class="keyword">int</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ret=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(ri i=<span class="number">0</span>;i&lt;=s;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> Xi,Yi;</span><br><span class="line">        <span class="keyword">switch</span>(dir)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>:Xi=x-i,Yi=y;<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:Xi=x-i,Yi=y-i;<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:Xi=x,Yi=y-i;<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:Xi=x+i,Yi=y-i;<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>:Xi=x+i,Yi=y;<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">5</span>:Xi=x+i,Yi=y+i;<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">6</span>:Xi=x,Yi=y+i;<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">7</span>:Xi=x-i,Yi=y+i;<span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(Xi&lt;<span class="number">0</span>||Xi&gt;=n||Yi&lt;<span class="number">0</span>||Yi&gt;=n||frz[Xi][Yi]==inf)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(frz[Xi][Yi]==<span class="number">4</span>)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            frz[Xi][Yi]++;</span><br><span class="line">            ret++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">int</span> <span class="title">Make</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ret=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(ri i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="keyword">for</span>(ri j=<span class="number">0</span>;j&lt;n;j++)</span><br><span class="line">            <span class="keyword">if</span>(frz[i][j]==<span class="number">4</span>)</span><br><span class="line">                frz[i][j]=<span class="number">0</span>,ret++,num++;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">Put</span><span class="params">(<span class="keyword">int</span> r,<span class="keyword">int</span> c,<span class="keyword">int</span> h)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(num==<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"CIRNO HAS NO ICE_BLOCK\n"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(vis[r][c][h]||(h&gt;<span class="number">0</span>&amp;&amp;!vis[r<span class="number">-1</span>][c][h]&amp;&amp;!vis[r+<span class="number">1</span>][c][h]&amp;&amp;!vis[r][c<span class="number">-1</span>][h]&amp;&amp;!vis[r][c+<span class="number">1</span>][h]&amp;&amp;!vis[r][c][h<span class="number">-1</span>]&amp;&amp;!vis[r][c][h+<span class="number">1</span>]))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"BAKA CIRNO,CAN'T PUT HERE\n"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(r&lt;Hr||r&gt;Hr+Hx<span class="number">-1</span>||c&lt;Hc||c&gt;Hc+Hy<span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"CIRNO MISSED THE PLACE\n"</span>);</span><br><span class="line">        vis[r][c][h]=<span class="number">1</span>;</span><br><span class="line">        num--;</span><br><span class="line">        <span class="keyword">if</span>(h==<span class="number">0</span>)</span><br><span class="line">            frz[r][c]=inf;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(r&gt;=Hr+<span class="number">1</span>&amp;&amp;r&lt;=Hr+Hx<span class="number">-2</span>&amp;&amp;c&gt;=Hc+<span class="number">1</span>&amp;&amp;c&lt;=Hc+Hy<span class="number">-2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"CIRNO PUT AN ICE_BLOCK INSIDE THE HOUSE\n"</span>);</span><br><span class="line">        vis[r][c][h]=<span class="number">1</span>;</span><br><span class="line">        num--;</span><br><span class="line">        <span class="keyword">if</span>(h==<span class="number">0</span>)</span><br><span class="line">            frz[r][c]=inf;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        vis[r][c][h]=<span class="number">1</span>;</span><br><span class="line">        num--;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"CIRNO SUCCESSFULLY PUT AN ICE_BLOCK,NOW SHE HAS %d ICE_BLOCK(S)\n"</span>,num);</span><br><span class="line">        <span class="keyword">if</span>(h==<span class="number">0</span>)</span><br><span class="line">            frz[r][c]=inf;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">bool</span> <span class="title">BFS</span><span class="params">(<span class="keyword">int</span> r,<span class="keyword">int</span> c,<span class="keyword">int</span> h,<span class="keyword">int</span> dir,<span class="keyword">bool</span> last)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    fr=<span class="number">1</span>,tl=<span class="number">0</span>;</span><br><span class="line">    q[<span class="number">1</span>]=(node)&#123;r,c,h&#125;;</span><br><span class="line">    f[r][c][h]=dir;</span><br><span class="line">    <span class="keyword">bool</span> flag=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(tl&lt;fr)</span><br><span class="line">    &#123;</span><br><span class="line">        node u=q[++tl];</span><br><span class="line">        <span class="keyword">if</span>(u.z==<span class="number">0</span>)</span><br><span class="line">            flag=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(ri i=<span class="number">0</span>;i&lt;<span class="number">6</span>;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            node v=(node)&#123;u.x+dx[i],u.y+dy[i],u.z+dz[i]&#125;;</span><br><span class="line">            <span class="keyword">if</span>(vis[v.x][v.y][v.z]&amp;&amp;f[v.x][v.y][v.z]==<span class="number">-1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                q[++fr]=v;</span><br><span class="line">                f[v.x][v.y][v.z]=dir;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!flag)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!last)</span><br><span class="line">            <span class="keyword">for</span>(ri i=<span class="number">1</span>;i&lt;=fr;i++)</span><br><span class="line">                vis[q[i].x][q[i].y][q[i].z]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">for</span>(ri i=<span class="number">1</span>;i&lt;=fr;i++)</span><br><span class="line">                vis[q[i].x][q[i].y][q[i].z]=<span class="number">0</span>,num++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">Remove</span><span class="params">(<span class="keyword">int</span> r,<span class="keyword">int</span> c,<span class="keyword">int</span> h)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!vis[r][c][h])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"BAKA CIRNO,THERE IS NO ICE_BLOCK\n"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        num++,</span><br><span class="line">        vis[r][c][h]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(h==<span class="number">0</span>)</span><br><span class="line">            frz[r][c]=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">memset</span>(f,<span class="number">-1</span>,<span class="keyword">sizeof</span>(f));</span><br><span class="line">        <span class="keyword">int</span> brk=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(ri i=<span class="number">0</span>;i&lt;<span class="number">6</span>;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> R=r+dx[i],C=c+dy[i],H=h+dz[i];</span><br><span class="line">            <span class="keyword">if</span>(f[R][C][H]!=<span class="number">-1</span>||!vis[R][C][H])</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(!BFS(R,C,H,i,<span class="number">0</span>))</span><br><span class="line">                brk+=fr;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"CIRNO REMOVED AN ICE_BLOCK"</span>);</span><br><span class="line">        <span class="keyword">if</span>(brk&gt;<span class="number">0</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">",AND %d BLOCK(S) ARE BROKEN"</span>,brk);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">int</span> <span class="title">Get_Height</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ret=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(ri i=Hr;i&lt;=Hr+Hx<span class="number">-1</span>;i++)</span><br><span class="line">        <span class="keyword">for</span>(ri j=Hc;j&lt;=Hc+Hy<span class="number">-1</span>;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(i&gt;=Hr+<span class="number">1</span>&amp;&amp;i&lt;=Hr+Hx<span class="number">-2</span>&amp;&amp;j&gt;=Hc+<span class="number">1</span>&amp;&amp;j&lt;=Hc+Hy<span class="number">-2</span>)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">int</span> h=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(ri k=Hm;k;k--)</span><br><span class="line">                <span class="keyword">if</span>(vis[i][j][k])</span><br><span class="line">                &#123;</span><br><span class="line">                    h=k;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            ret=max(ret,h);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> ret+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">int</span> <span class="title">Get_Need</span><span class="params">(<span class="keyword">int</span> h)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ret=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(ri i=Hr;i&lt;=Hr+Hx<span class="number">-1</span>;i++)</span><br><span class="line">        <span class="keyword">for</span>(ri j=Hc;j&lt;=Hc+Hy<span class="number">-1</span>;j++)</span><br><span class="line">            <span class="keyword">if</span>(!vis[i][j][h])</span><br><span class="line">                vis[i][j][h]=<span class="number">1</span>,ret++;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">bool</span> <span class="title">Mid</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x==Hr||x==Hr+Hx<span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(Hy%<span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(y==(Hc+(Hc+Hy<span class="number">-1</span>))/<span class="number">2</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">if</span>(y==(Hc+(Hc+Hy<span class="number">-1</span>))/<span class="number">2</span>||y==(Hc+(Hc+Hy<span class="number">-1</span>))/<span class="number">2</span>+<span class="number">1</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(y==Hc||y==Hc+Hy<span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(Hx%<span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(x==(Hr+(Hr+Hx<span class="number">-1</span>))/<span class="number">2</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">if</span>(x==(Hr+(Hr+Hx<span class="number">-1</span>))/<span class="number">2</span>||x==(Hr+(Hr+Hx<span class="number">-1</span>))/<span class="number">2</span>+<span class="number">1</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">int</span> <span class="title">Corner</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">bool</span> last)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ret=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>((x==Hr&amp;&amp;y==Hc+<span class="number">1</span>)||(x==Hr+<span class="number">1</span>&amp;&amp;y==Hc))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(ri i=<span class="number">0</span>;i&lt;<span class="number">2</span>;i++)</span><br><span class="line">            <span class="keyword">if</span>(!vis[Hr][Hc][i])</span><br><span class="line">            &#123;</span><br><span class="line">                ret++;</span><br><span class="line">                <span class="keyword">if</span>(last)</span><br><span class="line">                    vis[Hr][Hc][i]=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>((x==Hr+Hx<span class="number">-1</span>&amp;&amp;y==Hc+<span class="number">1</span>)||(x==Hr+Hc<span class="number">-2</span>&amp;&amp;y==Hc))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(ri i=<span class="number">0</span>;i&lt;<span class="number">2</span>;i++)</span><br><span class="line">            <span class="keyword">if</span>(!vis[Hr+Hx<span class="number">-1</span>][Hc][i])</span><br><span class="line">            &#123;</span><br><span class="line">                ret++;</span><br><span class="line">                <span class="keyword">if</span>(last)</span><br><span class="line">                    vis[Hr+Hx<span class="number">-1</span>][Hc][i]=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>((x==Hr&amp;&amp;y==Hc+Hy<span class="number">-2</span>)||(x==Hr+<span class="number">1</span>&amp;&amp;y==Hc+Hy<span class="number">-1</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(ri i=<span class="number">0</span>;i&lt;<span class="number">2</span>;i++)</span><br><span class="line">            <span class="keyword">if</span>(!vis[Hr][Hc+Hy<span class="number">-1</span>][i])</span><br><span class="line">            &#123;</span><br><span class="line">                ret++;</span><br><span class="line">                <span class="keyword">if</span>(last)</span><br><span class="line">                    vis[Hr][Hc+Hy<span class="number">-1</span>][i]=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>((x==Hr+Hx<span class="number">-1</span>&amp;&amp;y==Hc+Hy<span class="number">-2</span>)||(x==Hr+Hc<span class="number">-2</span>&amp;&amp;y==Hc+Hy<span class="number">-1</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(ri i=<span class="number">0</span>;i&lt;<span class="number">2</span>;i++)</span><br><span class="line">            <span class="keyword">if</span>(!vis[Hr+Hx<span class="number">-1</span>][Hc+Hy<span class="number">-1</span>][i])</span><br><span class="line">            &#123;</span><br><span class="line">                ret++;</span><br><span class="line">                <span class="keyword">if</span>(last)</span><br><span class="line">                    vis[Hr+Hx<span class="number">-1</span>][Hc+Hy<span class="number">-1</span>][i]=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">int</span> <span class="title">Evaluate</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ret=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(ri i=<span class="number">0</span>;i&lt;<span class="number">2</span>;i++)</span><br><span class="line">        <span class="keyword">if</span>(!vis[x][y][i])</span><br><span class="line">            ret+=<span class="number">1000</span>;</span><br><span class="line">    <span class="keyword">if</span>(Mid(x,y))</span><br><span class="line">        ret+=<span class="number">100</span>;</span><br><span class="line">    <span class="keyword">int</span> A=Corner(x,y,<span class="number">0</span>);</span><br><span class="line">    ret+=((<span class="number">5</span>-A)*<span class="number">10</span>);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">bool</span> <span class="title">Check_Door</span><span class="params">(<span class="keyword">int</span> &amp;x,<span class="keyword">int</span> &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">bool</span> flag=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(ri i=Hr;i&lt;=Hr+Hx<span class="number">-1</span>;i++)</span><br><span class="line">        <span class="keyword">for</span>(ri j=Hc;j&lt;=Hc+Hy<span class="number">-1</span>;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>((i==Hr&amp;&amp;j==Hc)||(i==Hr&amp;&amp;j==Hc+Hy<span class="number">-1</span>)||(i==Hr+Hx<span class="number">-1</span>&amp;&amp;j==Hc)||(i==Hr+Hx<span class="number">-1</span>&amp;&amp;j==Hc+Hy<span class="number">-1</span>)||(i&gt;=Hr+<span class="number">1</span>&amp;&amp;i&lt;=Hr+Hx<span class="number">-2</span>&amp;&amp;j&gt;=Hc+<span class="number">1</span>&amp;&amp;j&lt;=Hc+Hy<span class="number">-2</span>))</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span>(!vis[i][j][<span class="number">0</span>]||!vis[i][j][<span class="number">1</span>])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>((x==<span class="number">-1</span>&amp;&amp;y==<span class="number">-1</span>)||Evaluate(i,j)&gt;Evaluate(x,y))</span><br><span class="line">                    x=i,y=j,flag=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">int</span> E=Evaluate(x,y);</span><br><span class="line">    <span class="keyword">if</span>(flag)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">if</span>((E/<span class="number">1000</span>)%<span class="number">10</span>==<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">int</span> <span class="title">Get_need</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> h)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ret=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(ri i=Hr;i&lt;=Hr+Hx<span class="number">-1</span>;i++)</span><br><span class="line">        <span class="keyword">for</span>(ri j=Hc;j&lt;=Hc+Hy<span class="number">-1</span>;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>((i==Hr&amp;&amp;j==Hc)||(i==Hr&amp;&amp;j==Hc+Hy<span class="number">-1</span>)||(i==Hr+Hx<span class="number">-1</span>&amp;&amp;j==Hc)||(i==Hr+Hx<span class="number">-1</span>&amp;&amp;j==Hc+Hy<span class="number">-1</span>)||(i&gt;=Hr+<span class="number">1</span>&amp;&amp;i&lt;=Hr+Hx<span class="number">-2</span>&amp;&amp;j&gt;=Hc+<span class="number">1</span>&amp;&amp;j&lt;=Hc+Hy<span class="number">-2</span>))</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">for</span>(ri k=(i==x&amp;&amp;j==y)?<span class="number">2</span>:<span class="number">0</span>;k&lt;h;k++)</span><br><span class="line">                <span class="keyword">if</span>(!vis[i][j][k])</span><br><span class="line">                    vis[i][j][k]=<span class="number">1</span>,ret++;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">int</span> E=Evaluate(x,y);</span><br><span class="line">    ret+=(<span class="number">5</span>-(E/<span class="number">10</span>)%<span class="number">10</span>);</span><br><span class="line">    Corner(x,y,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">int</span> <span class="title">Check_Corner</span><span class="params">(<span class="keyword">int</span> h)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ret=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(ri i=<span class="number">0</span>;i&lt;h;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!vis[Hr][Hc][i])</span><br><span class="line">            ret++;</span><br><span class="line">        <span class="keyword">if</span>(!vis[Hr][Hc+Hy<span class="number">-1</span>][i])</span><br><span class="line">            ret++;</span><br><span class="line">        <span class="keyword">if</span>(!vis[Hr+Hx<span class="number">-1</span>][Hc][i])</span><br><span class="line">            ret++;</span><br><span class="line">        <span class="keyword">if</span>(!vis[Hr+Hx<span class="number">-1</span>][Hc+Hy<span class="number">-1</span>][i])</span><br><span class="line">            ret++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">Fix</span><span class="params">(<span class="keyword">int</span> h)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">bool</span> door=<span class="number">0</span>,corner=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> x=<span class="number">-1</span>,y=<span class="number">-1</span>;</span><br><span class="line">    door=Check_Door(x,y);</span><br><span class="line">    <span class="keyword">if</span>(x!=<span class="number">-1</span>&amp;&amp;y!=<span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">int</span> E=Evaluate(x,y);</span><br><span class="line">    num+=(<span class="number">2</span>-(E/<span class="number">1000</span>)%<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    num+=<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">int</span> need=Get_need(x,y,h);</span><br><span class="line">    <span class="keyword">if</span>(num&lt;need)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"SORRY CIRNO,NOT ENOUGH ICE_BLOCKS TO FIX THE WALL\n"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    num-=need;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"GOOD JOB CIRNO,SUCCESSFULLY BUILT THE HOUSE\n"</span>);</span><br><span class="line">    <span class="keyword">if</span>(!door)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"HOUSE HAS NO DOOR\n"</span>),perfect=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"DOOR IS OK\n"</span>);</span><br><span class="line">    <span class="keyword">if</span>(need&gt;<span class="number">0</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"WALL NEED TO BE FIXED\n"</span>),perfect=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"WALL IS OK\n"</span>);</span><br><span class="line">    need=Check_Corner(h);</span><br><span class="line">    <span class="keyword">if</span>(need&gt;<span class="number">0</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"CORNER NEED TO BE FIXED\n"</span>),perfect=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"CORNER IS OK\n"</span>);</span><br><span class="line">    <span class="keyword">if</span>(need&gt;num)</span><br><span class="line">        num=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        num-=need;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"CIRNO FINALLY HAS %d ICE_BLOCK(S)\n"</span>,num);</span><br><span class="line">    <span class="keyword">if</span>(perfect)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"CIRNO IS PERFECT!\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">Remove_Blocks</span><span class="params">(<span class="keyword">int</span> h)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(f,<span class="number">-1</span>,<span class="keyword">sizeof</span>(f));</span><br><span class="line">    <span class="keyword">if</span>(!BFS(Hr,Hc,h,<span class="number">0</span>,<span class="number">1</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"SORRY CIRNO,HOUSE IS BROKEN WHEN REMOVING BLOCKS\n"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> dir=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(ri i=Hr;i&lt;=Hr+Hx<span class="number">-1</span>;i++)</span><br><span class="line">        <span class="keyword">for</span>(ri j=Hc;j&lt;=Hc+Hy<span class="number">-1</span>;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(i&gt;=Hr+<span class="number">1</span>&amp;&amp;i&lt;=Hr+Hx<span class="number">-2</span>&amp;&amp;j&gt;=Hc+<span class="number">1</span>&amp;&amp;j&lt;=Hc+Hy<span class="number">-2</span>)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">for</span>(ri k=<span class="number">0</span>;k&lt;h;k++)</span><br><span class="line">                <span class="keyword">if</span>(vis[i][j][k]&amp;&amp;f[i][j][k]==<span class="number">-1</span>)</span><br><span class="line">                    BFS(i,j,k,dir++,<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    Fix(h);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">Make_Roof</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> h=Get_Height();</span><br><span class="line">    <span class="keyword">int</span> need=Get_Need(h);</span><br><span class="line">    <span class="keyword">if</span>(num&lt;need)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"SORRY CIRNO,NOT ENOUGH ICE_BLOCK(S) TO MAKE ROOF\n"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> S=(Hx<span class="number">-2</span>)*(Hy<span class="number">-2</span>)*h;</span><br><span class="line">    <span class="keyword">if</span>(h&lt;<span class="number">2</span>||S&lt;<span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"SORRY CIRNO,HOUSE IS TOO SMALL\n"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    num-=need;</span><br><span class="line">    <span class="keyword">int</span> num1=<span class="number">0</span>,num2=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(ri i=Hr+<span class="number">1</span>;i&lt;=Hr+Hx<span class="number">-2</span>;i++)</span><br><span class="line">        <span class="keyword">for</span>(ri j=Hc+<span class="number">1</span>;j&lt;=Hc+Hy<span class="number">-2</span>;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(ri k=<span class="number">0</span>;k&lt;h;k++)</span><br><span class="line">                <span class="keyword">if</span>(vis[i][j][k])</span><br><span class="line">                    vis[i][j][k]=<span class="number">0</span>,num1++,num++,perfect=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(ri k=h+<span class="number">1</span>;k&lt;Hm;k++)</span><br><span class="line">                <span class="keyword">if</span>(vis[i][j][k])</span><br><span class="line">                    vis[i][j][k]=<span class="number">0</span>,num2++,num++,perfect=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">for</span>(ri i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="keyword">for</span>(ri j=<span class="number">0</span>;j&lt;n;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(i&gt;=Hr&amp;&amp;i&lt;=Hr+Hx<span class="number">-1</span>&amp;&amp;j&gt;=Hc&amp;&amp;j&lt;=Hc+Hy<span class="number">-1</span>)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">for</span>(ri k=<span class="number">0</span>;k&lt;Hm;k++)</span><br><span class="line">                <span class="keyword">if</span>(vis[i][j][k])</span><br><span class="line">                    vis[i][j][k]=<span class="number">0</span>,num2++,num++,perfect=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d ICE_BLOCK(S) INSIDE THE HOUSE NEED TO BE REMOVED\n"</span>,num1);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d ICE_BLOCK(S) OUTSIDE THE HOUSE NEED TO BE REMOVED\n"</span>,num2);</span><br><span class="line">    Remove_Blocks(h);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n=read();</span><br><span class="line">    Hm=read();</span><br><span class="line">    Hr=read(),Hc=read(),Hx=read(),Hy=read();</span><br><span class="line">    m=read();</span><br><span class="line">    <span class="keyword">for</span>(ri i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">char</span> opt[MAXN];</span><br><span class="line">        <span class="built_in">memset</span>(opt,<span class="number">0</span>,<span class="keyword">sizeof</span>(opt));</span><br><span class="line">        Getstr(opt);</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">strcmp</span>(opt,<span class="string">"ICE_BARRAGE"</span>)==<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> r=read(),c=read(),dir=read(),s=read();</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"CIRNO FREEZED %d BLOCK(S)\n"</span>,Spell_Card(r,c,dir,s));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">strcmp</span>(opt,<span class="string">"MAKE_ICE_BLOCK"</span>)==<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> k=Make();</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"CIRNO MADE %d ICE BLOCK(S),NOW SHE HAS %d ICE BLOCK(S)\n"</span>,k,num);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">strcmp</span>(opt,<span class="string">"PUT_ICE_BLOCK"</span>)==<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> r=read(),c=read(),h=read();</span><br><span class="line">            Put(r,c,h);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">strcmp</span>(opt,<span class="string">"REMOVE_ICE_BLOCK"</span>)==<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> r=read(),c=read(),h=read();</span><br><span class="line">            Remove(r,c,h);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            Make_Roof();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 模拟 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>关于我的码风问题</title>
      <link href="/2018/07/08/CodeStyle/"/>
      <url>/2018/07/08/CodeStyle/</url>
      <content type="html"><![CDATA[<p>作为OIER，码风其实是一个比较严肃的话题，每个OIER都有不同的码风，这里简单记录一下我的码风。</p><a id="more"></a><p>可能会update</p><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>此码风来源于本人DimensionTripper的长期积累，以及参考过教练szwujq与ViXbob和Edgration的代码风格后形成的</p><h1 id="预编译"><a href="#预编译" class="headerlink" title="预编译"></a>预编译</h1><p><code>#include &lt;foo&gt;</code>应置于代码最开头，以C++标准库优先；工程代码中对应的.h文件应先于一切库。能使用<code>#include &lt;foo&gt;</code>的地方<strong>绝不</strong>使用<code>#include &quot;foo&quot;</code>；</p><p>使用<code>using namespace foo</code>；</p><p><code>define foo bar</code>一般在<code>using namespace foo</code>之前，<code>#include &lt;foo&gt;</code>之后。</p><h1 id="缩进"><a href="#缩进" class="headerlink" title="缩进"></a>缩进</h1><p>使用优美的4空格缩进</p><h1 id="空格与换行"><a href="#空格与换行" class="headerlink" title="空格与换行"></a>空格与换行</h1><h2 id="换行问题"><a href="#换行问题" class="headerlink" title="换行问题"></a>换行问题</h2><p>大括号<strong>一定要</strong>换行（<code>do-while</code>中<code>do</code>后面的大括号例外</p><h2 id="空格问题"><a href="#空格问题" class="headerlink" title="空格问题"></a>空格问题</h2><h3 id="一定要加空格的地方"><a href="#一定要加空格的地方" class="headerlink" title="一定要加空格的地方"></a>一定要加空格的地方</h3><ol><li>多目运算符两侧（<code>,</code>是例外，详情见下）</li><li><code>,</code>及<code>;</code>的右侧，只要它不位于行末。</li><li><code>if</code>、<code>for</code>等控制流关键字与其后的左括号之间</li><li>类型中<code>*</code>与<code>&amp;</code>的左侧</li><li><code>do-while</code>中的<code>do</code>与左大括号之间以及右大括号与<code>while</code>之间</li></ol><h3 id="一定不能加空格的地方"><a href="#一定不能加空格的地方" class="headerlink" title="一定不能加空格的地方"></a>一定不能加空格的地方</h3><ol><li>单目运算符之后</li><li>左括号右侧与右括号左侧</li><li><code>,</code>及<code>;</code>的左侧</li><li>函数名与左括号之间</li><li><code>.</code>的两侧</li></ol><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>若表达式过长时可换行，运算符位于行尾，缩进以对齐为准则</p><h1 id="空行"><a href="#空行" class="headerlink" title="空行"></a>空行</h1><p>所有<code>#include &lt;foo&gt;</code>与<code>using namespace foo;</code>之间不应空行，之后应空一行。</p><p>一系列常量定义的上下应有空行。</p><p>函数/结构体定义根据其意义和用途酌情空行</p><p>一系列全局变量定义的上下应有空行。</p><p>语句之间可根据其意义酌情空行。</p><p>任何位置不能出现连续的两个（或以上）空行。</p><h1 id="函数定义"><a href="#函数定义" class="headerlink" title="函数定义"></a>函数定义</h1><p><code>main</code>函数返回值必须为<code>int</code>，<code>return 0</code>不可忽略。</p><p>若函数体<strong>只有一行</strong>且整个函数缩成一行后<strong>不超过80个字符</strong>，可依据当时的心情决定是否缩成一行</p><h1 id="命名规则"><a href="#命名规则" class="headerlink" title="命名规则"></a>命名规则</h1><p>一般使用英文译名，首字母大写</p><p>译文由多个单词组成的中间使用<code>_</code>连接，每个单词首字母都要大写</p><p>用英文缩写命名时每个字母都要大写</p><p>变量可使用单字母 / 单词 / (单词 + 数字) / (字母 + 数字)四种方式命名</p><p><strong>绝不</strong>使用拼音（及缩写）命名</p><p><del>实在想不到名字的可以使用例如<code>ViXbob</code>、<code>Edgration</code>等神犇常用ID命名</del></p><h1 id="Example-Code"><a href="#Example-Code" class="headerlink" title="Example Code"></a>Example Code</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ri register int</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">110</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x7fffffff</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">110</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-8</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">il <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">0</span>, f = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> ch = getchar();</span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (ch == <span class="string">'-'</span>)</span><br><span class="line">            f = <span class="number">-1</span>;</span><br><span class="line">        ch = getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch))</span><br><span class="line">    &#123;</span><br><span class="line">        x = (x &lt;&lt; <span class="number">3</span>) + (x &lt;&lt; <span class="number">1</span>) + ch - <span class="string">'0'</span>;</span><br><span class="line">        ch = getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, k, cnt, tot;</span><br><span class="line"><span class="keyword">int</span> fa[N], head[N], w[N], dfn[N], top[N], dep[N], son[N], siz[N];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> fr, to, weight;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> to, nxt;</span><br><span class="line">&#125;;</span><br><span class="line">edge e[N];</span><br><span class="line">Edge E[N];</span><br><span class="line"><span class="function">il <span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(edge x, edge y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x.weight &lt; y.weight;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">il <span class="keyword">int</span> <span class="title">findf</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (fa[x] == x)</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">return</span> fa[x] = findf(fa[x]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    E[++tot] = (Edge)&#123;v, head[u]&#125;;</span><br><span class="line">    head[u] = tot;</span><br><span class="line">    E[++tot] = (Edge)&#123;u, head[v]&#125;;</span><br><span class="line">    head[v] = tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">Ex_Kruskal</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cnt = n;</span><br><span class="line">    <span class="keyword">for</span> (ri i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> f1 = findf(e[i].fr);</span><br><span class="line">        <span class="keyword">int</span> f2 = findf(e[i].to);</span><br><span class="line">        <span class="keyword">if</span> (f1 != f2)</span><br><span class="line">        &#123;</span><br><span class="line">            cnt++;</span><br><span class="line">            add_edge(cnt, f1);</span><br><span class="line">            add_edge(cnt, f2);</span><br><span class="line">            fa[f1] = cnt, fa[f2] = cnt;</span><br><span class="line">            w[cnt] = e[i].weight;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    dfn[++dfn[<span class="number">0</span>]] = x;</span><br><span class="line">    siz[x]++;</span><br><span class="line">    <span class="keyword">for</span> (ri i = head[x]; i; i = E[i].nxt)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v = E[i].to;</span><br><span class="line">        <span class="keyword">if</span> (v == fa[x])</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        fa[v] = x;</span><br><span class="line">        dep[v] = dep[x] + <span class="number">1</span>;</span><br><span class="line">        DFS(v);</span><br><span class="line">        siz[x] += siz[v];</span><br><span class="line">        <span class="keyword">if</span> (siz[v] &gt; siz[son[x]])</span><br><span class="line">            son[x] = v;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!son[x])</span><br><span class="line">        son[x] = x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">int</span> <span class="title">LCA</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (top[x] != top[y])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (dep[top[x]] &lt; dep[top[y]])</span><br><span class="line">            swap(x, y);</span><br><span class="line">        x = fa[top[x]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (dep[x] &gt; dep[y])</span><br><span class="line">        swap(x, y);</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n=read(), m=read(), k=read();</span><br><span class="line">    <span class="keyword">for</span> (ri i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">        e[i].fr = read(), e[i].to = read(), e[i].weight = read();</span><br><span class="line">    sort(e + <span class="number">1</span>, e + <span class="number">1</span> + m, cmp);</span><br><span class="line">    <span class="keyword">for</span> (ri i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        fa[i] = i, fa[i + n] = i + n;</span><br><span class="line">    Ex_Kruskal();</span><br><span class="line">    <span class="keyword">int</span> rt = findf(<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">memset</span>(fa, <span class="number">0</span>, <span class="keyword">sizeof</span>(fa));</span><br><span class="line">    DFS(rt);</span><br><span class="line">    <span class="keyword">for</span> (ri i = <span class="number">1</span>; i &lt;= dfn[<span class="number">0</span>]; i++)</span><br><span class="line">        top[dfn[i]] = (dfn[i] == son[fa[dfn[i]]]) ? top[fa[dfn[i]]] : dfn[i];</span><br><span class="line">    <span class="keyword">for</span> (ri i = <span class="number">1</span>; i &lt;= k; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> x = read(), y = read();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, w[LCA(x, y)]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上代码为BZOJ 3732代码</p>]]></content>
      
      <categories>
          
          <category> 代码规范 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 水 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Luogu P2680 运输计划 题解</title>
      <link href="/2018/07/05/Luogu%20P2680/"/>
      <url>/2018/07/05/Luogu%20P2680/</url>
      <content type="html"><![CDATA[<p>这怕是NOIp2015中最毒瘤的几道题之一了吧</p><p>作为一个蒟蒻，鄙人表示这个题非常的难，于是就写一篇题解庆祝一下。</p><a id="more"></a><p>首先看到这道题，嗯，一棵树。然后呢？似乎有很多链，那就要涉及到LCA了，由于树剖常数较小，而且比较好写，所以果断选择树剖。</p><p>再看几眼，我们发现这要求某个最小值，仔细分析也能明白答案是符合单调性的，那么果断二分。但是check函数是个问题，我们可以把所有大于mid的链都找出来，然后再判断是否有一条边同时经过这些链并且删去后可以使最大边小于mid。那么后面这个判断我们用树上差分来完成。</p><p>那么AC代码呼之欲出。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 650000+110</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 0x7fffffff</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ri register int</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,cnt,ans,num,mx_edge,mx_plan;</span><br><span class="line"><span class="keyword">int</span> head[N],siz[N],son[N],fa[N],dep[N],top[N],dis[N],sum[N],pre[N];</span><br><span class="line"><span class="keyword">bool</span> flag;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> to,nxt,weight;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">plan</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> st,ed,lca,dist;</span><br><span class="line">&#125;;</span><br><span class="line">edge e[N];</span><br><span class="line">plan p[N];</span><br><span class="line"><span class="function">il <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;<span class="string">'9'</span>||ch&lt;<span class="string">'0'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">'-'</span>)</span><br><span class="line">            f=<span class="number">-1</span>;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[++cnt]=(edge)&#123;v,head[u],w&#125;;</span><br><span class="line">    head[u]=cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    siz[x]++;</span><br><span class="line">    <span class="keyword">for</span>(ri i=head[x];i;i=e[i].nxt)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v=e[i].to;</span><br><span class="line">        <span class="keyword">if</span>(v==fa[x])</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        fa[v]=x;</span><br><span class="line">        dep[v]=dep[x]+<span class="number">1</span>;</span><br><span class="line">        dis[v]=dis[x]+e[i].weight;</span><br><span class="line">        pre[v]=e[i].weight;</span><br><span class="line">        dfs1(v);</span><br><span class="line">        siz[x]+=siz[v];</span><br><span class="line">        <span class="keyword">if</span>(siz[v]&gt;siz[son[x]])</span><br><span class="line">            son[x]=v;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!siz[son[x]])</span><br><span class="line">        son[x]=x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> bel)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    top[x]=bel;</span><br><span class="line">    <span class="keyword">for</span>(ri i=head[x];i;i=e[i].nxt)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v=e[i].to;</span><br><span class="line">        <span class="keyword">if</span>(v==fa[x])</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span>(v==son[x])</span><br><span class="line">            dfs2(v,bel);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            dfs2(v,v);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">int</span> <span class="title">LCA</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(top[x]!=top[y])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(dep[top[x]]&lt;dep[top[y]])</span><br><span class="line">            swap(x,y);</span><br><span class="line">        x=fa[top[x]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(dep[x]&gt;dep[y])</span><br><span class="line">        swap(x,y);</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">int</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> tot,<span class="keyword">int</span> mx)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(ri i=head[x];i;i=e[i].nxt)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v=e[i].to;</span><br><span class="line">        <span class="keyword">if</span>(v==fa[x])</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        sum[x]+=DFS(v,tot,mx);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(sum[x]&gt;=tot&amp;&amp;pre[x]&gt;=mx)</span><br><span class="line">        flag=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> sum[x];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> limit)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(sum,<span class="number">0</span>,<span class="keyword">sizeof</span>(sum));</span><br><span class="line">    flag=<span class="number">0</span>,num=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(ri i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">        <span class="keyword">if</span>(p[i].dist&gt;limit)</span><br><span class="line">        &#123;</span><br><span class="line">            sum[p[i].st]++,sum[p[i].ed]++,sum[p[i].lca]-=<span class="number">2</span>;</span><br><span class="line">            num++;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">if</span>(num==<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> x=DFS(<span class="number">1</span>,num,mx_plan-limit);</span><br><span class="line">    <span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n=read(),m=read();</span><br><span class="line">    <span class="keyword">for</span>(ri i=<span class="number">1</span>;i&lt;=n<span class="number">-1</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u=read(),v=read(),w=read();</span><br><span class="line">        add_edge(u,v,w);</span><br><span class="line">        add_edge(v,u,w);</span><br><span class="line">        mx_edge=max(mx_edge,w);</span><br><span class="line">    &#125;</span><br><span class="line">    dfs1(<span class="number">1</span>);</span><br><span class="line">    dfs2(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(ri i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        p[i].st=read(),p[i].ed=read();</span><br><span class="line">        p[i].lca=LCA(p[i].st,p[i].ed);</span><br><span class="line">        p[i].dist=dis[p[i].st]+dis[p[i].ed]-dis[p[i].lca]*<span class="number">2</span>;</span><br><span class="line">        mx_plan=max(mx_plan,p[i].dist);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> L=mx_plan-mx_edge,R=mx_plan;</span><br><span class="line">    <span class="keyword">while</span>(L&lt;=R)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> mid=(L+R)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(check(mid))</span><br><span class="line">            ans=mid,R=mid<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            L=mid+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然后我们会发现，这个东西效率极其之低，跑的慢的要死。那么就没办法了吗？显然不是。我们要知道树是有dfs序的，把dfs序弄出来不就可以在序列上搞了吗？省去了递归之后复杂度自然更优秀。</p><p>以下是几段核心代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    siz[x]++,dfn[++dfn[<span class="number">0</span>]]=x;</span><br><span class="line">    <span class="keyword">for</span>(ri i=head[x];i;i=e[i].nxt)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v=e[i].to;</span><br><span class="line">        <span class="keyword">if</span>(v==fa[x])</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        fa[v]=x;</span><br><span class="line">        dep[v]=dep[x]+<span class="number">1</span>;</span><br><span class="line">        dis[v]=dis[x]+e[i].weight;</span><br><span class="line">        pre[v]=e[i].weight;</span><br><span class="line">        dfs1(v);</span><br><span class="line">        siz[x]+=siz[v];</span><br><span class="line">        <span class="keyword">if</span>(siz[v]&gt;siz[son[x]])</span><br><span class="line">            son[x]=v;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!siz[son[x]])</span><br><span class="line">        son[x]=x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这是树剖经典dfs，不过是加了dfs序和差分的元素罢了<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> limit)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(sum,<span class="number">0</span>,<span class="keyword">sizeof</span>(sum));</span><br><span class="line">    num=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(ri i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">        <span class="keyword">if</span>(p[i].dist&gt;limit)</span><br><span class="line">        &#123;</span><br><span class="line">            sum[p[i].st]++,sum[p[i].ed]++,sum[p[i].lca]-=<span class="number">2</span>;</span><br><span class="line">            num++;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">for</span>(ri i=n;i;i--)</span><br><span class="line">    &#123;</span><br><span class="line">        sum[fa[dfn[i]]]+=sum[dfn[i]];</span><br><span class="line">        <span class="keyword">if</span>(pre[dfn[i]]&gt;=mx_plan-limit&amp;&amp;sum[dfn[i]]&gt;=num)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>以上是很妙的一段修改，省去了差分中的递归过程，改用简洁的一层循环<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(ri i=<span class="number">1</span>;i&lt;=dfn[<span class="number">0</span>];i++)</span><br><span class="line">        top[dfn[i]]=son[fa[dfn[i]]]==dfn[i]?top[fa[dfn[i]]]:dfn[i];</span><br></pre></td></tr></table></figure></p><p>以上是另一处很妙的修改，这是树剖中确定每个点所属重链的过程，因为dfs序的存在也由递归被简化为一层循环.</p><p>这样就快很多了，大概速度是原来的4倍。</p><p>但还是不满意啊，那就改读入优化吧<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">io</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">char</span> op[<span class="number">10000000</span>],*s;</span><br><span class="line">    io()</span><br><span class="line">    &#123;</span><br><span class="line">        fread(s=op,<span class="number">1</span>,<span class="number">1</span>&lt;&lt;<span class="number">26</span>,<span class="built_in">stdin</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">il <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> u = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(*s&lt;<span class="number">48</span>)</span><br><span class="line">            s++;</span><br><span class="line">        <span class="keyword">while</span>(*s&gt;<span class="number">32</span>)</span><br><span class="line">            u=u*<span class="number">10</span>+*s++<span class="number">-48</span>;</span><br><span class="line">        <span class="keyword">return</span> u;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>用上了传说中最快的读入优化后，速度终于快起来了！</p><p>最后是跑出了392ms（O2）的<del>好</del>成绩，大概能进第二面。</p><p>于是就切掉了一道紫题DA☆ZE</p>]]></content>
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图论 </tag>
            
            <tag> 树链剖分，树剖 </tag>
            
            <tag> 树上差分 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>【NOIP2017】Day1T2 时间复杂度</title>
      <link href="/2018/04/15/%5BNOIP2017%5DDay1T2/"/>
      <url>/2018/04/15/%5BNOIP2017%5DDay1T2/</url>
      <content type="html"><![CDATA[<p>这是一道模拟题……</p><p>那么我为什么要写它的题解呢？其实最初只是想给我们同机房的大佬证明一下这题没那么难QwQ，然后调了几乎一个半小时调过了。<del>（然后就闲着无聊来写一发了）</del></p><a id="more"></a><p>那么虽然是模拟，直接去写的话肯定会炸（不要问我是怎么知道的，我在考场上就是直接去写然后炸掉了）。主流的做法有两种：堆栈和递归。</p><p>那么我在这里介绍的是堆栈。怎么堆呢？其实基本的思路就是莽着堆，每一层循环都有一个变量，所以我堆了一个栈存变量，又堆了一个栈存循环本身（也就是用复杂度代表的）<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 10000+110</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 0x7fffffff</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> t,n,cnt,top,top1,stk[N],cpx[N];</span><br><span class="line"><span class="keyword">char</span> ch[<span class="number">15</span>],s[<span class="number">120</span>][<span class="number">15</span>],st[N];</span><br><span class="line"><span class="keyword">bool</span> flag[N],f;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">geto</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(ch[<span class="number">2</span>]==<span class="string">'1'</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">4</span>,x=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch[i]&gt;=<span class="string">'0'</span>&amp;&amp;ch[i]&lt;=<span class="string">'9'</span>)</span><br><span class="line">        x=x*<span class="number">10</span>+ch[i]-<span class="string">'0'</span>,i++;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">getnum</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> &amp;down,<span class="keyword">int</span> &amp;up)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">4</span>;</span><br><span class="line">    <span class="keyword">while</span>(s[k][i]&gt;=<span class="string">'0'</span>&amp;&amp;s[k][i]&lt;=<span class="string">'9'</span>)</span><br><span class="line">        down=down*<span class="number">10</span>+s[k][i]-<span class="string">'0'</span>,i++;</span><br><span class="line">    i++;</span><br><span class="line">    <span class="keyword">while</span>(s[k][i]&gt;=<span class="string">'0'</span>&amp;&amp;s[k][i]&lt;=<span class="string">'9'</span>)</span><br><span class="line">        up=up*<span class="number">10</span>+s[k][i]-<span class="string">'0'</span>,i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</span><br><span class="line">    <span class="keyword">while</span>(t--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(ch,<span class="number">0</span>,<span class="keyword">sizeof</span>(ch));</span><br><span class="line">        <span class="built_in">memset</span>(s,<span class="number">0</span>,<span class="keyword">sizeof</span>(s));</span><br><span class="line">        <span class="built_in">memset</span>(cpx,<span class="number">0</span>,<span class="keyword">sizeof</span>(cpx));</span><br><span class="line">        <span class="built_in">memset</span>(flag,<span class="number">0</span>,<span class="keyword">sizeof</span>(flag));</span><br><span class="line">        top=top1=<span class="number">0</span>;</span><br><span class="line">        cnt=f=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">        getchar();</span><br><span class="line">        gets(ch);</span><br><span class="line">        <span class="keyword">int</span> ent=geto();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            gets(s[i]);</span><br><span class="line">            <span class="keyword">if</span>(f)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span>(s[i][<span class="number">0</span>]==<span class="string">'F'</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(flag[s[i][<span class="number">2</span>]])</span><br><span class="line">                    f=<span class="number">1</span>;</span><br><span class="line">                st[++top]=s[i][<span class="number">2</span>];</span><br><span class="line">                flag[st[top]]=<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">int</span> up=<span class="number">0</span>,down=<span class="number">0</span>;</span><br><span class="line">                getnum(i,down,up);</span><br><span class="line">                <span class="keyword">if</span>(s[i][<span class="built_in">strlen</span>(s[i])<span class="number">-1</span>]==<span class="string">'n'</span>&amp;&amp;s[i][<span class="number">4</span>]!=<span class="string">'n'</span>)</span><br><span class="line">                    cpx[++cnt]=stk[++top1]=stk[top1<span class="number">-1</span>]+<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>((s[i][<span class="number">4</span>]==<span class="string">'n'</span>&amp;&amp;s[i][<span class="built_in">strlen</span>(s[i])<span class="number">-1</span>]!=<span class="string">'n'</span>)||(down&amp;&amp;up&amp;&amp;down&gt;up))</span><br><span class="line">                    cpx[++cnt]=stk[++top1]=-inf;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    cpx[++cnt]=stk[++top1]=stk[top1<span class="number">-1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(top==<span class="number">0</span>)</span><br><span class="line">                    f=<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    flag[st[top--]]=<span class="number">0</span>;</span><br><span class="line">                    top1--;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(top)</span><br><span class="line">            f=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++)</span><br><span class="line">            ans=max(ans,cpx[i]);</span><br><span class="line">        <span class="keyword">if</span>(f)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"ERR\n"</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(ans==ent)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"Yes\n"</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"No\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 模拟 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>gcd&amp;exgcd【数学向】</title>
      <link href="/2018/04/14/gcd&amp;exgcd/"/>
      <url>/2018/04/14/gcd&amp;exgcd/</url>
      <content type="html"><![CDATA[<p>最近笔者这个蒟蒻学习了扩欧，但是我并不懂得gcd，于是奋发图强，终于，我<del>大概</del>明白了吧</p><a id="more"></a><h1 id="gcd"><a href="#gcd" class="headerlink" title="gcd"></a>gcd</h1><p>于是我们从朴素的gcd开始，这是一个求最大公约数的算法，最初由古希腊数学家欧几里得提出，因此得名为欧几里得算法。</p><p>下面是正文：</p><p>已知$a,b$，求$a,b$的最大公约数。</p><p>我们知道，gcd的基础是这个式子：gcd(a,b)=gcd(b,a%b)，那么怎么证呢？</p><p>对于$a,b$，我们假设$a=kb+r$则r=a%b，再假设d是(a,b)的公约数，则有$d|a$，$d|b$（“$|$”，意为整除），我们可以再假设$a=q_1d$，$b=q_2d$，又$a=kb+r$，则可知$r=(q_1-q_2)d$，则有$d|r$，则d为(b,a%b)的公约数。</p><p>那么反过来，假设$d$为(b,a%b)的公约数，同样假设$a=kb+r$，则r=a%b，那么有$d|b$，$d|r$，继续假设$b=q_1d$，$r=q_2d$，则$a=(kq_1+q_2)d$，可知$d|a$,那么d也为(a,b)的公约数。</p><p>可知(a,b)，(b,a%b)的公约数都是相等的，所以其最大公约数也必然相等，那么d是(a,b)的最大公约数为d是(b,a%b)的最大公约数的充要条件，也就是说gcd(a,b)=gcd(b,a%b)，得证。</p><p>那么代码就很简单了<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(b==<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line"><span class="keyword">return</span> gcd(b,a%b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="exgcd"><a href="#exgcd" class="headerlink" title="exgcd"></a>exgcd</h1><p>这是让我们求$ax+by=gcd(a,b)$的解的过程</p><p>我们知道，gcd是一个靠递归实现的过程，其实exgcd也是一样的东西。那么边界在哪里呢？</p><p>毫无疑问，我们知道当$b=0$时，$gcd(a,b)=a$，则必有一组解为$x=1$，$y=0$，那么问题就简单了，只要不断的递归，直到出现$b=0$为止。</p><p>那么再怎么反推回去呢？别急，我们来好好分析一下。</p><p>还是假设</p><p>设$x_1a+y_1b=gcd(a,b)$，$x_2b+y_2(a$%$b)=gcd(b,a$%$b)$</p><p>根据上文我们知道$gcd(a,b)=gcd(b,a$%$b)$</p><p>所以我们有$x_1a+y_1b=x_2b+y_2(a$%$b)$</p><p>所以我们可以写成$x_1a+y_1b=x_2b+y_2(a-[a/b]*b)$</p><p>进一步写成$x_1a+y_1b=x_2b+y_2a-y_2[a/b]*b$</p><p>在合并一下同类项$x_1a+y_1b=y_2a+(x_2-y_2[a/b])b$</p><p>那么比较一下可得$x_1=y_2$，$y_1=x_2-y_2[a/b]$</p><p>【注】此处“$[$”、“$]$”意为对$a/b$的下取整。</p><p>然后就可以写出代码了：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">exgcd</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> &amp;x,<span class="keyword">int</span> &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(b==<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        x=<span class="number">1</span>,y=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> d=exgcd(b,a%b,y,x);</span><br><span class="line">    y-=a/b*x;</span><br><span class="line">    <span class="keyword">return</span> d;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数论 </tag>
            
            <tag> 最大公约数，GCD </tag>
            
            <tag> 扩展欧几里得，扩欧 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>二分图匹配</title>
      <link href="/2018/04/04/%E4%BA%8C%E5%88%86%E5%9B%BE%E5%8C%B9%E9%85%8D/"/>
      <url>/2018/04/04/%E4%BA%8C%E5%88%86%E5%9B%BE%E5%8C%B9%E9%85%8D/</url>
      <content type="html"><![CDATA[<p>如题所述，这类问题让我们求一个二分图的最大匹配，不知道二分图的同学请参考<a href="https://baike.baidu.com/item/二分图/9089095?fr=aladdin" target="_blank" rel="noopener">百度百科</a></p><p>看着那些术语让人头大对吧，那么来通俗一点的：给定若干个男生和若干个女生，每个男生都可以和一定数量的女生互相有好感，假定不存在同性恋和后宫，求最多能凑多少对CP<del>（然后再统统烧了）</del>。</p><p>对于这类问题通常有两种做法：匈牙利和网络流。</p><a id="more"></a><h1 id="匈牙利算法"><a href="#匈牙利算法" class="headerlink" title="匈牙利算法"></a>匈牙利算法</h1><p>在我讲之前，我建议读者先去读一下Dark_Scope的这篇<a href="https://blog.csdn.net/dark_scope/article/details/8880547" target="_blank" rel="noopener">趣写算法系列之—匈牙利算法</a>，相当的简单易懂。</p><p>那么我来用正经的话把他（她？）的语言翻译一遍：对于点集M中的每一个点u，找到与它配对的点v，如果点v尚未配对就把u、v配对，否则就试图给v的“原配”寻找新的配对点，找到后就把u、v配对。实际就是一个寻找增广路的过程。</p><p>相信有这些已经够清楚的了，以下是代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 500000+110</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,s,cnt,ans;</span><br><span class="line"><span class="keyword">int</span> head[N],q[N],pre[N],mate[N];</span><br><span class="line"><span class="keyword">bool</span> vis[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> to,nxt;</span><br><span class="line">&#125;e[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">'-'</span>)</span><br><span class="line">            f=<span class="number">-1</span>;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[++cnt]=(edge)&#123;v,head[u]&#125;;</span><br><span class="line">    head[u]=cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">Find</span><span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=head[u];i;i=e[i].nxt)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v=e[i].to;</span><br><span class="line">        <span class="keyword">if</span>(!vis[v])</span><br><span class="line">        &#123;</span><br><span class="line">            vis[v]=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(!mate[v]||Find(mate[v]))</span><br><span class="line">            &#123;</span><br><span class="line">                mate[v]=u;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n=read(),m=read(),s=read();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=s;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u=read(),v=read();</span><br><span class="line">        <span class="keyword">if</span>(v&gt;m||u&gt;n)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        add(u,v);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span>(vis));</span><br><span class="line">        <span class="keyword">if</span>(Find(i))</span><br><span class="line">            ans++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="网络流"><a href="#网络流" class="headerlink" title="网络流"></a>网络流</h1><p>很容易想到如果额外增加一个源点和一个汇点，然后就可以直接跑网络最大流了。</p><p>对于无权图，我们需要设置边权，很容易想到正向边为1，反向边为0，这样就可以很顺利的用Dinic跑出最大匹配了。</p><p>可以看出比匈牙利快多了<del>（虽然没有$min(a,b)-1$算法快）</del></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ri register int</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">2000000</span>+<span class="number">110</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">0x7fffffff</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN=<span class="number">50</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps=<span class="number">1e-8</span>;</span><br><span class="line"><span class="function">il <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">char</span> ch=getchar();</span><br><span class="line"><span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(ch==<span class="string">'-'</span>)</span><br><span class="line">f=<span class="number">-1</span>;</span><br><span class="line">ch=getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))</span><br><span class="line">&#123;</span><br><span class="line">x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+ch-<span class="string">'0'</span>;</span><br><span class="line">ch=getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n,m,k,cnt;</span><br><span class="line"><span class="keyword">int</span> head[N],q[N],dep[N],cur[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> to,nxt,weight;</span><br><span class="line">&#125;;</span><br><span class="line">edge e[N];</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">e[cnt]=(edge)&#123;v,head[u],w&#125;;</span><br><span class="line">head[u]=cnt++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">bool</span> <span class="title">BFS</span><span class="params">(<span class="keyword">int</span> S,<span class="keyword">int</span> T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> fr=<span class="number">1</span>,tl=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">memset</span>(dep,<span class="number">0</span>,<span class="keyword">sizeof</span>(dep));</span><br><span class="line">dep[S]=<span class="number">1</span>;</span><br><span class="line">q[<span class="number">1</span>]=S;</span><br><span class="line"><span class="keyword">while</span>(tl&lt;fr)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> u=q[++tl];</span><br><span class="line"><span class="keyword">for</span>(ri i=head[u];i!=<span class="number">-1</span>;i=e[i].nxt)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> v=e[i].to;</span><br><span class="line"><span class="keyword">if</span>(!dep[v]&amp;&amp;e[i].weight&gt;<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">dep[v]=dep[u]+<span class="number">1</span>;</span><br><span class="line">q[++fr]=v;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!dep[T])</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> t,<span class="keyword">int</span> flow)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(u==t)</span><br><span class="line"><span class="keyword">return</span> flow;</span><br><span class="line"><span class="keyword">for</span>(ri&amp; i=cur[u];i!=<span class="number">-1</span>;i=e[i].nxt)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> v=e[i].to;</span><br><span class="line"><span class="keyword">if</span>(dep[v]==dep[u]+<span class="number">1</span>&amp;&amp;e[i].weight&gt;<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> dis=dfs(v,t,min(flow,e[i].weight));</span><br><span class="line"><span class="keyword">if</span>(dis&gt;<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">e[i].weight-=dis;</span><br><span class="line">e[i^<span class="number">1</span>].weight+=dis;</span><br><span class="line"><span class="keyword">return</span> dis;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">int</span> <span class="title">Dinic</span><span class="params">(<span class="keyword">int</span> S,<span class="keyword">int</span> T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> ret=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(BFS(S,T))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(ri i=<span class="number">0</span>;i&lt;=n+m+<span class="number">1</span>;i++)</span><br><span class="line">cur[i]=head[i];</span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">int</span> delta=dfs(S,T,inf))</span><br><span class="line">ret+=delta;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">n=read(),m=read(),k=read();</span><br><span class="line"><span class="built_in">memset</span>(head,<span class="number">-1</span>,<span class="keyword">sizeof</span>(head));</span><br><span class="line"><span class="keyword">for</span>(ri i=<span class="number">1</span>;i&lt;=k;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> u=read(),v=read();</span><br><span class="line"><span class="keyword">if</span>(v&gt;m)</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">add_edge(u,n+v,<span class="number">1</span>);</span><br><span class="line">add_edge(n+v,u,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(ri i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line">add_edge(<span class="number">0</span>,i,<span class="number">1</span>);</span><br><span class="line">add_edge(i,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(ri i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">&#123;</span><br><span class="line">add_edge(n+i,n+m+<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">add_edge(n+m+<span class="number">1</span>,n+i,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>,Dinic(<span class="number">0</span>,n+m+<span class="number">1</span>));</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图论 </tag>
            
            <tag> 二分图 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>【胡扯向】数据生成器</title>
      <link href="/2018/04/04/datamakers/"/>
      <url>/2018/04/04/datamakers/</url>
      <content type="html"><![CDATA[<p>作为一名OIER，我们会时不时的需要生成几组比较大的数据来进行测试，但是这种东西手玩肯定是不可能实现的，所以就需要用到数据生成器了。</p><a id="more"></a><p>这种东西呢，大家都知道是基于rand函数随机生成的数据，由于笔者极其的蒟蒻，所以决定先从比较基础的数据结构讲起。</p><h1 id="全排列"><a href="#全排列" class="headerlink" title="全排列"></a>全排列</h1><p>首先因为基础的大家都会，这里就不讲了，从全排列开始吧。</p><p>当然比较暴力的做法是多次rand，对每个数打标，如果rand到打了标的数就重做，直到生成全排列为止，但面对$10^6$甚至更大的数据的时候这样就基本不可能输出了。</p><p>所以我们根据抽牌的原理写出了以下这段程序：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 1000000+110</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,a[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    freopen(<span class="string">"data.out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>);</span><br><span class="line">    srand((<span class="keyword">unsigned</span>)time(<span class="literal">NULL</span>));</span><br><span class="line">    n=<span class="number">1</span>+rand()%<span class="number">1000000</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        a[i]=i;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> x=<span class="number">1</span>+rand()%(n-i+<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>,a[x]);</span><br><span class="line">        swap(a[x],a[n-i+<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在上面这个程序中，我们每次在前(n-i+1)个数中抽一个出来，然后把它换到第(n-i+1)个位置上，这样就可以保证相对快速而且不重复。</p><h1 id="树"><a href="#树" class="headerlink" title="树"></a>树</h1><p>对于树，而且是比较规矩的，画出来真正有树的形状的树，我们也可以用类似的思想生成。</p><p>在这里，我们把所有用过的点放在后i个位置，每次从未用过的点中随机取出一个点v，从用过的点中随机取出一个点u，就相当于生成了一条由u到v的边，然后将v点放入已使用点集。</p><p>代码如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 1000000+110</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,a[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    freopen(<span class="string">"data.out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>);</span><br><span class="line">    srand((<span class="keyword">unsigned</span>)time(<span class="literal">NULL</span>));</span><br><span class="line">    n=<span class="number">1</span>+rand()%<span class="number">1000000</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        a[i]=i;</span><br><span class="line">    swap(a[<span class="number">1</span>],a[n]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v=<span class="number">1</span>+rand()%(n-i),u=n-i+<span class="number">1</span>+rand()%i;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>,a[u],a[v]);</span><br><span class="line">        swap(a[v],a[n-i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这样就可以得到一棵树了。</p>]]></content>
      
      <categories>
          
          <category> 瞎jb搞 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据生成器 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>费用流</title>
      <link href="/2018/03/31/%E8%B4%B9%E7%94%A8%E6%B5%81/"/>
      <url>/2018/03/31/%E8%B4%B9%E7%94%A8%E6%B5%81/</url>
      <content type="html"><![CDATA[<p>费用流，就是在网络流的基础上加入了每条边单位流量的费用，求最大流量和在最大流量的情况下费用的最小值的问题。</p><p>对于这种问题，基本思路当然还是在最大流问题的基础上修改啊</p><p>所以在这里我给出2种解法：（例题：<a href="https://www.luogu.org/problemnew/show/P3381" target="_blank" rel="noopener"> P3381 【模板】最小费用最大流</a>）</p><a id="more"></a><h1 id="1、EK-改"><a href="#1、EK-改" class="headerlink" title="1、EK-改"></a>1、EK-改</h1><p>当然这也是目前的主流写法，在EK中，将BFS过程换成SPFA的过程，松弛与增广一起进行，当然是很美妙的写法。当然整体的代码和EK没有什么特别大的区别，就不多讲了。</p><p>下面是代码（1604ms）<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 200000+110</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 0x7fffffff</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,S,T,cnt,ans,Ans;</span><br><span class="line"><span class="keyword">int</span> head[N],q[N],pre[N],dist[N],mn[N];</span><br><span class="line"><span class="keyword">bool</span> vis[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> to,nxt,weigh,cost;</span><br><span class="line">&#125;e[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">'-'</span>)</span><br><span class="line">            f=<span class="number">-1</span>;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> w,<span class="keyword">int</span> f)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[cnt]=(edge)&#123;v,head[u],w,f&#125;;</span><br><span class="line">    head[u]=cnt++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">SPFA</span><span class="params">(<span class="keyword">int</span> s,<span class="keyword">int</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        dist[i]=inf,vis[i]=<span class="number">0</span>,pre[i]=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">int</span> fr=<span class="number">1</span>,tl=<span class="number">0</span>;</span><br><span class="line">    q[<span class="number">1</span>]=s,vis[s]=<span class="number">1</span>,mn[s]=inf,dist[s]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(tl&lt;fr)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u=q[++tl];</span><br><span class="line">        vis[u]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=head[u];i!=<span class="number">-1</span>;i=e[i].nxt)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> v=e[i].to;</span><br><span class="line">            <span class="keyword">if</span>(dist[v]&gt;dist[u]+e[i].cost&amp;&amp;e[i].weigh&gt;<span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                dist[v]=dist[u]+e[i].cost;</span><br><span class="line">                mn[v]=min(e[i].weigh,mn[u]);</span><br><span class="line">                pre[v]=i;</span><br><span class="line">                <span class="keyword">if</span>(!vis[v])</span><br><span class="line">                &#123;</span><br><span class="line">                    q[++fr]=v;</span><br><span class="line">                    vis[v]=<span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dist[t]!=inf;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">EK</span><span class="params">(<span class="keyword">int</span> s,<span class="keyword">int</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(SPFA(s,t))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> x=t;</span><br><span class="line">        <span class="keyword">while</span>(x!=s)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> i=pre[x];</span><br><span class="line">            e[i].weigh-=mn[t];</span><br><span class="line">            e[i^<span class="number">1</span>].weigh+=mn[t];</span><br><span class="line">            x=e[i^<span class="number">1</span>].to;</span><br><span class="line">        &#125;</span><br><span class="line">        Ans+=mn[t];</span><br><span class="line">        ans+=dist[t]*mn[t];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(head,<span class="number">-1</span>,<span class="keyword">sizeof</span>(head));</span><br><span class="line">    n=read(),m=read(),S=read(),T=read();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u=read(),v=read(),w=read(),f=read();</span><br><span class="line">        add(u,v,w,f);</span><br><span class="line">        add(v,u,<span class="number">0</span>,-f);</span><br><span class="line">    &#125;</span><br><span class="line">    EK(S,T);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d %d"</span>,Ans,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="2、ZKW"><a href="#2、ZKW" class="headerlink" title="2、ZKW"></a>2、ZKW</h1><p>首先%ZKW大神：<a href="https://artofproblemsolving.com/community/c1368h1020435" target="_blank" rel="noopener">从入门到精通: 最小费用流的“zkw算法”</a></p><p>是不是觉得EK实在是慢得惊人呢？那么我们来看一下ZKW神犇发明的“ZKW算法”。当然，按照ZKW本人的意思，我下面贴的这段代码并不是“ZKW费用流”，因为它用到了SPFA。ZKW本人的代码可以在上面的链接里找到，以下是我个人的见解（因为我不会KM啊）</p><p>这里呢，我们用了一个DFS，它的用处就在于多路增广，可以降低某些图上的复杂度。有这个基础的话就可以接受SPFA的复杂度了，而且也可以在有负权的图上跑了。</p><p>以下是代码（932ms）<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 200000+110</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 0x7fffffff</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,S,T,cnt,ans;</span><br><span class="line"><span class="keyword">int</span> deep[N],head[N],q[N],dist[N];</span><br><span class="line"><span class="keyword">bool</span> vis[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> to,nxt,weigh,cost;</span><br><span class="line">&#125;e[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">'-'</span>)</span><br><span class="line">            f=<span class="number">-1</span>;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> w,<span class="keyword">int</span> f)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[cnt]=(edge)&#123;v,head[u],w,f&#125;;</span><br><span class="line">    head[u]=cnt++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">SPFA</span><span class="params">(<span class="keyword">int</span> s,<span class="keyword">int</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        dist[i]=inf,vis[i]=<span class="number">0</span>;</span><br><span class="line">    dist[t]=<span class="number">0</span>;</span><br><span class="line">    vis[t]=<span class="number">1</span>;<span class="comment">//首先SPFA我们维护距离标号的时候要倒着跑，这样可以维护出到终点的最短路径</span></span><br><span class="line">    <span class="keyword">int</span> fr=<span class="number">1</span>,tl=<span class="number">0</span>;</span><br><span class="line">    q[<span class="number">1</span>]=t;</span><br><span class="line">    <span class="keyword">while</span>(tl&lt;fr)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u=q[++tl];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=head[u];i!=<span class="number">-1</span>;i=e[i].nxt)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> v=e[i].to;</span><br><span class="line">            <span class="keyword">if</span>(e[i^<span class="number">1</span>].weigh&amp;&amp;dist[v]&gt;dist[u]-e[i].cost)<span class="comment">//首先c[k^1]是为什么呢？因为我们要保证正流，但是SPFA是倒着跑的，所以说我们要求c[k]的对应反向边是正的，这样保证走的方向是正确的</span></span><br><span class="line">            &#123;</span><br><span class="line">                dist[v]=dist[u]-e[i].cost;<span class="comment">//因为已经是倒着的了，我们也可以很清楚明白地知道建边的时候反向边的边权是负的，所以减一下就对了（负负得正）</span></span><br><span class="line">                <span class="keyword">if</span>(!vis[v])</span><br><span class="line">                &#123;</span><br><span class="line">                    vis[v]=<span class="number">1</span>;</span><br><span class="line">                    q[++fr]=v;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        vis[u]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dist[s]&lt;inf</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">int</span> dfs(<span class="keyword">int</span> u,<span class="keyword">int</span> t,<span class="keyword">int</span> dis)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(u==t)</span><br><span class="line">    &#123;</span><br><span class="line">        vis[t]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> dis;</span><br><span class="line">    &#125;</span><br><span class="line">    vis[u]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> used=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=head[u];i!=<span class="number">-1</span>;i=e[i].nxt)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v=e[i].to;</span><br><span class="line">        <span class="keyword">if</span>(!vis[v]&amp;&amp;e[i].weigh&amp;&amp;dist[u]-e[i].cost==dist[v])<span class="comment">//增广的条件（虽然我不太懂）</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> a=dfs(v,t,min(e[i].weigh,dis-used));</span><br><span class="line">            <span class="keyword">if</span>(a)</span><br><span class="line">            &#123;</span><br><span class="line">                ans+=a*e[i].cost;</span><br><span class="line">                e[i].weigh-=a;</span><br><span class="line">                e[i^<span class="number">1</span>].weigh+=a;</span><br><span class="line">                used+=a;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(used==dis)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> used;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">CostFlow</span><span class="params">(<span class="keyword">int</span> s,<span class="keyword">int</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> flow=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(SPFA(s,t))</span><br><span class="line">    &#123;</span><br><span class="line">        vis[t]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(vis[t])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">                vis[i]=<span class="number">0</span>;</span><br><span class="line">            flow+=dfs(s,t,inf);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> flow;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(head,<span class="number">-1</span>,<span class="keyword">sizeof</span>(head));</span><br><span class="line">    n=read(),m=read(),S=read(),T=read();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u=read(),v=read(),w=read(),f=read();</span><br><span class="line">        add(u,v,w,f);</span><br><span class="line">        add(v,u,<span class="number">0</span>,-f);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d "</span>,CostFlow(S,T));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>,ans);;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>以上就是一般的ZKW（伪）</p><h2 id="SLF优化"><a href="#SLF优化" class="headerlink" title="SLF优化"></a>SLF优化</h2><p>那么如果对这个效率还不满意呢？</p><p>对了，向标题所说的那样，进行SLF优化吧（虽然我不懂）</p><p>代码如下（860ms）<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 200000+110</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 0x7fffffff</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,S,T,cnt,ans;</span><br><span class="line"><span class="keyword">int</span> deep[N],head[N],dist[N];</span><br><span class="line"><span class="keyword">bool</span> vis[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> to,nxt,weigh,cost;</span><br><span class="line">&#125;e[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">'-'</span>)</span><br><span class="line">            f=<span class="number">-1</span>;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> w,<span class="keyword">int</span> f)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[cnt]=(edge)&#123;v,head[u],w,f&#125;;</span><br><span class="line">    head[u]=cnt++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">SPFA</span><span class="params">(<span class="keyword">int</span> s,<span class="keyword">int</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        dist[i]=inf,vis[i]=<span class="number">0</span>;</span><br><span class="line">    dist[t]=<span class="number">0</span>;</span><br><span class="line">    vis[t]=<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt;q;</span><br><span class="line">    q.push_back(t);</span><br><span class="line">    <span class="keyword">while</span>(!q.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u=q.front();</span><br><span class="line">        q.pop_front();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=head[u];i!=<span class="number">-1</span>;i=e[i].nxt)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> v=e[i].to;</span><br><span class="line">            <span class="keyword">if</span>(e[i^<span class="number">1</span>].weigh&amp;&amp;dist[v]&gt;dist[u]-e[i].cost)</span><br><span class="line">            &#123;</span><br><span class="line">                dist[v]=dist[u]-e[i].cost;</span><br><span class="line">                <span class="keyword">if</span>(!vis[v])</span><br><span class="line">                &#123;</span><br><span class="line">                    vis[v]=<span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">if</span>(!q.empty()&amp;&amp;dist[v]&lt;dist[q.front()])</span><br><span class="line">                        q.push_front(v);</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        q.push_back(v);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        vis[u]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(dist[s]&lt;inf)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> t,<span class="keyword">int</span> dis)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(u==t)</span><br><span class="line">    &#123;</span><br><span class="line">        vis[t]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> dis;</span><br><span class="line">    &#125;</span><br><span class="line">    vis[u]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> used=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=head[u];i!=<span class="number">-1</span>;i=e[i].nxt)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v=e[i].to;</span><br><span class="line">        <span class="keyword">if</span>(!vis[v]&amp;&amp;e[i].weigh&amp;&amp;dist[u]-e[i].cost==dist[v])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> a=dfs(v,t,min(e[i].weigh,dis-used));</span><br><span class="line">            <span class="keyword">if</span>(a)</span><br><span class="line">            &#123;</span><br><span class="line">                ans+=a*e[i].cost;</span><br><span class="line">                e[i].weigh-=a;</span><br><span class="line">                e[i^<span class="number">1</span>].weigh+=a;</span><br><span class="line">                used+=a;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(used==dis)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> used;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">CostFlow</span><span class="params">(<span class="keyword">int</span> s,<span class="keyword">int</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> flow=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(SPFA(s,t))</span><br><span class="line">    &#123;</span><br><span class="line">        vis[t]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(vis[t])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">                vis[i]=<span class="number">0</span>;</span><br><span class="line">            flow+=dfs(s,t,inf);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> flow;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(head,<span class="number">-1</span>,<span class="keyword">sizeof</span>(head));</span><br><span class="line">    n=read(),m=read(),S=read(),T=read();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u=read(),v=read(),w=read(),f=read();</span><br><span class="line">        add(u,v,w,f);</span><br><span class="line">        add(v,u,<span class="number">0</span>,-f);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d "</span>,CostFlow(S,T));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>,ans);;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>看完代码和上面的一比较，你们大概会觉得没什么区别吧，说起来也差不多，就是SPFA的时候用了个双端队列的STL，然后入队时加入了一点玄学特判，总之就是这样了，反正这样就快一些就是了。</p><p>【注】本段部分引用<a href="https://blog.csdn.net/jzq233jzq/article/details/73123089" target="_blank" rel="noopener">一种更高效的费用流算法——zkw费用流</a></p><hr><p>然后费用流就讲完了DA☆ZE！</p>]]></content>
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图论 </tag>
            
            <tag> 网络流 </tag>
            
            <tag> 费用流 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>最短路</title>
      <link href="/2018/03/28/%E6%9C%80%E7%9F%AD%E8%B7%AF/"/>
      <url>/2018/03/28/%E6%9C%80%E7%9F%AD%E8%B7%AF/</url>
      <content type="html"><![CDATA[<p>如标题所示，这一类的算法就是为了解决这一类的单源最短路径问题。</p><p>所谓的单源最短路径问题呢，就是指在一个有向图中，给定点S，要求从S点出发遍历全图的最短路径。</p><p>例题：<a href="https://www.luogu.org/problemnew/show/P3371#sub" target="_blank" rel="noopener">P3371 【模板】单源最短路径</a></p><p>以下我来讲几种算法（如果有可能的话）</p><a id="more"></a><h1 id="1、SPFA"><a href="#1、SPFA" class="headerlink" title="1、SPFA"></a>1、SPFA</h1><p>它被誉为“最快最好用的最短路算法”，<del>但是被各种心狠手辣的出题人卡成了狗</del>自有其优越性，毕竟像笔者这种蒟蒻都看了一遍就懂了。</p><p>SPFA用了一种动态逼近的方法，设立一个先进先出的队列q来保存待优化的节点，每次取出队首的节点u，并用u点当前的最短路径的估计值对离开u指向的v节点进行松弛操作，如果v点的最短路径估计值有所调整，并且v不在当前队列中，就把它放入队列中如此不断从队列中取出节点进行松弛操作，直至队列空为止。</p><p>那么说到松弛操作，原理就是十分著名的三角不等式，即我们数学中都用过的“两边之和大于第三边”，也就是v当前的最短路径估算值大于u当前的最短路径估算值与边[u,v]的长度之和，那么就更新v最短路径的估算值，也就是这样：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(dist[v]&gt;dist[u]+e[i].weigh)</span><br><span class="line">dist[v]=dist[u]+e[i].weigh;</span><br></pre></td></tr></table></figure></p><p>当然，实际的代码中还要加上进队的操作。</p><p>当然你也许会说，这个怎么这么像BFS呢？其实还真有点，区别就在于BFS中一个点不能重复进队，而这里是可以反复松弛的。</p><p><strong>切记：每次取出队首节点的时候一定要清空标记！！</strong></p><p>那么在贴代码之前，先来手玩一下样例。样例图如下：</p><p><img src="http://b289.photo.store.qq.com/psb?/V137oTmC2F4y9l/QzGubFdwvbb*zKqW6BSSa2aeEGzCTK0gQXF4f9iTYno!/c/dCEBAAAAAAAA&amp;bo=WgHzAFoB8wABACc!" alt=""></p><p>过程如下：</p><div class="table-container"><table><thead><tr><th style="text-align:center">Array</th><th style="text-align:center">1</th><th style="text-align:center">2</th><th style="text-align:center">3</th><th style="text-align:center">4</th></tr></thead><tbody><tr><td style="text-align:center">q</td><td style="text-align:center">1</td><td style="text-align:center">-</td><td style="text-align:center">-</td><td style="text-align:center">-</td></tr><tr><td style="text-align:center">dis</td><td style="text-align:center">0</td><td style="text-align:center">inf</td><td style="text-align:center">inf</td><td style="text-align:center">inf</td></tr></tbody></table></div><p>源点1进队，更新最短距离</p><div class="table-container"><table><thead><tr><th style="text-align:center">Array</th><th style="text-align:center">1</th><th style="text-align:center">2</th><th style="text-align:center">3</th><th style="text-align:center">4</th></tr></thead><tbody><tr><td style="text-align:center">q</td><td style="text-align:center">2</td><td style="text-align:center">3</td><td style="text-align:center">4</td><td style="text-align:center">-</td></tr><tr><td style="text-align:center">dis</td><td style="text-align:center">0</td><td style="text-align:center">2</td><td style="text-align:center">5</td><td style="text-align:center">4</td></tr></tbody></table></div><p>1出队，2、3、4进队，2&lt;inf，5&lt;inf，4&lt;inf，更新2、3、4的最短路径</p><div class="table-container"><table><thead><tr><th style="text-align:center">Array</th><th style="text-align:center">1</th><th style="text-align:center">2</th><th style="text-align:center">3</th><th style="text-align:center">4</th></tr></thead><tbody><tr><td style="text-align:center">q</td><td style="text-align:center">3</td><td style="text-align:center">4</td><td style="text-align:center">-</td><td style="text-align:center">-</td></tr><tr><td style="text-align:center">dis</td><td style="text-align:center">0</td><td style="text-align:center">2</td><td style="text-align:center">4</td><td style="text-align:center">3</td></tr></tbody></table></div><p>2出队，5&gt;2+2，4&gt;2+1，更新3、4的最短路径</p><div class="table-container"><table><thead><tr><th style="text-align:center">Array</th><th style="text-align:center">1</th><th style="text-align:center">2</th><th style="text-align:center">3</th><th style="text-align:center">4</th></tr></thead><tbody><tr><td style="text-align:center">q</td><td style="text-align:center">4</td><td style="text-align:center">-</td><td style="text-align:center">-</td><td style="text-align:center">-</td></tr><tr><td style="text-align:center">dis</td><td style="text-align:center">0</td><td style="text-align:center">2</td><td style="text-align:center">4</td><td style="text-align:center">3</td></tr></tbody></table></div><p>3出队</p><div class="table-container"><table><thead><tr><th style="text-align:center">Array</th><th style="text-align:center">1</th><th style="text-align:center">2</th><th style="text-align:center">3</th><th style="text-align:center">4</th></tr></thead><tbody><tr><td style="text-align:center">q</td><td style="text-align:center">-</td><td style="text-align:center">-</td><td style="text-align:center">-</td><td style="text-align:center">-</td></tr><tr><td style="text-align:center">dis</td><td style="text-align:center">0</td><td style="text-align:center">2</td><td style="text-align:center">4</td><td style="text-align:center">3</td></tr></tbody></table></div><p>4出队，队列已空，此时已找到最短路径</p><p>以下是代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 1000000+110</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 0x7fffffff</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,S,cnt;</span><br><span class="line"><span class="keyword">int</span> dist[N],head[N],q[N];</span><br><span class="line"><span class="keyword">bool</span> vis[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> to,nxt,weigh;</span><br><span class="line">&#125;e[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">'-'</span>)</span><br><span class="line">            f=<span class="number">-1</span>;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[++cnt]=(edge)&#123;v,head[u],w&#125;;</span><br><span class="line">    head[u]=cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">SPFA</span><span class="params">(<span class="keyword">int</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> fr=<span class="number">1</span>,tl=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        dist[i]=inf,vis[i]=<span class="number">0</span>;</span><br><span class="line">    dist[s]=<span class="number">0</span>;</span><br><span class="line">    q[<span class="number">1</span>]=s;</span><br><span class="line">    vis[s]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(tl&lt;fr)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u=q[++tl];</span><br><span class="line">        vis[u]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=head[u];i;i=e[i].nxt)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> v=e[i].to;</span><br><span class="line">            <span class="keyword">if</span>(dist[v]&gt;dist[u]+e[i].weigh)</span><br><span class="line">            &#123;</span><br><span class="line">                dist[v]=dist[u]+e[i].weigh;</span><br><span class="line">                <span class="keyword">if</span>(!vis[v])</span><br><span class="line">                &#123;</span><br><span class="line">                    q[++fr]=v;</span><br><span class="line">                    vis[v]=<span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n=read(),m=read(),S=read();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u=read(),v=read(),w=read();</span><br><span class="line">        add(u,v,w);</span><br><span class="line">    &#125;</span><br><span class="line">    SPFA(S);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>,dist[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>虽然这样写基本正确，但如果面对这样一个图，SPFA就很绝望了：</p><p><img src="http://b289.photo.store.qq.com/psb?/V137oTmC2F4y9l/ndvqtccKCoyRQveb9Xfz8RpBPNFaWOyO5ZbNSM4HsDM!/c/dCEBAAAAAAAA&amp;bo=ZgI5AWYCOQEBACc!" alt=""></p><p>可以看到，1、2、4三点间形成了一个负环，也就是说这几个点间没有所谓的最短路，因此就会无限的跑下去。</p><p>那么怎么办呢？我们可以对每个点入队的次数进行限制，如果超过所有点的总数，那么就可以判断出现了负环，就跳出函数。</p><p>代码也没有太大的区别：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">SPFA</span><span class="params">(<span class="keyword">int</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> fr=<span class="number">1</span>,tl=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        dist[i]=inf,vis[i]=<span class="number">0</span>,c[i]=<span class="number">0</span>;</span><br><span class="line">    dist[s]=<span class="number">0</span>;</span><br><span class="line">    q[<span class="number">1</span>]=s;</span><br><span class="line">    vis[s]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(tl&lt;fr)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u=q[++tl];</span><br><span class="line">        vis[u]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=head[u];i;i=e[i].nxt)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> v=e[i].to;</span><br><span class="line">            <span class="keyword">if</span>(dist[v]&gt;dist[u]+e[i].weigh)</span><br><span class="line">            &#123;</span><br><span class="line">                dist[v]=dist[u]+e[i].weigh;</span><br><span class="line">                <span class="keyword">if</span>(!vis[v])</span><br><span class="line">                &#123;</span><br><span class="line">                    q[++fr]=v;</span><br><span class="line">                    c[v]++;</span><br><span class="line">                    vis[v]=<span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">if</span>(c[v]&gt;n)</span><br><span class="line">                        <span class="keyword">do</span> something,<span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>还有另一种办法，就是使用DFS跑SPFA，但是会稍微慢一点……吧</p><p>但是优点是负环的判断很简单，只要松弛了未清除标记的点就判定为出现负环。</p><p>下面是<a href="https://www.luogu.org/problemnew/show/P3385" target="_blank" rel="noopener">P3385 【模板】负环</a>的代码（才不是跑P3371的时候T掉了呢，哼！<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 1000000+110</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 0x7fffffff</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,S,cnt;</span><br><span class="line"><span class="keyword">int</span> dist[N],head[N],q[N];</span><br><span class="line"><span class="keyword">bool</span> vis[N],flag;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> to,nxt,weigh;</span><br><span class="line">&#125;e[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">'-'</span>)</span><br><span class="line">            f=<span class="number">-1</span>;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[++cnt]=(edge)&#123;v,head[u],w&#125;;</span><br><span class="line">    head[u]=cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">SPFA</span><span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vis[u]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=head[u];i;i=e[i].nxt)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v=e[i].to;</span><br><span class="line">        <span class="keyword">if</span>(dist[v]&gt;dist[u]+e[i].weigh)</span><br><span class="line">        &#123;</span><br><span class="line">            dist[v]=dist[u]+e[i].weigh;</span><br><span class="line">            <span class="keyword">if</span>(vis[v]||flag)</span><br><span class="line">            &#123;</span><br><span class="line">                flag=<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            SPFA(v);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    vis[u]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T=read();</span><br><span class="line">    <span class="keyword">while</span>(T--)</span><br><span class="line">    &#123;</span><br><span class="line">        n=read(),m=read();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">            dist[i]=<span class="number">0</span>,vis[i]=<span class="number">0</span>,head[i]=<span class="number">0</span>;</span><br><span class="line">        flag=<span class="number">0</span>,cnt=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> u=read(),v=read(),w=read();</span><br><span class="line">            add(u,v,w);</span><br><span class="line">            <span class="keyword">if</span>(w&gt;<span class="number">0</span>)</span><br><span class="line">                add(v,u,w);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            SPFA(i);</span><br><span class="line">            <span class="keyword">if</span>(flag)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"YE5\n"</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"N0\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>再放一道例题：<a href="https://www.luogu.org/problemnew/show/P1027" target="_blank" rel="noopener">P1027 Car的旅行路线</a><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 400+10</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 0x7fffffff</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ri register int</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,s,t,A,B,cnt,head[N],q[N];</span><br><span class="line"><span class="keyword">double</span> dist[N];</span><br><span class="line"><span class="keyword">bool</span> vis[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Vector</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x,y;</span><br><span class="line">    Vector(<span class="keyword">int</span> X,<span class="keyword">int</span> Y)</span><br><span class="line">    &#123;</span><br><span class="line">        x=X,y=Y;</span><br><span class="line">    &#125;</span><br><span class="line">    Vector()</span><br><span class="line">    &#123;</span><br><span class="line">        x=<span class="number">0</span>,y=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> <span class="keyword">operator</span> * (<span class="keyword">const</span> Vector &amp;v)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> ret;</span><br><span class="line">        ret=x*v.x+y*v.y;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    Vector <span class="keyword">operator</span> - (<span class="keyword">const</span> Vector &amp;v)</span><br><span class="line">    &#123;</span><br><span class="line">        Vector ret;</span><br><span class="line">        ret.x=x-v.x;</span><br><span class="line">        ret.y=y-v.y;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">city</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    Vector apt[<span class="number">5</span>];</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x1,<span class="keyword">int</span> y1,<span class="keyword">int</span> x2,<span class="keyword">int</span> y2,<span class="keyword">int</span> x3,<span class="keyword">int</span> y3,<span class="keyword">int</span> x4,<span class="keyword">int</span> y4,<span class="keyword">int</span> t)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        apt[<span class="number">1</span>].x=x1,apt[<span class="number">1</span>].y=y1,apt[<span class="number">2</span>].x=x2,apt[<span class="number">2</span>].y=y2,apt[<span class="number">3</span>].x=x3,apt[<span class="number">3</span>].y=y3,apt[<span class="number">4</span>].x=x4,apt[<span class="number">4</span>].y=y4;</span><br><span class="line">        T=t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> to,nxt;</span><br><span class="line">    <span class="keyword">double</span> weight;</span><br><span class="line">&#125;;</span><br><span class="line">city C[N];</span><br><span class="line">edge e[<span class="number">100000</span>];</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">work</span><span class="params">(<span class="keyword">int</span> x1,<span class="keyword">int</span> y1,<span class="keyword">int</span> x2,<span class="keyword">int</span> y2,<span class="keyword">int</span> x3,<span class="keyword">int</span> y3,<span class="keyword">int</span> &amp;x4,<span class="keyword">int</span> &amp;y4)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Vector ab(x1-x2,y1-y2),bc(x2-x3,y2-y3),ac(x3-x1,y3-y1);</span><br><span class="line">    <span class="keyword">if</span>(ab*bc==<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        x4=x3+x1-x2;</span><br><span class="line">        y4=y3+y1-y2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(ab*ac==<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        x4=x3+x2-x1;</span><br><span class="line">        y4=y3+y2-y1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        x4=x1+x2-x3;</span><br><span class="line">        y4=y1+y2-y3;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">double</span> <span class="title">Vector_module</span><span class="params">(Vector v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sqrt</span>(v.x*v.x+v.y*v.y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">double</span> w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[++cnt]=(edge)&#123;v,head[u],w&#125;;</span><br><span class="line">    head[u]=cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">SPFA</span><span class="params">(<span class="keyword">int</span> S)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> fr=<span class="number">4</span>,tl=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(ri i=<span class="number">1</span>;i&lt;=s;i++)</span><br><span class="line">        <span class="keyword">for</span>(ri j=<span class="number">1</span>;j&lt;=<span class="number">4</span>;j++)</span><br><span class="line">            dist[<span class="number">4</span>*(i<span class="number">-1</span>)+j]=inf;</span><br><span class="line">    <span class="keyword">for</span>(ri i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)</span><br><span class="line">        dist[S+i]=<span class="number">0</span>,vis[S+i]=<span class="number">1</span>,q[i+<span class="number">1</span>]=S+i;</span><br><span class="line">    <span class="keyword">while</span>(tl&lt;fr)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u=q[++tl];</span><br><span class="line">        vis[u]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(ri i=head[u];i;i=e[i].nxt)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> v=e[i].to;</span><br><span class="line">            <span class="keyword">if</span>(dist[v]&gt;dist[u]+e[i].weight)</span><br><span class="line">            &#123;</span><br><span class="line">                dist[v]=dist[u]+e[i].weight;</span><br><span class="line">                <span class="keyword">if</span>(!vis[v])</span><br><span class="line">                &#123;</span><br><span class="line">                    q[++fr]=v;</span><br><span class="line">                    vis[v]=<span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    <span class="keyword">while</span>(n--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span>(vis));</span><br><span class="line">        <span class="built_in">memset</span>(e,<span class="number">0</span>,<span class="keyword">sizeof</span>(e));</span><br><span class="line">        <span class="built_in">memset</span>(C,<span class="number">0</span>,<span class="keyword">sizeof</span>(C));</span><br><span class="line">        <span class="built_in">memset</span>(head,<span class="number">0</span>,<span class="keyword">sizeof</span>(head));</span><br><span class="line">        cnt=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d %d %d"</span>,&amp;s,&amp;t,&amp;A,&amp;B);</span><br><span class="line">        <span class="keyword">for</span>(ri i=<span class="number">1</span>;i&lt;=s;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> x1,x2,x3,x4;</span><br><span class="line">            <span class="keyword">int</span> y1,y2,y3,y4;</span><br><span class="line">            <span class="keyword">int</span> T;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d %d %d %d %d %d %d"</span>,&amp;x1,&amp;y1,&amp;x2,&amp;y2,&amp;x3,&amp;y3,&amp;T);</span><br><span class="line">            work(x1,y1,x2,y2,x3,y3,x4,y4);</span><br><span class="line">            C[i].add(x1,y1,x2,y2,x3,y3,x4,y4,T);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(ri i=<span class="number">1</span>;i&lt;=s;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(ri j=<span class="number">1</span>;j&lt;=<span class="number">3</span>;j++)</span><br><span class="line">                <span class="keyword">for</span>(ri k=j+<span class="number">1</span>;k&lt;=<span class="number">4</span>;k++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">double</span> w=Vector_module(C[i].apt[j]-C[i].apt[k])*C[i].T;</span><br><span class="line">                    add_edge(<span class="number">4</span>*(i<span class="number">-1</span>)+j,<span class="number">4</span>*(i<span class="number">-1</span>)+k,w);</span><br><span class="line">                    add_edge(<span class="number">4</span>*(i<span class="number">-1</span>)+k,<span class="number">4</span>*(i<span class="number">-1</span>)+j,w);</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="keyword">for</span>(ri j=i+<span class="number">1</span>;j&lt;=s;j++)</span><br><span class="line">                <span class="keyword">for</span>(ri k=<span class="number">1</span>;k&lt;=<span class="number">4</span>;k++)</span><br><span class="line">                    <span class="keyword">for</span>(ri l=<span class="number">1</span>;l&lt;=<span class="number">4</span>;l++)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">double</span> w=Vector_module(C[i].apt[k]-C[j].apt[l])*t;</span><br><span class="line">                        add_edge(<span class="number">4</span>*(i<span class="number">-1</span>)+k,<span class="number">4</span>*(j<span class="number">-1</span>)+l,w);</span><br><span class="line">                        add_edge(<span class="number">4</span>*(j<span class="number">-1</span>)+l,<span class="number">4</span>*(i<span class="number">-1</span>)+k,w);</span><br><span class="line">                    &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        SPFA(<span class="number">4</span>*(A<span class="number">-1</span>)+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">double</span> ans=inf;</span><br><span class="line">        <span class="keyword">for</span>(ri i=<span class="number">1</span>;i&lt;=<span class="number">4</span>;i++)</span><br><span class="line">            ans=min(ans,dist[<span class="number">4</span>*(B<span class="number">-1</span>)+i]);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%.1lf\n"</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图论 </tag>
            
            <tag> 最短路 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>网络最大流</title>
      <link href="/2018/03/24/%E7%BD%91%E7%BB%9C%E6%9C%80%E5%A4%A7%E6%B5%81/"/>
      <url>/2018/03/24/%E7%BD%91%E7%BB%9C%E6%9C%80%E5%A4%A7%E6%B5%81/</url>
      <content type="html"><![CDATA[<p>在图中，有这样一类问题：在一张有向图中，指定源点S和汇点T，每条边的最大容量已知，求从S到T的最大流量。</p><p>这就是网络最大流问题，我们可以说的具体一点：一个自来水管道网，你家是汇点，自来水厂是源点，每根管道的粗细是一定的，求能流到你家的水最多有多少。</p><p>这个问题的关键在于，当有找到一条路径的时候，这条路径所经过的边的容量就会被占用一部分。</p><a id="more"></a><p>我们定义：<br>源点：只有流出去的点<br>汇点：只有流进来的点<br>流量：一条边上流过的流量<br>容量：一条边上可供流过的最大流量<br>残量：一条边上的容量-流量</p><p>模板题：<a href="https://www.luogu.org/problemnew/show/P3376" target="_blank" rel="noopener">P3376 【模板】网络最大流</a></p><p>我在这里介绍以下几种算法：</p><h1 id="1、Edmond-Karp（EK）动能算法"><a href="#1、Edmond-Karp（EK）动能算法" class="headerlink" title="1、Edmond-Karp（EK）动能算法"></a>1、Edmond-Karp（EK）<del>动能</del>算法</h1><p>EK这东西比较的简单粗暴，但复杂度是平方级别的O($m^2n$)，所以跑的比较慢</p><p>首先我们说如果所有边上的流量都没有超过容量(不大于容量)，那么就把这一组流量，或者说，这个流，称为一个可行流。一个最简单的例子就是，零流，即所有的流量都是0的流。</p><p>我们就从这个零流开始考虑，假如有这么一条路，这条路从源点开始一直一段一段的连到了汇点，并且，这条路上的每一段都满足流量&lt;容量，注意，是严格的&lt;,而不是&lt;=。那么，我们一定能找到这条路上的每一段的(容量-流量)的值当中的最小值delta。我们把这条路上每一段的流量都加上这个delta，一定可以保证这个流依然是可行流，这是显然的。</p><p>这样我们就得到了一个更大的流，他的流量是之前的流量+delta，而这条路就叫做增广路。</p><p>我们不断地从起点开始寻找增广路，每次都对其进行增广，直到源点和汇点不连通，也就是找不到增广路为止。当找不到增广路的时候，当前的流量就是最大流，这个结论非常重要。</p><p>那么我们寻找增广路的时候就简单的从源点开始做bfs，不断的修改这条路上的delta值，直到找到源点或找不到增广路。</p><p>但是这样会出一点锅，为什么呢？</p><p>来看下面这张图：</p><p><img src="http://b287.photo.store.qq.com/psb?/V137oTmC2F4y9l/YJJRoy4hpnb557YkUnYBKl4r05m2jumDGIUd4Ndd408!/c/dB8BAAAAAAAA&amp;bo=fQJVAX0CVQEBACc!" alt=""></p><p>这个图我们一看就知道正确的方法是S-1-T和S-2-T，最大流就是2。但如果你的程序走过了S-1-2-T这条路，图就变成了这样：</p><p><img src="http://b289.photo.store.qq.com/psb?/V137oTmC2F4y9l/22Vml49RkiVKleE9Uqrk0UcbY467yZdQs*NPzCgQENI!/c/dCEBAAAAAAAA&amp;bo=bwJAAW8CQAEBACc!" alt=""></p><p>这样源点与汇点就不连通了，但此时毫无疑问并不是最大值。那么该怎么办呢？我们可以考虑加入反向边，反向边初始容量都为0，然后在一条边的容量减少delta的时候把反向边的容量加上delta。</p><p>就拿上面那个图来说，加入反向边以后图就变成了这样：</p><p><img src="http://b289.photo.store.qq.com/psb?/V137oTmC2F4y9l/0lQWOEvDGApYSPwhlJIYzeGXxMTJ0IeDphZF3dKEUKQ!/c/dCEBAAAAAAAA&amp;bo=bwJAAW8CQAEBACc!" alt=""></p><p>然后就可以搜到这样一条路（亮瞎眼的那条黄色路径）：</p><p><img src="http://b290.photo.store.qq.com/psb?/V137oTmC2F4y9l/xxlMnLH1kAT6N6YCuZ2Bt7A7VkEtR1KxGtAa8CLxWyE!/c/dCIBAAAAAAAA&amp;bo=dgJHAXYCRwEBACc!" alt=""></p><p>这样就可以得到2的正确答案了。</p><p>那么这样为什么是对的呢？很简单，走2-1的时候就相当于把1-2这条边已经走的退了回去，这样就又变成了S-1-T和S-2-T两条路了。这样就给了程序一个反悔的机会。</p><p>然后就完了DA☆ZE！</p><p>贴代码（236ms）：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 200000+110</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,S,T,cnt,ans;</span><br><span class="line"><span class="keyword">int</span> head[N],q[N],pre[N];</span><br><span class="line"><span class="keyword">bool</span> vis[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> fr,to,nxt,weigh;</span><br><span class="line">&#125;e[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">'-'</span>)</span><br><span class="line">            f=<span class="number">-1</span>;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[cnt]=(edge)&#123;u,v,head[u],w&#125;;</span><br><span class="line">    head[u]=cnt++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> s,<span class="keyword">int</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span>(vis));</span><br><span class="line">    <span class="built_in">memset</span>(pre,<span class="number">-1</span>,<span class="keyword">sizeof</span>(pre));</span><br><span class="line">    <span class="keyword">int</span> fr=<span class="number">1</span>,tl=<span class="number">0</span>;</span><br><span class="line">    q[<span class="number">1</span>]=s,vis[s]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(tl&lt;fr)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u=q[++tl];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=head[u];i!=<span class="number">-1</span>;i=e[i].nxt)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> v=e[i].to;</span><br><span class="line">            <span class="keyword">if</span>(!vis[v]&amp;&amp;e[i].weigh&gt;<span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                pre[v]=i;</span><br><span class="line">                vis[v]=<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span>(v==t)</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                q[++fr]=v;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">EK</span><span class="params">(<span class="keyword">int</span> s,<span class="keyword">int</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> mn;</span><br><span class="line">    <span class="keyword">while</span>(bfs(s,t))</span><br><span class="line">    &#123;</span><br><span class="line">        mn=<span class="number">0x7fffffff</span>;</span><br><span class="line">        <span class="keyword">int</span> i=pre[t];</span><br><span class="line">        <span class="keyword">while</span>(i!=<span class="number">-1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            mn=min(mn,e[i].weigh);</span><br><span class="line">            i=pre[e[i].fr];</span><br><span class="line">        &#125;</span><br><span class="line">        i=pre[t];</span><br><span class="line">        <span class="keyword">while</span>(i!=<span class="number">-1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            e[i].weigh-=mn;</span><br><span class="line">            e[i^<span class="number">1</span>].weigh+=mn;</span><br><span class="line">            i=pre[e[i].fr];</span><br><span class="line">        &#125;</span><br><span class="line">        ans+=mn;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(head,<span class="number">-1</span>,<span class="keyword">sizeof</span>(head));</span><br><span class="line">    n=read(),m=read(),S=read(),T=read();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u,v,w;</span><br><span class="line">        u=read(),v=read(),w=read();</span><br><span class="line">        add(u,v,w);</span><br><span class="line">        add(v,u,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>,EK(S,T));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>pre数组的作用是记录到达每个顶点的边。</p><p>【注明】本段讲解部分引用<a href="http://blog.sina.com.cn/s/blog_6cf509db0100uy5n.html" target="_blank" rel="noopener">最大流模板【EdmondsKarp算法，简称EK算法，O(m^2n)】</a></p><hr><h1 id="2、Dinic算法"><a href="#2、Dinic算法" class="headerlink" title="2、Dinic算法"></a>2、Dinic算法</h1><p>这个算法的复杂度为O($n^2m$)，虽然仍旧是平方级别，但由于点的数量一般比边的数量少，所以整体比EK跑的要快。</p><h2 id="普通Dinic"><a href="#普通Dinic" class="headerlink" title="普通Dinic"></a>普通Dinic</h2><p>由于EK算法本身的特性，如果之前那张图变成了这样：</p><p><img src="http://b290.photo.store.qq.com/psb?/V137oTmC2F4y9l/Rfjr6Tzt0OzwZFzCs0wflcrUPnPOxau0OER3yfSfJy0!/c/dCIBAAAAAAAA&amp;bo=ZwI3AWcCNwEBACc!" alt=""></p><p>情况就很不乐观了。因为一次增广后图变成这样：</p><p><img src="http://b289.photo.store.qq.com/psb?/V137oTmC2F4y9l/0bVmWeAQCGTDClIveLRvxMjAJ7J0Bo2o0RKu5qJb76I!/c/dCEBAAAAAAAA&amp;bo=ZwI2AWcCNgEBACc!" alt=""></p><p>然后再BFS一次：</p><p><img src="http://b168.photo.store.qq.com/psb?/V137oTmC2F4y9l/TZP8DHtCsbjjLagiCIpfM6cwsYaN3G7u.W9jpUUf0X8!/c/dKgAAAAAAAAA&amp;bo=ZwI1AWcCNQEBACc!" alt=""></p><p>就这么做下去的话毫无疑问会爆炸的。</p><p>所以我们在这里引入一个分层图的概念。对于每一个点，我们根据从源点开始的BFS序列确定其深度，然后进行若干次DFS寻找增广路，每次由u推出的点v的深度必须是u的深度+1，这样就可以达到分层的效果。</p><p>比如说还是上面那张图，它分层后就是这样：</p><p><img src="http://b290.photo.store.qq.com/psb?/V137oTmC2F4y9l/zaoXBtZ4bdd6fsgAsl7iH8PugxGt7AIIBaW2H0Yc6DY!/c/dCIBAAAAAAAA&amp;bo=bgI0AW4CNAEBACc!" alt=""></p><p>然后很明显1和2这两个点在同一深度，它们在DFS中是无法互相搜到的。</p><p>至于BFS过程本身的变化其实不是特别大，对于一个点v进队的条件，不过是从EK的“当前边的残量大于0”变成了“当前边的残量大于0且v点未分配深度”而已，如果v没有分配深度，就把它的深度赋为u的深度+1。</p><p>然后在Dinic的主过程中就只需要不停的寻找增广路知道再也找不到为止。</p><p>以下是代码（手写520ms）：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 200000+110</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 0x7fffffff</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,S,T,cnt;</span><br><span class="line"><span class="keyword">int</span> deep[N/<span class="number">10</span>],head[N],q[N/<span class="number">10</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> to,nxt,weigh;</span><br><span class="line">&#125;e[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">'-'</span>)</span><br><span class="line">            f=<span class="number">-1</span>;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[cnt]=(edge)&#123;v,head[u],w&#125;;</span><br><span class="line">    head[u]=cnt++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> s,<span class="keyword">int</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> fr=<span class="number">1</span>,tl=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(deep,<span class="number">0</span>,<span class="keyword">sizeof</span>(deep));</span><br><span class="line">    deep[s]=<span class="number">1</span>;</span><br><span class="line">    q[<span class="number">1</span>]=s;</span><br><span class="line">    <span class="keyword">while</span>(tl&lt;fr)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u=q[++tl];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=head[u];i!=<span class="number">-1</span>;i=e[i].nxt)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> v=e[i].to;</span><br><span class="line">            <span class="keyword">if</span>(deep[v]==<span class="number">0</span>&amp;&amp;e[i].weigh&gt;<span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                deep[v]=deep[u]+<span class="number">1</span>;</span><br><span class="line">                q[++fr]=v;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!deep[t])</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> t,<span class="keyword">int</span> dist)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(u==t)</span><br><span class="line">        <span class="keyword">return</span> dist;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=head[u];i!=<span class="number">-1</span>;i=e[i].nxt)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v=e[i].to;</span><br><span class="line">        <span class="keyword">if</span>(deep[v]==deep[u]+<span class="number">1</span>&amp;&amp;e[i].weigh&gt;<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> dis=dfs(v,t,min(dist,e[i].weigh));</span><br><span class="line">            <span class="keyword">if</span>(dis&gt;<span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                e[i].weigh-=dis;</span><br><span class="line">                e[i^<span class="number">1</span>].weigh+=dis;</span><br><span class="line">                <span class="keyword">return</span> dis;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Dinic</span><span class="params">(<span class="keyword">int</span> s,<span class="keyword">int</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> Ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(bfs(s,t))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">int</span> delta=dfs(s,t,inf))</span><br><span class="line">            Ans+=delta;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(head,<span class="number">-1</span>,<span class="keyword">sizeof</span>(head));</span><br><span class="line">    n=read(),m=read(),S=read(),T=read();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u=read(),v=read(),w=read();</span><br><span class="line">        add(u,v,w);</span><br><span class="line">        add(v,u,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>,Dinic(S,T));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="当前弧优化的Dinic"><a href="#当前弧优化的Dinic" class="headerlink" title="当前弧优化的Dinic"></a>当前弧优化的Dinic</h2><p>如果你比较细心的话大概就会注意到，EK的时间是236ms，而Dinic却要520ms。可这不对啊，说好的EK复杂度更高呢？原因就在于<del>数据太水</del>每次搜的时候都是从第一条边开始的，然后就导致有许多边被重复搜索，就跑得很慢啦。</p><p>那么我们就记录u之前循环到了哪条边然后直接从这条边开始不就完了吗？</p><p>对，就是这样，只要多开一个cur数组记录一下就行了，然后在DFS的循环中i改变的时候也同时改变cur来记录当前弧，但是不要忘记每一次建立完分层图后都要把cur置为每一个点的第一条边。</p><p>然后就可以跑的很快了DA☆ZE！</p><p>贴代码（手写132ms）：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 200000+110</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 0x7fffffff</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,S,T,cnt;</span><br><span class="line"><span class="keyword">int</span> deep[N/<span class="number">10</span>],head[N],q[N/<span class="number">10</span>],cur[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> to,nxt,weigh;</span><br><span class="line">&#125;e[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">'-'</span>)</span><br><span class="line">            f=<span class="number">-1</span>;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[cnt]=(edge)&#123;v,head[u],w&#125;;</span><br><span class="line">    head[u]=cnt++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> s,<span class="keyword">int</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> fr=<span class="number">1</span>,tl=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(deep,<span class="number">0</span>,<span class="keyword">sizeof</span>(deep));</span><br><span class="line">    deep[s]=<span class="number">1</span>;</span><br><span class="line">    q[<span class="number">1</span>]=s;</span><br><span class="line">    <span class="keyword">while</span>(tl&lt;fr)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u=q[++tl];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=head[u];i!=<span class="number">-1</span>;i=e[i].nxt)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> v=e[i].to;</span><br><span class="line">            <span class="keyword">if</span>(deep[v]==<span class="number">0</span>&amp;&amp;e[i].weigh&gt;<span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                deep[v]=deep[u]+<span class="number">1</span>;</span><br><span class="line">                q[++fr]=v;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!deep[t])</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> t,<span class="keyword">int</span> dist)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(u==t)</span><br><span class="line">        <span class="keyword">return</span> dist;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span>&amp; i=cur[u];i!=<span class="number">-1</span>;i=e[i].nxt)<span class="comment">//当然也可以去掉‘&amp;’然后在循环最后加一句“cur[u]=e[i].nxt”</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v=e[i].to;</span><br><span class="line">        <span class="keyword">if</span>(deep[v]==deep[u]+<span class="number">1</span>&amp;&amp;e[i].weigh&gt;<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> dis=dfs(v,t,min(dist,e[i].weigh));</span><br><span class="line">            <span class="keyword">if</span>(dis&gt;<span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                e[i].weigh-=dis;</span><br><span class="line">                e[i^<span class="number">1</span>].weigh+=dis;</span><br><span class="line">                <span class="keyword">return</span> dis;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Dinic</span><span class="params">(<span class="keyword">int</span> s,<span class="keyword">int</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> Ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(bfs(s,t))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">            cur[i]=head[i];</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">int</span> delta=dfs(s,t,inf))</span><br><span class="line">            Ans+=delta;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(head,<span class="number">-1</span>,<span class="keyword">sizeof</span>(head));</span><br><span class="line">    n=read(),m=read(),S=read(),T=read();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u=read(),v=read(),w=read();</span><br><span class="line">        add(u,v,w);</span><br><span class="line">        add(v,u,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>,Dinic(S,T));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然后我们就得到了真正的Dinic算法</p><p>【注明】本段讲解部分引用<a href="http://sycstudio.com/" target="_blank" rel="noopener">SYCstudio</a>大佬的<a href="https://www.cnblogs.com/SYCstudio/p/7260613.html" target="_blank" rel="noopener">Dinic算法（研究总结，网络流）</a></p>]]></content>
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图论 </tag>
            
            <tag> 网络流 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>莫队</title>
      <link href="/2018/03/15/%E8%8E%AB%E9%98%9F/"/>
      <url>/2018/03/15/%E8%8E%AB%E9%98%9F/</url>
      <content type="html"><![CDATA[<p>%一波莫涛队长orz</p><a id="more"></a><h1 id="普通莫队"><a href="#普通莫队" class="headerlink" title="普通莫队"></a>普通莫队</h1><p>由于没有什么板子，这里放一道基础题。</p><p>给定一个序列，其中有n个元素，有m次查询，每次查询要求输出区间[l,r]内出现次数不少于k的数字的个数。</p><p>其实乍一看，好像就是可以用暴力做……但其实莫队本身也和暴力区别不大，基础思路就是将序列分成sqrt(n)个块，然后在每个块中进行操作。</p><p>以下是代码<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 100000+100</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l,r,k,id,t;</span><br><span class="line">&#125;ask[N];</span><br><span class="line"><span class="keyword">int</span> n,m,blo,a[N],num[N],ans[N],cnt[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(node x,node y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x.t==y.t)</span><br><span class="line">        <span class="keyword">return</span> x.r&lt;y.r;</span><br><span class="line">    <span class="keyword">return</span> x.t&lt;y.t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    num[a[x]]++;</span><br><span class="line">    cnt[num[a[x]]]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Minus</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    num[a[x]]--;</span><br><span class="line">    cnt[num[a[x]]]--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">    blo=<span class="built_in">sqrt</span>(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;ask[i].l,&amp;ask[i].r,&amp;ask[i].k);</span><br><span class="line">        ask[i].id=i;</span><br><span class="line">        ask[i].t=ask[i].l/blo;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(ask+<span class="number">1</span>,ask+<span class="number">1</span>+m,cmp);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=ask[<span class="number">1</span>].l;i&lt;=ask[<span class="number">1</span>].r;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        num[a[i]]++;</span><br><span class="line">        cnt[num[a[i]]]++;</span><br><span class="line">    &#125;</span><br><span class="line">    ans[ask[<span class="number">1</span>].id]=cnt[ask[<span class="number">1</span>].k];</span><br><span class="line">    <span class="keyword">int</span> L=ask[<span class="number">1</span>].l;</span><br><span class="line">    <span class="keyword">int</span> R=ask[<span class="number">1</span>].r;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(L&gt;ask[i].l)</span><br><span class="line">        &#123;</span><br><span class="line">            L--;</span><br><span class="line">            add(L);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(R&lt;ask[i].r)</span><br><span class="line">        &#123;</span><br><span class="line">            R++;</span><br><span class="line">            add(R);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(L&lt;ask[i].l)</span><br><span class="line">        &#123;</span><br><span class="line">            Minus(L);</span><br><span class="line">            L++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(R&gt;ask[i].r)</span><br><span class="line">        &#123;</span><br><span class="line">            Minus(R);</span><br><span class="line">            R--;</span><br><span class="line">        &#125;</span><br><span class="line">        ans[ask[i].id]=cnt[ask[i].k];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在这个程序中，我们用num[j]来记录j的出现次数，用cnt[j]记录出现次数不小于j的数的个数，在离线操作的基础上，对每次查询依照左端点所在的块进行排序，如果所在块相同则按照右端点进行排序，可以保证L，R两个指针的跳动次数尽可能的小以降低复杂度。</p><p>然后在对每次查询的更新中不断跳动L、R，拓宽区间的时候先拓宽再操作，缩小区间的时候则先操作再缩小，最终在记录下来的ans数组中查询答案。</p><p>以下是几道题：</p><p><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=3809" target="_blank" rel="noopener">BZOJ 3809: Gty的二逼妹子序列</a></p><p>手写AC（调了一下午的绝望）<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 1000000+1000</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,blo,cnt;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">100005</span>],ans[<span class="number">1000005</span>];</span><br><span class="line"><span class="keyword">int</span> bel[<span class="number">100005</span>];</span><br><span class="line"><span class="keyword">int</span> num[<span class="number">100005</span>],bloans[<span class="number">1005</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> l,r,p,q,id;</span><br><span class="line">&#125;ask[<span class="number">1000005</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;<span class="string">'9'</span>||ch&lt;<span class="string">'0'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(f==<span class="string">'-'</span>)</span><br><span class="line">            f=<span class="number">-1</span>;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (ch&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(node x,node y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(bel[x.l]==bel[y.l])</span><br><span class="line">        <span class="keyword">return</span> x.r&lt;y.r;</span><br><span class="line">    <span class="keyword">return</span> bel[x.l]&lt;bel[y.l];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    num[a[x]]++;</span><br><span class="line">    <span class="keyword">if</span>(num[a[x]]==<span class="number">1</span>)</span><br><span class="line">        bloans[bel[a[x]]]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Minus</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    num[a[x]]--;</span><br><span class="line">    <span class="keyword">if</span>(!num[a[x]])</span><br><span class="line">        bloans[bel[a[x]]]--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> ret=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> L=bel[x];</span><br><span class="line">    <span class="keyword">int</span> R=bel[y];</span><br><span class="line"><span class="keyword">if</span>(L==R)</span><br><span class="line">&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=x;i&lt;=y;i++)</span><br><span class="line">&#123;</span><br><span class="line">            <span class="keyword">if</span>(num[i])</span><br><span class="line">                ret++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=x;i&lt;(L+<span class="number">1</span>)*blo;i++)</span><br><span class="line">&#123;</span><br><span class="line">            <span class="keyword">if</span>(num[i])</span><br><span class="line">                ret++;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=R*blo;i&lt;=y;i++)</span><br><span class="line">&#123;</span><br><span class="line">            <span class="keyword">if</span>(num[i])</span><br><span class="line">                ret++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=L+<span class="number">1</span>;i&lt;R;i++)</span><br><span class="line">    ret+=bloans[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n=read();</span><br><span class="line">    m=read();</span><br><span class="line">    blo=<span class="built_in">sqrt</span>(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        a[i]=read();</span><br><span class="line">        bel[i]=i/blo;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        ask[i].l=read();</span><br><span class="line">        ask[i].r=read();</span><br><span class="line">        ask[i].p=read();</span><br><span class="line">        ask[i].q=read();</span><br><span class="line">        ask[i].id=i;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(ask+<span class="number">1</span>,ask+<span class="number">1</span>+m,cmp);</span><br><span class="line">    <span class="keyword">int</span> L=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> R=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(L&gt;ask[i].l)</span><br><span class="line">        &#123;</span><br><span class="line">            L--;</span><br><span class="line">            add(L);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(R&lt;ask[i].r)</span><br><span class="line">        &#123;</span><br><span class="line">            R++;</span><br><span class="line">            add(R);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(L&lt;ask[i].l)</span><br><span class="line">        &#123;</span><br><span class="line">            Minus(L);</span><br><span class="line">            L++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(R&gt;ask[i].r)</span><br><span class="line">        &#123;</span><br><span class="line">            Minus(R);</span><br><span class="line">            R--;</span><br><span class="line">        &#125;</span><br><span class="line">        ans[ask[i].id]=query(ask[i].p,ask[i].q);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这道题说起来难度其实不大，一个值域分块的莫队保证m√n的复杂度完全没压力，就是这个28Mb的空间稍微有点坑。</p><p><a href="https://www.luogu.org/problemnew/show/P4137" target="_blank" rel="noopener"> P4137 Rmq Problem / mex</a></p><p>手写AC（一遍A O2-1296ms）<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 200000+1000</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l,r,id;</span><br><span class="line">&#125;ask[N];</span><br><span class="line"><span class="keyword">int</span> n,m,blo,now,a[N],num[N],ans[N],bel[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;<span class="string">'9'</span>||ch&lt;<span class="string">'0'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(f==<span class="string">'-'</span>)</span><br><span class="line">            f=<span class="number">-1</span>;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (ch&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(node x,node y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(bel[x.l]==bel[y.l])</span><br><span class="line">        <span class="keyword">return</span> x.r&lt;y.r;</span><br><span class="line">    <span class="keyword">return</span> bel[x.l]&lt;bel[y.l];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a[x]&gt;n)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    num[a[x]]++;</span><br><span class="line">    <span class="keyword">if</span>(a[x]==now)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(num[now])</span><br><span class="line">            now++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Minus</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a[x]&gt;n)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    num[a[x]]--;</span><br><span class="line">    <span class="keyword">if</span>(a[x]&lt;now)</span><br><span class="line">        <span class="keyword">if</span>(!num[a[x]])</span><br><span class="line">            now=a[x];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n=read();</span><br><span class="line">    m=read();</span><br><span class="line">    blo=<span class="built_in">sqrt</span>(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        a[i]=read();</span><br><span class="line">        bel[i]=i/blo;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        ask[i].l=read();</span><br><span class="line">        ask[i].r=read();</span><br><span class="line">        ask[i].id=i;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(ask+<span class="number">1</span>,ask+<span class="number">1</span>+m,cmp);</span><br><span class="line">    <span class="keyword">int</span> L=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> R=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(L&gt;ask[i].l)</span><br><span class="line">        &#123;</span><br><span class="line">            L--;</span><br><span class="line">            add(L);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(R&lt;ask[i].r)</span><br><span class="line">        &#123;</span><br><span class="line">            R++;</span><br><span class="line">            add(R);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(L&lt;ask[i].l)</span><br><span class="line">        &#123;</span><br><span class="line">            Minus(L);</span><br><span class="line">            L++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(R&gt;ask[i].r)</span><br><span class="line">        &#123;</span><br><span class="line">            Minus(R);</span><br><span class="line">            R--;</span><br><span class="line">        &#125;</span><br><span class="line">        ans[ask[i].id]=now;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>仍旧是对0到n进行分块，因为最坏情况是a[1]~a[n]对应0~n-1。所以就在上一题的基础上修改一下更新操作，在每次更新的时候与当前的最小值进行比较，如果最小值数量增加就寻找新的最优解，如果有新的解出现并且优于最优解就更新最优解。</p><p><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=3236" target="_blank" rel="noopener">BZOJ 3236: [AHOI2013]作业</a></p><p>手写AC<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;bits/stdc++.h&gt;</span><br><span class="line">#define N 1000000+1000</span><br><span class="line">using namespace std;</span><br><span class="line">int n,m,blo,cnt;</span><br><span class="line">int a[100005],ans[1000005][2];</span><br><span class="line">int bel[100005];</span><br><span class="line">int num[100005],bloans[1005],bloans1[1005];</span><br><span class="line">struct node</span><br><span class="line">&#123;</span><br><span class="line">    int l,r,p,q,id;</span><br><span class="line">&#125;ask[1000005];</span><br><span class="line">inline int read()</span><br><span class="line">&#123;</span><br><span class="line">    int x=0,f=1;</span><br><span class="line">    char ch=getchar();</span><br><span class="line">    while(ch&gt;&apos;9&apos;||ch&lt;&apos;0&apos;)</span><br><span class="line">    &#123;</span><br><span class="line">        if(f==&apos;-&apos;)</span><br><span class="line">            f=-1;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    while (ch&gt;=&apos;0&apos;&amp;&amp;ch&lt;=&apos;9&apos;)</span><br><span class="line">    &#123;</span><br><span class="line">        x=x*10+ch-&apos;0&apos;;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    return x*f;</span><br><span class="line">&#125;</span><br><span class="line">inline bool cmp(node x,node y)</span><br><span class="line">&#123;</span><br><span class="line">    if(bel[x.l]==bel[y.l])</span><br><span class="line">        return x.r&lt;y.r;</span><br><span class="line">    return bel[x.l]&lt;bel[y.l];</span><br><span class="line">&#125;</span><br><span class="line">inline void add(int x)</span><br><span class="line">&#123;</span><br><span class="line">    num[a[x]]++;</span><br><span class="line">    bloans1[bel[a[x]]]++;</span><br><span class="line">    if(num[a[x]]==1)</span><br><span class="line">        bloans[bel[a[x]]]++;</span><br><span class="line">&#125;</span><br><span class="line">inline void Minus(int x)</span><br><span class="line">&#123;</span><br><span class="line">    num[a[x]]--;</span><br><span class="line">    bloans1[bel[a[x]]]--;</span><br><span class="line">    if(!num[a[x]])</span><br><span class="line">        bloans[bel[a[x]]]--;</span><br><span class="line">&#125;</span><br><span class="line">inline int query(int x,int y)</span><br><span class="line">&#123;</span><br><span class="line">    int ret=0;</span><br><span class="line">    int L=bel[x];</span><br><span class="line">    int R=bel[y];</span><br><span class="line">    if(L==R)</span><br><span class="line">    &#123;</span><br><span class="line">        for(register int i=x;i&lt;=y;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            if(num[i])</span><br><span class="line">                ret++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">        for(register int i=x;i&lt;(L+1)*blo;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            if(num[i])</span><br><span class="line">                ret++;</span><br><span class="line">        &#125;</span><br><span class="line">        for(register int i=R*blo;i&lt;=y;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            if(num[i])</span><br><span class="line">                ret++;</span><br><span class="line">        &#125;</span><br><span class="line">        for(register int i=L+1;i&lt;R;i++)</span><br><span class="line">            ret+=bloans[i];</span><br><span class="line">    &#125;</span><br><span class="line">    return ret;</span><br><span class="line">&#125;</span><br><span class="line">inline int Query(int x,int y)</span><br><span class="line">&#123;</span><br><span class="line">    int ret=0;</span><br><span class="line">    int L=bel[x];</span><br><span class="line">    int R=bel[y];</span><br><span class="line">    if(L==R)</span><br><span class="line">    &#123;</span><br><span class="line">        for(register int i=x;i&lt;=y;i++)</span><br><span class="line">            ret+=num[i];</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">        for(register int i=x;i&lt;(L+1)*blo;i++)</span><br><span class="line">            ret+=num[i];</span><br><span class="line">        for(register int i=R*blo;i&lt;=y;i++)</span><br><span class="line">            ret+=num[i];</span><br><span class="line">        for(register int i=L+1;i&lt;R;i++)</span><br><span class="line">            ret+=bloans1[i];</span><br><span class="line">    &#125;</span><br><span class="line">    return ret;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    n=read();</span><br><span class="line">    m=read();</span><br><span class="line">    blo=sqrt(n);</span><br><span class="line">    for(register int i=1;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        a[i]=read();</span><br><span class="line">        bel[i]=i/blo;</span><br><span class="line">    &#125;</span><br><span class="line">    for(register int i=1;i&lt;=m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        ask[i].l=read();</span><br><span class="line">        ask[i].r=read();</span><br><span class="line">        ask[i].p=read();</span><br><span class="line">        ask[i].q=read();</span><br><span class="line">        ask[i].id=i;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(ask+1,ask+1+m,cmp);</span><br><span class="line">    int L=1;</span><br><span class="line">    int R=0;</span><br><span class="line">    for(register int i=1;i&lt;=m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        while(L&gt;ask[i].l)</span><br><span class="line">        &#123;</span><br><span class="line">            L--;</span><br><span class="line">            add(L);</span><br><span class="line">        &#125;</span><br><span class="line">        while(R&lt;ask[i].r)</span><br><span class="line">        &#123;</span><br><span class="line">            R++;</span><br><span class="line">            add(R);</span><br><span class="line">        &#125;</span><br><span class="line">        while(L&lt;ask[i].l)</span><br><span class="line">        &#123;</span><br><span class="line">            Minus(L);</span><br><span class="line">            L++;</span><br><span class="line">        &#125;</span><br><span class="line">        while(R&gt;ask[i].r)</span><br><span class="line">        &#123;</span><br><span class="line">            Minus(R);</span><br><span class="line">            R--;</span><br><span class="line">        &#125;</span><br><span class="line">        ans[ask[i].id][0]=query(ask[i].p,ask[i].q);</span><br><span class="line">        ans[ask[i].id][1]=Query(ask[i].p,ask[i].q);</span><br><span class="line">    &#125;</span><br><span class="line">    for(register int i=1;i&lt;=m;i++)</span><br><span class="line">        printf(&quot;%d %d\n&quot;,ans[i][1],ans[i][0]);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>几乎无思维难度，在BZOJ 3809的基础上加一个查询数量的函数就行了</p><h1 id="带修莫队"><a href="#带修莫队" class="headerlink" title="带修莫队"></a>带修莫队</h1><p><a href="https://www.luogu.org/recordnew/show/6262891" target="_blank" rel="noopener">P1903 [国家集训队]数颜色</a></p><p>手写AC<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 100000+100</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,blo,cnt,t,Time;</span><br><span class="line"><span class="keyword">int</span> a[N],ans[N],bel[N],num[N],bloans[N],now[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l,r,tim,id;</span><br><span class="line">&#125;ask[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">change</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> pos,New,Old;</span><br><span class="line">&#125;chg[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;<span class="string">'9'</span>||ch&lt;<span class="string">'0'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(f==<span class="string">'-'</span>)</span><br><span class="line">            f=<span class="number">-1</span>;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (ch&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(node x,node y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(bel[x.l]==bel[y.l])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(bel[x.r]==bel[y.r])</span><br><span class="line">            <span class="keyword">return</span> x.tim&lt;y.tim;</span><br><span class="line">        <span class="keyword">return</span> bel[x.r]&lt;bel[y.r];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> bel[x.l]&lt;bel[y.l];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    num[x]++;</span><br><span class="line">    <span class="keyword">if</span>(num[x]==<span class="number">1</span>)</span><br><span class="line">        cnt++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Minus</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    num[x]--;</span><br><span class="line">    <span class="keyword">if</span>(!num[x])</span><br><span class="line">        cnt--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Change</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> x,<span class="keyword">int</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=x&amp;&amp;x&lt;=r)</span><br><span class="line">    &#123;</span><br><span class="line">        add(d);</span><br><span class="line">        Minus(a[x]);</span><br><span class="line">    &#125;</span><br><span class="line">    a[x]=d;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n=read();</span><br><span class="line">    m=read();</span><br><span class="line">    blo=<span class="built_in">pow</span>(n,<span class="number">2.0</span>/<span class="number">3</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        a[i]=read();</span><br><span class="line">        now[i]=a[i];</span><br><span class="line">        bel[i]=i/blo;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">char</span> ch;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;ch;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">'Q'</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            ask[++t].l=read();</span><br><span class="line">            ask[t].r=read();</span><br><span class="line">            ask[t].tim=Time;</span><br><span class="line">            ask[t].id=t;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            chg[++Time].pos=read();</span><br><span class="line">            chg[Time].New=read();</span><br><span class="line">            chg[Time].Old=now[chg[Time].pos];</span><br><span class="line">            now[chg[Time].pos]=chg[Time].New;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(ask+<span class="number">1</span>,ask+<span class="number">1</span>+t,cmp);</span><br><span class="line">    <span class="keyword">int</span> L=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> R=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> T=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=t;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(T&lt;ask[i].tim)</span><br><span class="line">        &#123;</span><br><span class="line">            T++;</span><br><span class="line">            Change(L,R,chg[T].pos,chg[T].New);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(T&gt;ask[i].tim)</span><br><span class="line">        &#123;</span><br><span class="line">            Change(L,R,chg[T].pos,chg[T].Old);</span><br><span class="line">            T--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(L&gt;ask[i].l)</span><br><span class="line">        &#123;</span><br><span class="line">            L--;</span><br><span class="line">            add(a[L]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(R&lt;ask[i].r)</span><br><span class="line">        &#123;</span><br><span class="line">            R++;</span><br><span class="line">            add(a[R]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(L&lt;ask[i].l)</span><br><span class="line">        &#123;</span><br><span class="line">            Minus(a[L]);</span><br><span class="line">            L++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(R&gt;ask[i].r)</span><br><span class="line">        &#123;</span><br><span class="line">            Minus(a[R]);</span><br><span class="line">            R--;</span><br><span class="line">        &#125;</span><br><span class="line">        ans[ask[i].id]=cnt;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=t;i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>就难度系数而言其实并不算高，作为带修莫队的板子题来说挺不错的。</p><p>那么以下是带修莫队的思路。</p><p>如果我们把每次修改当作一次时间的推移，然后就只需要在查询中加入一个新的关键字Tim，也就是时间，仅在两个询问的l和r都在同一分块中的情况才依照Tim进行排序。</p><p>然后在操作中进行L和R的跳动之前先进行时间指针T的跳动，使时间到达当前查询的时间点。由于时间需要不停的跳动，所以对于每次修改操作要另开一个结构体记录修改位置（pos）、修改后的值（New）和修改前的值（Old），这个Old在后面时间倒流的时候会有用。</p><p>对于每次T的跳动进行一次Change操作，时间增加就将指定位置的值修改为T++后的修改操作的New值，时间倒流就先将指定位置的值修改为T时修改操作的Old值（即还原），然后就没什么区别了。</p><p>对于Change操作也比较简单，如果当前位置在[L,R]区间中就将修改后的值Add进去，然后将原位置上的值Minus掉，如果不在区间内就直接将原位置数据赋为修改后的值，因为以后指针跳动的时候会自行更新的。</p><p>稍微扯两句，带修莫队的复杂度经过某些dalao的证明后确定为n^(5/3),此时分为n^(1/3)块，每块有n^(2/3)个元素，所以blo=pow(n,2.0/3)。</p><h1 id="树上莫队"><a href="#树上莫队" class="headerlink" title="树上莫队"></a>树上莫队</h1><p>例题：<a href="http://www.lydsy.com/JudgeOnline/problem.php?id=4129" target="_blank" rel="noopener">BZOJ 4129: Haruna’s Breakfast</a><del>（小天使！！！！！！！！）</del></p><p>什么，树上能跑莫队，还带修改？那岂不是要爆裂吗？</p><p>这是我第一次听说树上莫队时的想法。</p><p>不过我们知道对于一棵树，还有DFS序这种美妙的东西，这样的话树不就变成序列了吗？</p><p>比如说对于下面一棵树：</p><p><img src="http://b117.photo.store.qq.com/psb?/V137oTmC2F4y9l/rCZWGAv7jto.1koazTeSrgBU4uyU.JxZDsnZZbZdt74!/c/dHUAAAAAAAAA&amp;bo=mwEtAZsBLQEBACc!" alt=""></p><p>它的DFS序就是：1 2 4 4 5 5 2 3 6 6 7 7 3 1</p><p>然后求j,k两点之间的链上的mex值。我们用in[i]记录i第一次出现的位置，用out[i]记录i最后出现的位置。</p><p>首先假设j是k的祖先，那么我们可以发现[j,k]间的信息就存在in[j],in[k]之间或out[j],out[k]之间，对于出现两次的数我们就忽略掉好了。</p><p>那么如果j不是k的祖先呢？我们会发现[j,k]之间的信息存在了in[j],out[k]之间或者out[j],in[k]之间，同样我们忽略出现了两次的数。但是如果仔细看一下就会发现，j、k的LCA好像不见了，那么我们只要特殊处理一下LCA就OK了。</p><p>然后就可以用序列上的莫队来处理了DA☆ZE！（不过代码比较长就是了）</p><p>以下是AC代码（我可是自带大常数和大空间的男人）<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 500000+100</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,blo,cnt,Time,tot,cur;</span><br><span class="line"><span class="keyword">int</span> a[N],in[N],dfn[N],ans[N],bel[N],num[N],out[N],now[N];</span><br><span class="line"><span class="keyword">int</span> siz[N],deep[N],fa[N],son[N],p[N],top[N];</span><br><span class="line"><span class="keyword">short</span> tag[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l,r,tim,id,Lca;</span><br><span class="line">&#125;ask[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">change</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> pos,New,Old;</span><br><span class="line">&#125;chg[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> to,nxt;</span><br><span class="line">&#125;e[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;<span class="string">'9'</span>||ch&lt;<span class="string">'0'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(f==<span class="string">'-'</span>)</span><br><span class="line">            f=<span class="number">-1</span>;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (ch&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(node x,node y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(bel[x.l]==bel[y.l])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(bel[x.r]==bel[y.r])</span><br><span class="line">            <span class="keyword">return</span> x.tim&lt;y.tim;</span><br><span class="line">        <span class="keyword">return</span> bel[x.r]&lt;bel[y.r];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> bel[x.l]&lt;bel[y.l];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[++tot]=(edge)&#123;v,p[u]&#125;;</span><br><span class="line">    p[u]=tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    siz[x]++;</span><br><span class="line">    dfn[++dfn[<span class="number">0</span>]]=x;</span><br><span class="line">    in[x]=dfn[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">int</span> f=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=p[x];i;i=e[i].nxt)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v=e[i].to;</span><br><span class="line">        <span class="keyword">if</span>(v==fa[x])</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        deep[v]=deep[x]+<span class="number">1</span>;</span><br><span class="line">        fa[v]=x;</span><br><span class="line">        dfs(v);</span><br><span class="line">        siz[x]+=siz[v];</span><br><span class="line">        <span class="keyword">if</span>(siz[v]&gt;f)</span><br><span class="line">        &#123;</span><br><span class="line">            son[x]=v;</span><br><span class="line">            f=siz[v];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(f==<span class="number">-1</span>)</span><br><span class="line">        son[x]=x;</span><br><span class="line">    dfn[++dfn[<span class="number">0</span>]]=x;</span><br><span class="line">    out[x]=dfn[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">LCA</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(top[x]!=top[y])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(deep[top[x]]&lt;deep[top[y]])</span><br><span class="line">            swap(x,y);</span><br><span class="line">        x=fa[top[x]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(deep[x]&gt;deep[y])</span><br><span class="line">        swap(x,y);</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">choose</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> cur)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> l=<span class="number">0</span>,r=<span class="number">0</span>,lca=LCA(x,y);</span><br><span class="line">    <span class="keyword">if</span>(x==lca||y==lca)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">abs</span>(in[x]-in[y])&lt;<span class="built_in">abs</span>(out[x]-out[y]))</span><br><span class="line">            l=min(in[x],in[y]),r=max(in[x],in[y]);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            l=min(out[x],out[y]),r=max(out[x],out[y]);</span><br><span class="line">        lca=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">abs</span>(in[x]-out[y])&lt;<span class="built_in">abs</span>(out[x]-in[y]))</span><br><span class="line">            l=min(in[x],out[y]),r=max(in[x],out[y]);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            l=min(out[x],in[y]),r=max(out[x],in[y]);</span><br><span class="line">    &#125;</span><br><span class="line">    ask[cur]=(node)&#123;l,r,Time,cur,lca&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&gt;n)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    num[x]++;</span><br><span class="line">    <span class="keyword">if</span>(x==cnt)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(num[cnt])</span><br><span class="line">            cnt++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Minus</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&gt;n)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    num[x]--;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;cnt)</span><br><span class="line">        <span class="keyword">if</span>(!num[x])</span><br><span class="line">            cnt=x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Work</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tag[x])</span><br><span class="line">        Minus(a[x]);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        add(a[x]);</span><br><span class="line">    tag[x]^=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Change</span><span class="params">(<span class="keyword">int</span> pos,<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tag[pos])</span><br><span class="line">    &#123;</span><br><span class="line">        Work(pos);</span><br><span class="line">        a[pos]=x;</span><br><span class="line">        Work(pos);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        a[pos]=x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n=read(),m=read();</span><br><span class="line">    blo=<span class="built_in">pow</span>(n&lt;&lt;<span class="number">1</span>,<span class="number">2.0</span>/<span class="number">3</span>)*<span class="number">0.7</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        now[i]=a[i]=read();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> x,y;</span><br><span class="line">        x=read(),y=read();</span><br><span class="line">        add_edge(x,y),add_edge(y,x);</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=dfn[<span class="number">0</span>];i++)</span><br><span class="line">    &#123;</span><br><span class="line">        bel[i]=i/blo;</span><br><span class="line">        <span class="keyword">if</span>(top[dfn[i]])</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(dfn[i]==son[fa[dfn[i]]])</span><br><span class="line">            top[dfn[i]]=top[fa[dfn[i]]];</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            top[dfn[i]]=dfn[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> c=read();</span><br><span class="line">        <span class="keyword">if</span>(c)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> x=read(),y=read();</span><br><span class="line">            choose(x,y,++cur);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> x=read(),y=read();</span><br><span class="line">            chg[++Time]=(change)&#123;x,y,now[x]&#125;;</span><br><span class="line">            now[x]=y;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(ask+<span class="number">1</span>,ask+<span class="number">1</span>+cur,cmp);</span><br><span class="line">    <span class="keyword">int</span> L=<span class="number">1</span>,R=<span class="number">0</span>,T=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cur;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(T&lt;ask[i].tim)</span><br><span class="line">        &#123;</span><br><span class="line">            T++;</span><br><span class="line">            Change(chg[T].pos,chg[T].New);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(T&gt;ask[i].tim)</span><br><span class="line">        &#123;</span><br><span class="line">            Change(chg[T].pos,chg[T].Old);</span><br><span class="line">            T--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(L&gt;ask[i].l)</span><br><span class="line">        &#123;</span><br><span class="line">            L--;</span><br><span class="line">            Work(dfn[L]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(R&lt;ask[i].r)</span><br><span class="line">        &#123;</span><br><span class="line">            R++;</span><br><span class="line">            Work(dfn[R]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(L&lt;ask[i].l)</span><br><span class="line">        &#123;</span><br><span class="line">            Work(dfn[L]);</span><br><span class="line">            L++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(R&gt;ask[i].r)</span><br><span class="line">        &#123;</span><br><span class="line">            Work(dfn[R]);</span><br><span class="line">            R--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(ask[i].Lca)</span><br><span class="line">            Work(ask[i].Lca);</span><br><span class="line">        ans[ask[i].id]=cnt;</span><br><span class="line">        <span class="keyword">if</span>(ask[i].Lca)</span><br><span class="line">            Work(ask[i].Lca);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cur;i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里LCA我用的树剖（当然倍增也可以啦</p><p>顺便注明一下，那个tag数组是用来记录某个位置在区间里出现了几次，因为不论是0次还是2次都是不计入答案的，所以只要把2次当0次看就可以避免很多复杂的讨论了。然后修改的时候tag是0就加，tag是1就减，最后要把tag进行变换（即0-&gt;1，1-&gt;0）。</p><p>要说修改与mex这两个的话，还是看上面的讲解吧。</p><p>再说起来，其实树上莫队可以在树上分块的基础上搞，但是我太蒻了，看不懂dalao的讲解。</p><p>还有一题：<a href="https://www.luogu.org/problemnew/show/P4074#sub" target="_blank" rel="noopener">P4074 [WC2013]糖果公园</a></p><p>几乎就是板子吧，具体自己看代码（其实没啥差别）</p><p>手写AC（O2-6s，莫名其妙就Rank 5了）<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 500000+100</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,blo,Time,tot,cur,q;</span><br><span class="line"><span class="keyword">int</span> a[N],in[N],dfn[N],bel[N],num[N],out[N],now[N];</span><br><span class="line"><span class="keyword">int</span> siz[N],deep[N],fa[N],son[N],p[N],top[N];</span><br><span class="line"><span class="keyword">short</span> tag[N];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> Ans,ans[N],W[N],V[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l,r,tim,id,Lca;</span><br><span class="line">&#125;ask[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">change</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> pos,New,Old;</span><br><span class="line">&#125;chg[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> to,nxt;</span><br><span class="line">&#125;e[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;<span class="string">'9'</span>||ch&lt;<span class="string">'0'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(f==<span class="string">'-'</span>)</span><br><span class="line">            f=<span class="number">-1</span>;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (ch&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(node x,node y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(bel[x.l]==bel[y.l])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(bel[x.r]==bel[y.r])</span><br><span class="line">            <span class="keyword">return</span> x.tim&lt;y.tim;</span><br><span class="line">        <span class="keyword">return</span> bel[x.r]&lt;bel[y.r];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> bel[x.l]&lt;bel[y.l];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[++tot]=(edge)&#123;v,p[u]&#125;;</span><br><span class="line">    p[u]=tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    siz[x]++;</span><br><span class="line">    dfn[++dfn[<span class="number">0</span>]]=x;</span><br><span class="line">    in[x]=dfn[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">int</span> f=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=p[x];i;i=e[i].nxt)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v=e[i].to;</span><br><span class="line">        <span class="keyword">if</span>(v==fa[x])</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        deep[v]=deep[x]+<span class="number">1</span>;</span><br><span class="line">        fa[v]=x;</span><br><span class="line">        dfs(v);</span><br><span class="line">        siz[x]+=siz[v];</span><br><span class="line">        <span class="keyword">if</span>(siz[v]&gt;f)</span><br><span class="line">        &#123;</span><br><span class="line">            son[x]=v;</span><br><span class="line">            f=siz[v];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(f==<span class="number">-1</span>)</span><br><span class="line">        son[x]=x;</span><br><span class="line">    dfn[++dfn[<span class="number">0</span>]]=x;</span><br><span class="line">    out[x]=dfn[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">LCA</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(top[x]!=top[y])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(deep[top[x]]&lt;deep[top[y]])</span><br><span class="line">            swap(x,y);</span><br><span class="line">        x=fa[top[x]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(deep[x]&gt;deep[y])</span><br><span class="line">        swap(x,y);</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">choose</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> cur)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> l=<span class="number">0</span>,r=<span class="number">0</span>,lca=LCA(x,y);</span><br><span class="line">    <span class="keyword">if</span>(x==lca||y==lca)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">abs</span>(in[x]-in[y])&lt;<span class="built_in">abs</span>(out[x]-out[y]))</span><br><span class="line">            l=min(in[x],in[y]),r=max(in[x],in[y]);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            l=min(out[x],out[y]),r=max(out[x],out[y]);</span><br><span class="line">        lca=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">abs</span>(in[x]-out[y])&lt;<span class="built_in">abs</span>(out[x]-in[y]))</span><br><span class="line">            l=min(in[x],out[y]),r=max(in[x],out[y]);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            l=min(out[x],in[y]),r=max(out[x],in[y]);</span><br><span class="line">    &#125;</span><br><span class="line">    ask[cur]=(node)&#123;l,r,Time,cur,lca&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    num[x]++;</span><br><span class="line">    Ans+=W[num[x]]*V[x];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Minus</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Ans-=W[num[x]]*V[x];</span><br><span class="line">    num[x]--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Work</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tag[x])</span><br><span class="line">        Minus(a[x]);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        add(a[x]);</span><br><span class="line">    tag[x]^=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Change</span><span class="params">(<span class="keyword">int</span> pos,<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tag[pos])</span><br><span class="line">    &#123;</span><br><span class="line">        Work(pos);</span><br><span class="line">        a[pos]=x;</span><br><span class="line">        Work(pos);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        a[pos]=x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n=read(),m=read(),q=read();</span><br><span class="line">    blo=<span class="built_in">pow</span>(n&lt;&lt;<span class="number">1</span>,<span class="number">2.0</span>/<span class="number">3</span>)*<span class="number">0.7</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">        V[i]=read();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        W[i]=read();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> x,y;</span><br><span class="line">        x=read(),y=read();</span><br><span class="line">        add_edge(x,y),add_edge(y,x);</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        now[i]=a[i]=read();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=dfn[<span class="number">0</span>];i++)</span><br><span class="line">    &#123;</span><br><span class="line">        bel[i]=i/blo;</span><br><span class="line">        <span class="keyword">if</span>(top[dfn[i]])</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(dfn[i]==son[fa[dfn[i]]])</span><br><span class="line">            top[dfn[i]]=top[fa[dfn[i]]];</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            top[dfn[i]]=dfn[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=q;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> c=read();</span><br><span class="line">        <span class="keyword">if</span>(c)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> x=read(),y=read();</span><br><span class="line">            choose(x,y,++cur);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> x=read(),y=read();</span><br><span class="line">            chg[++Time]=(change)&#123;x,y,now[x]&#125;;</span><br><span class="line">            now[x]=y;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(ask+<span class="number">1</span>,ask+<span class="number">1</span>+cur,cmp);</span><br><span class="line">    <span class="keyword">int</span> L=<span class="number">1</span>,R=<span class="number">0</span>,T=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cur;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(T&lt;ask[i].tim)</span><br><span class="line">        &#123;</span><br><span class="line">            T++;</span><br><span class="line">            Change(chg[T].pos,chg[T].New);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(T&gt;ask[i].tim)</span><br><span class="line">        &#123;</span><br><span class="line">            Change(chg[T].pos,chg[T].Old);</span><br><span class="line">            T--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(L&gt;ask[i].l)</span><br><span class="line">        &#123;</span><br><span class="line">            L--;</span><br><span class="line">            Work(dfn[L]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(R&lt;ask[i].r)</span><br><span class="line">        &#123;</span><br><span class="line">            R++;</span><br><span class="line">            Work(dfn[R]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(L&lt;ask[i].l)</span><br><span class="line">        &#123;</span><br><span class="line">            Work(dfn[L]);</span><br><span class="line">            L++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(R&gt;ask[i].r)</span><br><span class="line">        &#123;</span><br><span class="line">            Work(dfn[R]);</span><br><span class="line">            R--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(ask[i].Lca)</span><br><span class="line">            Work(ask[i].Lca);</span><br><span class="line">        ans[ask[i].id]=Ans;</span><br><span class="line">        <span class="keyword">if</span>(ask[i].Lca)</span><br><span class="line">            Work(ask[i].Lca);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cur;i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>以上就是莫队——一个优雅的暴力算法</p>]]></content>
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分块 </tag>
            
            <tag> 莫队 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>可持久化线段树（主席树）</title>
      <link href="/2018/03/10/HJT_Tree/"/>
      <url>/2018/03/10/HJT_Tree/</url>
      <content type="html"><![CDATA[<p>读以下文字时最好有些线段树的预备知识，毕竟根据发明者的原话：“想法是对原序列的每一个前缀[1..i]建立出一颗线段树维护值域上每个数的出现次数，然后发现这样的树是可以减的，然后就没有然后了”</p><p>主席树可以用来解决如下问题：“给出一列数,a1,a2…an,每次询问其中连续的一段区间ai到aj其中的第K大的数是多少？”</p><a id="more"></a><p>建那么多的线段树显然会MLE！！但是为了便于理解，这里先把这个岔放下。我们先新开一个数组t[n]，其中存着an排序并去重的值。</p><p>那么每棵线段树维护的内容是什么呢？是a1到ai这段区间中的数在t[n]中出现的次数。这段话的内容也许有点抽象，举个例子 </p><p>an：4 1 1 2 8 9 4 4 3</p><p>排序并去重后得到{tn}</p><p>tn：1 2 3 4 8 9</p><p>下面对前缀a[1..9]建树，它有两个1,一个2,一个3，三个4，一个8和一个9，那么它的出现次数便是线段树维护的值（为表示清楚记为Cn）建树完后如下图，树中每个节点的值表示t[i,j]中的数字在a[1..9]中出现的次数和，i，j即为节点下面标出的区间。</p><p><img src="http://a3.qpic.cn/psb?/V137oTmC2F4y9l/2S3fUDKdnVKID0gupBH2P.rYvp02fQ93VsDePDGXLRY!/m/dCIBAAAAAAAA&amp;ek=1&amp;kp=1&amp;pt=0&amp;bo=0wFRAdMBUQEBACc!&amp;vuin=1013006824&amp;tm=1520676000&amp;sce=60-4-3&amp;rf=0-0" alt=""></p><p>下面我们来看对于这棵树如何求第K大值。比如我们求a[1..9]中第6大的数是多少？我们看到根节点的左儿子只有4个元素，那么第6大数一定在右儿子中，并且我们可以把问题递归下去即求区间t[4,6]的三个数中为a[1..9]去除所有数字为t[1],t[2],t[3]后第2大的数是多少。（c[1]+c[2]+c[3]=4，那么6-4=2）。我们看到此时的左儿子（区间t[4,5]）有4个元素，4&gt;2,因此第二大数一定在左儿子中，递归进入左儿子，此时即求区间t[4,5]的两个数中为a[1..9]去除所有数字为t[1],t[2],t[3],t[6]后第2大的数是多少。最后区间[4,4]有三个元素，3&gt;2，所以第二大数一定在区间[4,4]里即t[4]=4，所以a[1..9]中第6大数为4。</p><p>这里要记住的是对于每个i , a[1,i]都有一棵树，求a[L,R]的第K大与求a[1,R]的类似，只要在每层递归时减去a[1，L-1]所在树的相应部分即可，比如在a[L,R]，小于t[mid]的数有6个，在a[1,L-1] 小于t[mid]的数有2个，那么在a[L,R] 小于t[mid]的数就有6-2=4个，递归过程和上面类似，不再详细展开。</p><p>下面解决MLE这个梗。如下图画出a1…5到9为前缀的树，然后发现树的形态都非常像！！</p><p>例子 </p><p>an：4 1 1 2 8 9 4 4 3</p><p>排序并去重后得到{tn}</p><p>tn：1 2 3 4 8 9</p><p> <img src="http://a3.qpic.cn/psb?/V137oTmC2F4y9l/2S3fUDKdnVKID0gupBH2P.rYvp02fQ93VsDePDGXLRY!/m/dCIBAAAAAAAA&amp;ek=1&amp;kp=1&amp;pt=0&amp;bo=0wFRAdMBUQEBACc!&amp;vuin=1013006824&amp;tm=1520676000&amp;sce=60-4-3&amp;rf=0-0" alt=""></p><p> <img src="http://a3.qpic.cn/psb?/V137oTmC2F4y9l/AnbpwRjcYkCKVoDZhnI4H38uJ1bnNO690XauRZmZ5t0!/m/dCIBAAAAAAAA&amp;ek=1&amp;kp=1&amp;pt=0&amp;bo=2wFsAdsBbAEBACc!&amp;vuin=1013006824&amp;tm=1520676000&amp;sce=60-4-3&amp;rf=0-0" alt=""></p><p><img src="http://b289.photo.store.qq.com/psb?/V137oTmC2F4y9l/a7IbaB.7jbVJfyDC6mBSH3JC1QXxu1ClfFQEn2vF9KA!/c/dCEBAAAAAAAA&amp;bo=0wFRAdMBUQEBACc!&amp;rf=mood_app" alt=""></p><p><img src="http://b289.photo.store.qq.com/psb?/V137oTmC2F4y9l/EOvrw6WLtcyvuNHLSBzUYTiYDtTyTpZTd6lM9IVDFJY!/c/dCEBAAAAAAAA&amp;bo=0wFRAdMBUQEBACc!&amp;rf=mood_app" alt=""></p><p>这是我们能够压缩的空间。例如以a[1..9]为前缀建的树的右子树与以a[1..8]为前缀建的树的右子树是相同的！！因此在建树a[1..9]的时候（建树是从1到9的顺序）根节点可以直接向a[1..8]的右子树连一条边。同理，对于根节点的左儿子来说（现在把这个点看做根节点），它的左子树和a[1..8]的相应部分也是相同的，因此也连一条边，如下图所示</p><p> <img src="http://b290.photo.store.qq.com/psb?/V137oTmC2F4y9l/1dG0ZdwBCVWhD.OSkmHQMKFOrQJIPIpz.BAOfgBD8ss!/c/dCIBAAAAAAAA&amp;bo=9wDTAPcA0wABACc!&amp;rf=mood_app" alt=""></p><p>这样我们只增加了三个点却保存了两棵树的所有信息！！像这样在前面树的基础上建树，我们只需要开一个数组储存图示两个箭头所指的根的位置就够了，顺着根向下遍历便是如前所述一棵完整的线段树</p><h1 id="不支持修改"><a href="#不支持修改" class="headerlink" title="不支持修改"></a>不支持修改</h1><p>首先我们来了解什么叫做主席树，下面是从其他大佬的博客中复制过来的了解一下就行</p><p>所谓主席树呢，就是对原来的数列[1..n]的每一个前缀[1..i]（1≤i≤n）建立一棵线段树，线段树的每一个节点存某个前缀[1..i]中属于区间[L..R]的数一共有多少个（比如根节点是[1..n]，一共i个数，sum[root] = i；根节点的左儿子是[1..(L+R)/2]，若不大于(L+R)/2的数有x个，那么sum[root.left] = x）。若要查找[i..j]中第k大数时，设某结点x，那么x.sum[j] - x.sum[i - 1]就是[i..j]中在结点x内的数字总数。而对每一个前缀都建一棵树，会MLE，观察到每个[1..i]和[1..i-1]只有一条路是不一样的，那么其他的结点只要用回前一棵树的结点即可，时空复杂度为O(nlogn)。</p><hr><p>看了什么的介绍，感觉并没有什么卵用，还是一脸懵逼，下面我一点一点来讲解主席树的原理以及实现过程和代码。</p><p>在学习主席树之前，需要你很熟悉线段树这个东西，因为主席树的主体是多颗线段树，首先我们来简单的回顾一下线段树的简单特点和性质，我们熟悉的线段树一般是用一个结构体表示一个节点，每个节点有一个编号，节点里面一般有两个变量l, r来表示这个节点维护的区间，然后还有一个区间信息（比如区间最大值，最小值，和等，视具体问题而定），当然如果涉及到区间更新，还有一个add或者lazy叫做延迟标记的东西，然后一般线段树最明显的特点就行，一个父节点的编号是i,那么他的两只儿子节点的编号分别为2 <em> i(左） , 2 </em> i + 1（右），注意主席树在这一点有别于一般的线段树，每一个父节点，他的两个儿子节点的编号不一定满足这个关系。</p><p>我们先来分析一下对于任意一个区间，我们怎样求解这个区间的第k小值，当然一个最简单的做法就是把这个区间的数都拿出来排个序，然后直接输出就好，这很简单，但是复杂度爆表，我们考虑一个线段树的做法，假如一个区间l, r我们用一个用这个区间内出现过的数的个数组成一颗线段树，这是什么意思呢，求一个区间的第k小数，当然与这个区间有多少数比他小有关，在这里我举一个例子来说明一下怎样建立这样的一颗线段树。比如这个区间表示的序列是4，1，3，2，我们要求第2小，我们一眼就看出是2，那么我们怎样上面所说的线段树来求解呢，下面我画了一幅图来讲解，其中这颗线段树上的每个节点维护的是这个节点表示区间内的个数（假设每个数都不一样）</p><p> <img src="http://b247.photo.store.qq.com/psb?/V137oTmC2F4y9l/ca0YRv9fRBOPR7nmbKhIbHOCb*RSMmykiARFerbHLgc!/c/dPcAAAAAAAAA&amp;bo=QQLaAUEC2gEBACc!&amp;rf=mood_app" alt=""></p><p>圈内的数字表示这个区间里面有多少个数，最后叶节点表示一个数字，对应上述序列中的一个数，注意，任意一个长度为N的序列我们都可以把他离散为一个1,2,3,……,N的序列，只需要简单的hash一下就行。然后这样的一颗线段树建立出来了，我们怎样寻找区间第2小，因为叶节点从左到右表示的数依次增大，根据这个性质，以及每个节点保存了区间内的数的个数这个信息，我们可以轻易的找出区间第2小，具体的找法是，从根节点开始，看左儿子里面的数的 个数是不是大于等于2，如果是则第2小一定在左子树中，于是继续找左子树，反之找右子树，直到找到叶节点为止，然后直接返回叶节点表示的值就行。</p><p>但是多次询问区间第k小，我们每次这样建立一个线段树，这样不仅空间复杂度非常之高，而且时间复杂度也非常高，甚至比普通排序还要高，那么我们只不是可以想一个办法，使得对于每次我们查询不同的区间我们不需要重新建树，如果这样。时间复杂度和空间复杂度就大大降低了。</p><p>我们很容易就联想到了前缀和的概念，比如我们有一个问题。就是每次静态的求区间和，我们可以预处理所以的前缀和sum[i]，我们每次求解区间l, r和时，我们可以直接得到答案为sum[r] - sum[l -1],这样就不需要对区间中的每个数进行相加来求解了。</p><p>同样一个道理，我们也可以利用前缀和这个思想来解决建树这个问题，我们只需要建立n颗“前缀”线段树就行，第i树维护[1,i]序列，这样我们处理任意区间l, r时就可以通过处理区间[1,l - 1], [1,r]，就行，然后两者的处理结果进行相加相减就行。为什么满足相加减的性质，我们简单分析一下就很容易得出。如果在区间[1,l - 1]中有x个数小于一个数，在[1,r]中有y个数小于那个数，那么在区间[l,r]中就有y - x 个数小于那个数了，这样就很好理解为什么可以相加减了，另外，每颗树的结构都一样，都是一颗叶节点为n个的线段树。</p><p>上述利用前缀和的思想只是解决了时间复杂度的问题，并没有解决空间复杂度的问题，要解决空间复杂度问题。我们需要用到线段树的性质，我们每次更新一个数，那么与更新之前相比，这颗线段树改变只是一条链（从根节点到某一叶节点），那么我们可以充分利用这个特点，因为第i颗树与第i- 1颗树相比，只是更新了第i个元素，所以这两棵树有很多相同的节点，所以这两棵树可以共用很多节点（这也是为什么主席树的中节点编号不满足儿子节点编号是父节点编号的两倍和两倍加一的原因），于是这样就解决空间复杂度问题。</p><p><a href="https://www.luogu.org/problemnew/show/P3919" target="_blank" rel="noopener"> P3919 【模板】可持久化数组（可持久化线段树/平衡树）</a></p><p>手写AC（O2-1016ms）<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 200000+110</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> a[N],Hash[N],t[N],tot,n,m;</span><br><span class="line"><span class="keyword">int</span> sum[<span class="number">50</span>*N],L[<span class="number">50</span>*N],R[<span class="number">50</span>*N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> rt=++tot;</span><br><span class="line">    sum[rt]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> m=(l+r)/<span class="number">2</span>;</span><br><span class="line">        L[rt]=build(l,m);</span><br><span class="line">        R[rt]=build(m+<span class="number">1</span>,r);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> rt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> pre,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> rt=++tot;</span><br><span class="line">    L[rt]=L[pre];</span><br><span class="line">    R[rt]=R[pre];</span><br><span class="line">    sum[rt]=sum[pre]+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> m=(l+r)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(x&lt;=m)</span><br><span class="line">            L[rt]=update(L[pre],l,m,x);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            R[rt]=update(R[pre],m+<span class="number">1</span>,r,x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> rt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l==r)</span><br><span class="line">        <span class="keyword">return</span> l;</span><br><span class="line">    <span class="keyword">int</span> num=sum[L[v]]-sum[L[u]];</span><br><span class="line">    <span class="keyword">int</span> m=(l+r)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(num&gt;=k)</span><br><span class="line">        <span class="keyword">return</span> query(L[u],L[v],l,m,k);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> query(R[u],R[v],m+<span class="number">1</span>,r,k-num);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">        Hash[i]=a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    sort(Hash+<span class="number">1</span>,Hash+<span class="number">1</span>+n);</span><br><span class="line">    <span class="keyword">int</span> d=unique(Hash+<span class="number">1</span>,Hash+<span class="number">1</span>+n)-Hash<span class="number">-1</span>;</span><br><span class="line">    t[<span class="number">0</span>]=build(<span class="number">1</span>,d);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> x=lower_bound(Hash+<span class="number">1</span>,Hash+<span class="number">1</span>+d,a[i])-Hash;</span><br><span class="line">        t[i]=update(t[i<span class="number">-1</span>],<span class="number">1</span>,d,x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> l,r,k;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;l,&amp;r,&amp;k);</span><br><span class="line">        <span class="keyword">int</span> x=query(t[l<span class="number">-1</span>],t[r],<span class="number">1</span>,d,k);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,Hash[x]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><a href="https://www.luogu.org/problemnew/show/P3567" target="_blank" rel="noopener">P3567 [POI2014]KUR-Couriers</a></p><p>手写AC（O2-1032ms）<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 500000+110</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> a[N],Hash[N],t[N],tot,n,m;</span><br><span class="line"><span class="keyword">int</span> sum[<span class="number">50</span>*N],L[<span class="number">50</span>*N],R[<span class="number">50</span>*N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> rt=++tot;</span><br><span class="line">    sum[rt]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> m=(l+r)/<span class="number">2</span>;</span><br><span class="line">        L[rt]=build(l,m);</span><br><span class="line">        R[rt]=build(m+<span class="number">1</span>,r);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> rt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> pre,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> rt=++tot;</span><br><span class="line">    L[rt]=L[pre];</span><br><span class="line">    R[rt]=R[pre];</span><br><span class="line">    sum[rt]=sum[pre]+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> m=(l+r)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(x&lt;=m)</span><br><span class="line">            L[rt]=update(L[pre],l,m,x);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            R[rt]=update(R[pre],m+<span class="number">1</span>,r,x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> rt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l==r)</span><br><span class="line">        <span class="keyword">return</span> l;</span><br><span class="line">    <span class="keyword">int</span> num=sum[L[v]]-sum[L[u]];</span><br><span class="line">    <span class="keyword">int</span> num1=sum[R[v]]-sum[R[u]];</span><br><span class="line">    <span class="keyword">int</span> m=(l+r)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(num&gt;=k)</span><br><span class="line">        <span class="keyword">return</span> query(L[u],L[v],l,m,k);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(num1&gt;=k)</span><br><span class="line">        <span class="keyword">return</span> query(R[u],R[v],m+<span class="number">1</span>,r,k);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">        Hash[i]=a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    sort(Hash+<span class="number">1</span>,Hash+<span class="number">1</span>+n);</span><br><span class="line">    <span class="keyword">int</span> d=unique(Hash+<span class="number">1</span>,Hash+<span class="number">1</span>+n)-Hash<span class="number">-1</span>;</span><br><span class="line">    t[<span class="number">0</span>]=build(<span class="number">1</span>,d);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> x=lower_bound(Hash+<span class="number">1</span>,Hash+<span class="number">1</span>+d,a[i])-Hash;</span><br><span class="line">        t[i]=update(t[i<span class="number">-1</span>],<span class="number">1</span>,d,x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> l,r,k;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;l,&amp;r);</span><br><span class="line">        k=(r-l+<span class="number">1</span>)/<span class="number">2</span>+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> x=query(t[l<span class="number">-1</span>],t[r],<span class="number">1</span>,d,k);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,Hash[x]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=4417" target="_blank" rel="noopener">HDU 4417 Super Mario</a></p><p>纯手写AC（140ms）<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 500000+110</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 2147483647</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> a[N],Hash[N];</span><br><span class="line"><span class="keyword">int</span> sum[<span class="number">50</span>*N],L[<span class="number">50</span>*N],R[<span class="number">50</span>*N],t[N],tot,n,m;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> rt=++tot;</span><br><span class="line">    sum[rt]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> m=(l+r)/<span class="number">2</span>;</span><br><span class="line">        L[rt]=build(l,m);</span><br><span class="line">        R[rt]=build(m+<span class="number">1</span>,r);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> rt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> pre,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> rt=++tot;</span><br><span class="line">    L[rt]=L[pre];</span><br><span class="line">    R[rt]=R[pre];</span><br><span class="line">    sum[rt]=sum[pre]+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> m=(l+r)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(x&lt;=m)</span><br><span class="line">            L[rt]=update(L[pre],l,m,x);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            R[rt]=update(R[pre],m+<span class="number">1</span>,r,x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> rt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l==r)</span><br><span class="line">        <span class="keyword">return</span> sum[v]-sum[u];</span><br><span class="line">    <span class="keyword">int</span> b=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> m=(l+r)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(k&gt;m)</span><br><span class="line">    &#123;</span><br><span class="line">        b+=sum[L[v]]-sum[L[u]];</span><br><span class="line">        b+=query(R[u],R[v],m+<span class="number">1</span>,r,k);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        b+=query(L[u],L[v],l,m,k);</span><br><span class="line">    <span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=T;j++)</span><br><span class="line">    &#123;</span><br><span class="line">        tot=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Case %d:\n"</span>,j);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;a[i]);</span><br><span class="line">            Hash[i]=a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        sort(Hash+<span class="number">1</span>,Hash+<span class="number">1</span>+n);</span><br><span class="line">        <span class="keyword">int</span> d=unique(Hash+<span class="number">1</span>,Hash+<span class="number">1</span>+n)-Hash<span class="number">-1</span>;</span><br><span class="line">        Hash[++d]=inf;</span><br><span class="line">        t[<span class="number">0</span>]=build(<span class="number">1</span>,d);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> x=lower_bound(Hash+<span class="number">1</span>,Hash+<span class="number">1</span>+d,a[i])-Hash;</span><br><span class="line">            t[i]=update(t[i<span class="number">-1</span>],<span class="number">1</span>,d,x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> l,r;</span><br><span class="line">            <span class="keyword">long</span> <span class="keyword">long</span> h;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%lld"</span>,&amp;l,&amp;r,&amp;h);</span><br><span class="line">            l++;</span><br><span class="line">            r++;</span><br><span class="line">            <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">int</span> k=upper_bound(Hash+<span class="number">1</span>,Hash+<span class="number">1</span>+d,h)-Hash<span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">if</span>(k&gt;<span class="number">0</span>)</span><br><span class="line">                ans=query(t[l<span class="number">-1</span>],t[r],<span class="number">1</span>,d,k);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="带修改（主席树-树状数组）"><a href="#带修改（主席树-树状数组）" class="headerlink" title="带修改（主席树+树状数组）"></a>带修改（主席树+树状数组）</h1><p><a href="https://www.luogu.org/problemnew/show/P2617" target="_blank" rel="noopener"> P2617 Dynamic Rankings</a></p><p>题意：n个数，q个询问 (n&lt;=50000, q&lt;=10000)</p><p>Q x y z 代表询问[x, y]区间里的第z小的数</p><p>C x y    代表将(从左往右数)第x个数变成y</p><p>上篇介绍了在[x, y]区间内查询第z小的数的方法(静态主席树)</p><p>本题有更新操作</p><p>若仍用上篇的做法，每次更新一个数，需要更新的是T[i], T[i+1]… …T<a href="该数所在的树以及它后面的所有树">n</a>，因为每棵树T[i]所记录的都是前缀(1到i的数出现的次数) 因此，改变i，会影响i到n的所有树</p><p>这样，每次更新的复杂度最坏为O(nn)，最坏更新q次即为O(n×mn×m) 复杂度相当庞大，很明显这样做是不行的</p><p>那怎么办呢？</p><p>我们可以发现，对于改变i处的数这个操作，对于T[i], T[i+1]… …T[n]这些树的影响是相同的，都只改变了  “原来i处的数 的数量”  和  “现在i处的数 的数量” 这两个值而已，我们只要在原来的基础上增加一类树， 用它们来维护更新掉的数，即用树状数组来记录更新，每次更新lognlogn棵树。</p><p>下面来演示一下建树到查询的过程：</p><p>比如此题的第一个案例</p><p>5 33 2 1 4 7</p><p>Q 1 4 3</p><p>C 2 6</p><p>Q 2 5 3</p><p>先将序列以及要更新的数(C操作)离散化  </p><p>即3 2 1 4 7 、 6  ——&gt;(排序) ——&gt; 1 2 3 4 6 7  </p><p>那么我们就需要建一棵这样的树：</p><p><img src="https://qqadapt.qpic.cn/txdocpic/0/f2402af8499c21a706cefa1d4f0a81b4/0" alt=""></p><p>(圈里的都是结点的编号， 4、5、6、9、10、11号结点代表的分别是1、2、3、4、6、7)</p><p>(4、5、9、10你也可以任意作为6或11的儿子， 递归生成的是类似这样的， 这并不重要)</p><p>对于3 2 1 4 7(先不管需要更新的6)建完树见下图(建树过程同静态的，不明白的请向上翻)</p><p><img src="https://qqadapt.qpic.cn/txdocpic/0/543df959260eef02bae09abae5a3d88a/0" alt=""></p><p>(红色的是个数， 相同结点的个数省略了，同前一棵树)</p><p>对于C操作之前的Q，就跟静态的类似，减一减 找就好了</p><p>然后下面要更新了</p><p>对于更新， 我们不改变这些已经建好的树， 而是另建一批树S，用来记录更新，而这批线段树，我们用树状数组来维护</p><p>也就是树状数组的每个节点都是一颗线段树</p><p>一开始，S[0]、S[1]、S[2]、S[3]、S[4]、S<a href="树状数组的每个节点">5</a>这些都与T[0]相同(也就是每个节点建了一棵空树)</p><p>对于C 2 6 这个操作， 我们只需要减去一个2，加上一个6即可</p><p>对于减去2</p><p>(树状数组i+lowbit(i)为i的父亲节点， 修改i，就要把i的所有父亲节点都修改了)</p><p>2在树状数组中出现的位置是 2、2+lowbit(2)=4 这两个位置，    </p><p>因此要更新的是S[2]和S[4]这两个节点中的树</p><p>删去2后是这样</p><p><img src="https://qqadapt.qpic.cn/txdocpic/0/e095409f1ad1dc184f7c2e530eb56dda/0" alt=""></p><p>加上一个6 (同样是对于2号位置， 因此需要更新的仍是S[2]和S[4])</p><p>加上之后是这样</p><p> <img src="https://qqadapt.qpic.cn/txdocpic/0/31b1e6754c984e4ae70179d0b02dacdd/0" alt=""></p><p> 当查询的时候， 对树T的操作与静态的一致，另外再加上S树的值就好了</p><p>教练的模板<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 60000+5<span class="comment">//空间为nlogn*logn</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l;</span><br><span class="line">    <span class="keyword">int</span> r;</span><br><span class="line">    <span class="keyword">int</span> flag;</span><br><span class="line">    <span class="keyword">int</span> k;</span><br><span class="line">&#125;q[N];</span><br><span class="line"><span class="keyword">int</span> a[N],Hash[<span class="number">2</span>*N],L[<span class="number">32</span>*N],R[<span class="number">32</span>*N],sum[<span class="number">32</span>*N],s[<span class="number">32</span>*N],T[<span class="number">32</span>*N],n,m,dd,tot,use[<span class="number">32</span>*N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lowbit</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">return</span> x&amp;(-x);&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getsum</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ret=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(x&gt;<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ret+=sum[L[use[x]]];</span><br><span class="line">        x-=lowbit(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> rt=++tot;</span><br><span class="line">    <span class="keyword">int</span> m=(l+r)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;r)</span><br><span class="line">    &#123;</span><br><span class="line">        L[rt]=build(l,m);</span><br><span class="line">        R[rt]=build(m+<span class="number">1</span>,r);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> rt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> pre,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> x,<span class="keyword">int</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> rt=++tot;</span><br><span class="line">    L[rt]=L[pre];R[rt]=R[pre];sum[rt]=sum[pre]+d;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> m=(l+r)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(x&lt;=m)</span><br><span class="line">            L[rt]=update(L[pre],l,m,x,d);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            R[rt]=update(R[pre],m+<span class="number">1</span>,r,x,d);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> rt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> ll,<span class="keyword">int</span> rr,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&gt;=r)<span class="keyword">return</span> l;</span><br><span class="line">    <span class="keyword">int</span> m=(l+r)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">int</span> aa=getsum(v);</span><br><span class="line">    <span class="keyword">int</span> bb=getsum(u);</span><br><span class="line">    <span class="keyword">int</span> num=aa-bb+sum[L[rr]]-sum[L[ll]];</span><br><span class="line">    <span class="keyword">if</span>(k&lt;=num)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=u;j&gt;<span class="number">0</span>;j=j-lowbit(j))use[j]=L[use[j]];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=v;j&gt;<span class="number">0</span>;j=j-lowbit(j))use[j]=L[use[j]];</span><br><span class="line">        <span class="keyword">return</span> query(u,v,L[ll],L[rr],l,m,k);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=u;j&gt;<span class="number">0</span>;j=j-lowbit(j))use[j]=R[use[j]];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=v;j&gt;<span class="number">0</span>;j=j-lowbit(j))use[j]=R[use[j]];</span><br><span class="line">        <span class="keyword">return</span> query(u,v,R[ll],R[rr],m+<span class="number">1</span>,r,k-num);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> p,<span class="keyword">int</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(x&lt;=n)</span><br><span class="line">    &#123;</span><br><span class="line">        s[x]=update(s[x],<span class="number">1</span>,dd,p,d);</span><br><span class="line">        x+=lowbit(x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">int</span> d=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">        Hash[++d]=a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">char</span> ss[<span class="number">5</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>,ss);</span><br><span class="line">        <span class="keyword">if</span>(ss[<span class="number">0</span>]==<span class="string">'Q'</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;q[i].l,&amp;q[i].r,&amp;q[i].k);</span><br><span class="line">            q[i].flag=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;q[i].l,&amp;q[i].r);</span><br><span class="line">            Hash[++d]=q[i].r;</span><br><span class="line">            q[i].flag=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(Hash+<span class="number">1</span>,Hash+<span class="number">1</span>+d);</span><br><span class="line">    dd=unique(Hash+<span class="number">1</span>,Hash+<span class="number">1</span>+d)-Hash<span class="number">-1</span>;</span><br><span class="line">    T[<span class="number">0</span>]=build(<span class="number">1</span>,dd);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> x=lower_bound(Hash+<span class="number">1</span>,Hash+<span class="number">1</span>+dd,a[i])-Hash;</span><br><span class="line">        T[i]=update(T[i<span class="number">-1</span>],<span class="number">1</span>,dd,x,<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)s[i]=T[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(q[i].flag)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=q[i].l<span class="number">-1</span>;j&gt;<span class="number">0</span>;j=j-lowbit(j))use[j]=s[j];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=q[i].r;j&gt;<span class="number">0</span>;j=j-lowbit(j))use[j]=s[j];</span><br><span class="line">            <span class="keyword">int</span> t=query(q[i].l<span class="number">-1</span>,q[i].r,T[q[i].l<span class="number">-1</span>],T[q[i].r],<span class="number">1</span>,dd,q[i].k);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,Hash[t]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> xx=lower_bound(Hash+<span class="number">1</span>,Hash+<span class="number">1</span>+dd,a[q[i].l])-Hash;</span><br><span class="line">            <span class="keyword">int</span> yy=lower_bound(Hash+<span class="number">1</span>,Hash+<span class="number">1</span>+dd,q[i].r)-Hash;</span><br><span class="line">            modify(q[i].l,xx,<span class="number">-1</span>);</span><br><span class="line">            modify(q[i].l,yy,<span class="number">1</span>);</span><br><span class="line">            a[q[i].l]=q[i].r;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>手写AC（对拍O2-96ms）<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 60010</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l,r,flag,k;</span><br><span class="line">&#125;;<span class="class"><span class="keyword">struct</span> <span class="title">node</span> <span class="title">q</span>[<span class="title">N</span>];</span></span><br><span class="line"><span class="keyword">int</span> a[N],Hash[<span class="number">2</span>*N],L[<span class="number">32</span>*N],R[<span class="number">32</span>*N],sum[<span class="number">32</span>*N],s[<span class="number">32</span>*N],T[<span class="number">32</span>*N],n,m,dd,tot,use[<span class="number">32</span>*N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">lowbit</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&amp;(-x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">getsum</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ret=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(x&gt;<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ret+=sum[L[use[x]]];</span><br><span class="line">        x-=lowbit(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> rt=++tot;</span><br><span class="line">    <span class="keyword">int</span> m=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;r)</span><br><span class="line">    &#123;</span><br><span class="line">        L[rt]=build(l,m);</span><br><span class="line">        R[rt]=build(m+<span class="number">1</span>,r);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> rt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> pre,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> x,<span class="keyword">int</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> rt=++tot;</span><br><span class="line">    L[rt]=L[pre];</span><br><span class="line">    R[rt]=R[pre];</span><br><span class="line">    sum[rt]=sum[pre]+d;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> m=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(x&lt;=m)</span><br><span class="line">            L[rt]=update(L[pre],l,m,x,d);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            R[rt]=update(R[pre],m+<span class="number">1</span>,r,x,d);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> rt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> left,<span class="keyword">int</span> right,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&gt;=r)</span><br><span class="line">        <span class="keyword">return</span> l;</span><br><span class="line">    <span class="keyword">int</span> m=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> aa=getsum(v);</span><br><span class="line">    <span class="keyword">int</span> bb=getsum(u);</span><br><span class="line">    <span class="keyword">int</span> num=aa-bb+sum[L[right]]-sum[L[left]];</span><br><span class="line">    <span class="keyword">if</span>(k&lt;=num)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=u;j&gt;<span class="number">0</span>;j-=lowbit(j))</span><br><span class="line">            use[j]=L[use[j]];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=v;j&gt;<span class="number">0</span>;j-=lowbit(j))</span><br><span class="line">            use[j]=L[use[j]];</span><br><span class="line">        <span class="keyword">return</span> query(u,v,L[left],L[right],l,m,k);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=u;j&gt;<span class="number">0</span>;j-=lowbit(j))</span><br><span class="line">            use[j]=R[use[j]];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=v;j&gt;<span class="number">0</span>;j-=lowbit(j))</span><br><span class="line">            use[j]=R[use[j]];</span><br><span class="line">        <span class="keyword">return</span> query(u,v,R[left],R[right],m+<span class="number">1</span>,r,k-num);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> p,<span class="keyword">int</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (x&lt;=n)</span><br><span class="line">    &#123;</span><br><span class="line">        s[x]=update(s[x],<span class="number">1</span>,dd,p,d);</span><br><span class="line">        x+=lowbit(x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">int</span> d=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">        Hash[++d]=a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">char</span> ss[<span class="number">5</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>,ss);</span><br><span class="line">        <span class="keyword">if</span>(ss[<span class="number">0</span>]==<span class="string">'Q'</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;q[i].l,&amp;q[i].r,&amp;q[i].k);</span><br><span class="line">            q[i].flag=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;q[i].l,&amp;q[i].r);</span><br><span class="line">            Hash[++d]=q[i].r;</span><br><span class="line">            q[i].flag=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(Hash+<span class="number">1</span>,Hash+<span class="number">1</span>+d);</span><br><span class="line">    dd=unique(Hash+<span class="number">1</span>,Hash+<span class="number">1</span>+d)-Hash<span class="number">-1</span>;</span><br><span class="line">    T[<span class="number">0</span>]=build(<span class="number">1</span>,dd);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> x=lower_bound(Hash+<span class="number">1</span>,Hash+<span class="number">1</span>+dd,a[i])-Hash;</span><br><span class="line">        T[i]=update(T[i<span class="number">-1</span>],<span class="number">1</span>,dd,x,<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        s[i]=T[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(q[i].flag)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=q[i].l<span class="number">-1</span>;j&gt;<span class="number">0</span>;j-=lowbit(j))</span><br><span class="line">                use[j]=s[j];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=q[i].r;j&gt;<span class="number">0</span>;j-=lowbit(j))</span><br><span class="line">                use[j]=s[j];</span><br><span class="line">            <span class="keyword">int</span> t=query(q[i].l<span class="number">-1</span>,q[i].r,T[q[i].l<span class="number">-1</span>],T[q[i].r],<span class="number">1</span>,dd,q[i].k);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,Hash[t]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> xx=lower_bound(Hash+<span class="number">1</span>,Hash+<span class="number">1</span>+dd,a[q[i].l])-Hash;</span><br><span class="line">            <span class="keyword">int</span> yy=lower_bound(Hash+<span class="number">1</span>,Hash+<span class="number">1</span>+dd,q[i].r)-Hash;</span><br><span class="line">            modify(q[i].l,xx,<span class="number">-1</span>);</span><br><span class="line">            modify(q[i].l,yy,<span class="number">1</span>);</span><br><span class="line">            a[q[i].l]=q[i].r;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h1><p><a href="https://www.luogu.org/problemnew/show/P1383" target="_blank" rel="noopener">P1383 高级打字机</a></p><p>手写AC<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 500010</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> a[N*<span class="number">32</span>],L[<span class="number">32</span>*N],R[<span class="number">32</span>*N],sum[<span class="number">32</span>*N],T[<span class="number">32</span>*N],n,m,tot,cnt,use[<span class="number">32</span>*N],root[<span class="number">32</span>*N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Insert</span><span class="params">(<span class="keyword">int</span> pre,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> p,<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> rt=++tot;</span><br><span class="line">    <span class="keyword">if</span>(l==r)</span><br><span class="line">    &#123;</span><br><span class="line">        a[rt]=x;</span><br><span class="line">        sum[rt]=sum[pre]+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> rt;</span><br><span class="line">    &#125;</span><br><span class="line">    L[rt]=L[pre];</span><br><span class="line">    R[rt]=R[pre];</span><br><span class="line">    sum[rt]=sum[pre]+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> m=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(p&lt;=m)</span><br><span class="line">        L[rt]=Insert(L[pre],l,m,p,x);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        R[rt]=Insert(R[pre],m+<span class="number">1</span>,r,p,x);</span><br><span class="line">    <span class="keyword">return</span> rt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> rt=++tot;</span><br><span class="line">    <span class="keyword">int</span> m=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;r)</span><br><span class="line">    &#123;</span><br><span class="line">        L[rt]=build(l,m);</span><br><span class="line">        R[rt]=build(m+<span class="number">1</span>,r);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> rt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l==r)</span><br><span class="line">        <span class="keyword">return</span> a[p];</span><br><span class="line">    <span class="keyword">int</span> m=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;=sum[L[p]])</span><br><span class="line">        <span class="keyword">return</span> query(L[p],l,m,x);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> query(R[p],m+<span class="number">1</span>,r,x-sum[L[p]]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    root[<span class="number">0</span>]=build(<span class="number">1</span>,n);</span><br><span class="line">    <span class="keyword">char</span> ss[<span class="number">5</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>,ss);</span><br><span class="line">        <span class="keyword">if</span>(ss[<span class="number">0</span>]==<span class="string">'T'</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">char</span> ch;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%s"</span>,&amp;ch);</span><br><span class="line">            <span class="keyword">int</span> x=ch-<span class="string">'a'</span>+<span class="number">1</span>;</span><br><span class="line">            root[++cnt]=Insert(root[cnt<span class="number">-1</span>],<span class="number">1</span>,n,i,x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(ss[<span class="number">0</span>]==<span class="string">'U'</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> x;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;x);</span><br><span class="line">            root[++cnt]=root[cnt-x<span class="number">-1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> x;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;x);</span><br><span class="line">            <span class="keyword">char</span> ch=query(root[cnt],<span class="number">1</span>,n,x)+<span class="string">'a'</span><span class="number">-1</span>;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%c\n"</span>,ch);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 主席树 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>平衡树</title>
      <link href="/2018/03/03/%E5%B9%B3%E8%A1%A1%E6%A0%91/"/>
      <url>/2018/03/03/%E5%B9%B3%E8%A1%A1%E6%A0%91/</url>
      <content type="html"><![CDATA[<p>这里讲两种解法：Splay和FHQ Treap</p><a id="more"></a><h3 id="首先是Splay"><a href="#首先是Splay" class="headerlink" title="首先是Splay"></a>首先是Splay</h3><p>我们知道，Splay是一种树形结构，它具有二叉搜索树的性质，维护树上的节点有序，即对于某一节点，它的左子树中所有节点的值都小于这个点，它的右子树中所有点的值都大于这个点。</p><p>然后就是Splay中的重点操作，Rotate。我们都知道Splay的复杂度之所以维持在logn级别与旋转操作有着很大的关系，旋转分为两种：左旋和右旋。旋转见图示（感谢<a href="https://www.cnblogs.com/yousiki/p/6147455.html" target="_blank" rel="noopener">You Siki</a>的图片）<br><img src="http://img.my.csdn.net/uploads/201210/10/1349877565_2986.png" alt=""></p><p>然后为了将某个值旋转至树根便于操作，又有了3种操作：Zig、Zig-Zig、Zig-Zag。具体见图示<br><img src="http://img.my.csdn.net/uploads/201210/10/1349877709_4105.png" alt=""><img src="http://img.my.csdn.net/uploads/201210/10/1349877744_7090.png" alt=""><img src="http://img.my.csdn.net/uploads/201210/10/1349877779_5253.png" alt=""></p><p>然后是各种简单操作（Search等较简单的，人人都会的我就不讲了）<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Rotate</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> y=fa[x];</span><br><span class="line">    <span class="keyword">int</span> z=fa[y];</span><br><span class="line">    <span class="keyword">if</span>(child[z][<span class="number">0</span>]==y)</span><br><span class="line">        child[z][<span class="number">0</span>]=x;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        child[z][<span class="number">1</span>]=x;</span><br><span class="line">    fa[x]=z;</span><br><span class="line">    <span class="keyword">int</span> w;</span><br><span class="line">    <span class="keyword">if</span>(child[y][<span class="number">0</span>]==x)</span><br><span class="line">        w=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        w=<span class="number">1</span>;</span><br><span class="line">    child[y][w]=child[x][w^<span class="number">1</span>];</span><br><span class="line">    fa[child[x][w^<span class="number">1</span>]]=y;</span><br><span class="line">    child[x][w^<span class="number">1</span>]=y;</span><br><span class="line">    fa[y]=x;</span><br><span class="line">    ct[y]=ct[child[y][<span class="number">0</span>]]+ct[child[y][<span class="number">1</span>]]+num[y];</span><br><span class="line">    ct[x]=ct[child[x][<span class="number">0</span>]]+ct[child[x][<span class="number">1</span>]]+num[x];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">splay</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(fa[x])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> y=fa[x];</span><br><span class="line">        <span class="keyword">int</span> z=fa[y];</span><br><span class="line">        <span class="keyword">if</span>(z==<span class="number">0</span>)</span><br><span class="line">            Rotate(x);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>((child[z][<span class="number">0</span>]==y)^(child[y][<span class="number">0</span>]==x))</span><br><span class="line">                Rotate(x);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                Rotate(y);</span><br><span class="line">            Rotate(x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    root=x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Splay和Rotate，这两个是整个Splay的核心函数，请自行参照图示去理解（注：splay函数里的if语句用于判定Zig还是Zag<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Insert</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tot==<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        tot=<span class="number">1</span>;</span><br><span class="line">        a[<span class="number">1</span>]=x;</span><br><span class="line">        num[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">        root=<span class="number">1</span>;</span><br><span class="line">        ct[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">        fa[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> k=Search(root,x);</span><br><span class="line">    <span class="keyword">int</span> node=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(a[k]==x)</span><br><span class="line">    &#123;</span><br><span class="line">        num[k]++;</span><br><span class="line">        node=k;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        ++tot;</span><br><span class="line">        a[tot]=x;</span><br><span class="line">        num[tot]=<span class="number">1</span>;</span><br><span class="line">        ct[tot]=<span class="number">1</span>;</span><br><span class="line">        fa[tot]=k;</span><br><span class="line">        <span class="keyword">if</span>(x&lt;a[k])</span><br><span class="line">            child[k][<span class="number">0</span>]=tot;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            child[k][<span class="number">1</span>]=tot;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(k)</span><br><span class="line">    &#123;</span><br><span class="line">        ct[k]++;</span><br><span class="line">        k=fa[k];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(node)</span><br><span class="line">        splay(node);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        splay(tot);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Insert其实比较规矩，就是找到一个与这个值相近的点（一定是叶子节点），然后判断一下x与a[k]的大小关系，如果比a[k]大就接到右子树，比a[k]小就接到左子树。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">void Delete(int x)</span><br><span class="line">&#123;</span><br><span class="line">    int k=Search(root,x);</span><br><span class="line">    if(a[k]!=x)</span><br><span class="line">        splay(k);</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">        splay(k);</span><br><span class="line">        if(num[k]&gt;1)</span><br><span class="line">        &#123;</span><br><span class="line">            num[k]--;</span><br><span class="line">            ct[k]--;</span><br><span class="line">        &#125;</span><br><span class="line">        else</span><br><span class="line">        &#123;</span><br><span class="line">            if(child[k][0]==0)</span><br><span class="line">            &#123;</span><br><span class="line">                root=child[k][1];</span><br><span class="line">                fa[root]=0;</span><br><span class="line">                a[k]=MIN;</span><br><span class="line">                num[k]=0;</span><br><span class="line">                ct[k]=0;</span><br><span class="line">                child[k][0]=0;</span><br><span class="line">                child[k][1]=0;</span><br><span class="line">            &#125;</span><br><span class="line">            else</span><br><span class="line">            &#123;</span><br><span class="line">                fa[child[k][0]]=0;</span><br><span class="line">                int kk=Search(child[k][0],2147483647);</span><br><span class="line">                splay(kk);</span><br><span class="line">                ct[root]+=ct[child[k][1]];</span><br><span class="line">                child[root][1]=child[k][1];</span><br><span class="line">                fa[child[k][1]]=root;</span><br><span class="line">                a[k]=MIN;</span><br><span class="line">                num[k]=0;</span><br><span class="line">                ct[k]=0;</span><br><span class="line">                child[k][0]=0;</span><br><span class="line">                child[k][1]=0;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Delete其实算是比较烦的了，分了四种情况，前两种比较简单，主要是后两种。如果要删除的节点没有左子树，就直接把该节点删除，根节点变为右儿子；如果有，就先切断该节点与左儿子的连接，然后将左子树中的最大值旋转到左子树的根，然后将右子树接到左子树的右边。</p><p>Rank和Find比较简单，这里不讲<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pre</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> k=Search(root,x);</span><br><span class="line">    splay(k);</span><br><span class="line">    <span class="keyword">if</span>(a[k]&lt;x)</span><br><span class="line">        <span class="keyword">return</span> a[k];</span><br><span class="line">    <span class="keyword">int</span> kk=Search(child[k][<span class="number">0</span>],<span class="number">2147483647</span>);</span><br><span class="line">    splay(kk);</span><br><span class="line">    <span class="keyword">return</span> a[kk];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">succ</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> k=Search(root,x);</span><br><span class="line">    splay(k);</span><br><span class="line">    <span class="keyword">if</span>(a[k]&gt;x)</span><br><span class="line">        <span class="keyword">return</span> a[k];</span><br><span class="line">    <span class="keyword">int</span> kk=Search(child[k][<span class="number">1</span>],<span class="number">-2147483647</span>);</span><br><span class="line">    splay(kk);</span><br><span class="line">    <span class="keyword">return</span> a[kk];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>pre（前驱）和succ（后缀）的思路基本相同，都是先将要找的值（如果有的话）旋转到根，然后pre是在左子树中找最大值，succ是在右子树中找最小值</p><p>以下是合代码<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 100000+110</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MIN -1e8</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> child[N][<span class="number">2</span>],fa[N],a[N],ct[N],num[N];</span><br><span class="line"><span class="keyword">int</span> n,tot,root;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Search</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a[x]==w)</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">while</span>(a[x]!=w)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(a[x]&gt;w)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(child[x][<span class="number">0</span>])</span><br><span class="line">                x=child[x][<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(a[x]==w)</span><br><span class="line">            <span class="keyword">return</span> x;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(child[x][<span class="number">1</span>])</span><br><span class="line">                x=child[x][<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Rotate</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> y=fa[x];</span><br><span class="line">    <span class="keyword">int</span> z=fa[y];</span><br><span class="line">    <span class="keyword">if</span>(child[z][<span class="number">0</span>]==y)</span><br><span class="line">        child[z][<span class="number">0</span>]=x;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        child[z][<span class="number">1</span>]=x;</span><br><span class="line">    fa[x]=z;</span><br><span class="line">    <span class="keyword">int</span> w;</span><br><span class="line">    <span class="keyword">if</span>(child[y][<span class="number">0</span>]==x)</span><br><span class="line">        w=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        w=<span class="number">1</span>;</span><br><span class="line">    child[y][w]=child[x][w^<span class="number">1</span>];</span><br><span class="line">    fa[child[x][w^<span class="number">1</span>]]=y;</span><br><span class="line">    child[x][w^<span class="number">1</span>]=y;</span><br><span class="line">    fa[y]=x;</span><br><span class="line">    ct[y]=ct[child[y][<span class="number">0</span>]]+ct[child[y][<span class="number">1</span>]]+num[y];</span><br><span class="line">    ct[x]=ct[child[x][<span class="number">0</span>]]+ct[child[x][<span class="number">1</span>]]+num[x];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">splay</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(fa[x])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> y=fa[x];</span><br><span class="line">        <span class="keyword">int</span> z=fa[y];</span><br><span class="line">        <span class="keyword">if</span>(z==<span class="number">0</span>)</span><br><span class="line">            Rotate(x);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>((child[z][<span class="number">0</span>]==y)^(child[y][<span class="number">0</span>]==x))</span><br><span class="line">                Rotate(x);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                Rotate(y);</span><br><span class="line">            Rotate(x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    root=x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Insert</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tot==<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        tot=<span class="number">1</span>;</span><br><span class="line">        a[<span class="number">1</span>]=x;</span><br><span class="line">        num[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">        root=<span class="number">1</span>;</span><br><span class="line">        ct[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">        fa[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> k=Search(root,x);</span><br><span class="line">    <span class="keyword">int</span> node=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(a[k]==x)</span><br><span class="line">    &#123;</span><br><span class="line">        num[k]++;</span><br><span class="line">        node=k;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        ++tot;</span><br><span class="line">        a[tot]=x;</span><br><span class="line">        num[tot]=<span class="number">1</span>;</span><br><span class="line">        ct[tot]=<span class="number">1</span>;</span><br><span class="line">        fa[tot]=k;</span><br><span class="line">        <span class="keyword">if</span>(x&lt;a[k])</span><br><span class="line">            child[k][<span class="number">0</span>]=tot;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            child[k][<span class="number">1</span>]=tot;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(k)</span><br><span class="line">    &#123;</span><br><span class="line">        ct[k]++;</span><br><span class="line">        k=fa[k];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(node)</span><br><span class="line">        splay(node);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        splay(tot);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Delete</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> k=Search(root,x);</span><br><span class="line">    <span class="keyword">if</span>(a[k]!=x)</span><br><span class="line">        splay(k);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        splay(k);</span><br><span class="line">        <span class="keyword">if</span>(num[k]&gt;<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            num[k]--;</span><br><span class="line">            ct[k]--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(child[k][<span class="number">0</span>]==<span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                root=child[k][<span class="number">1</span>];</span><br><span class="line">                fa[root]=<span class="number">0</span>;</span><br><span class="line">                a[k]=MIN;</span><br><span class="line">                num[k]=<span class="number">0</span>;</span><br><span class="line">                ct[k]=<span class="number">0</span>;</span><br><span class="line">                child[k][<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">                child[k][<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                fa[child[k][<span class="number">0</span>]]=<span class="number">0</span>;</span><br><span class="line">                <span class="keyword">int</span> kk=Search(child[k][<span class="number">0</span>],<span class="number">2147483647</span>);</span><br><span class="line">                splay(kk);</span><br><span class="line">                ct[root]+=ct[child[k][<span class="number">1</span>]];</span><br><span class="line">                child[root][<span class="number">1</span>]=child[k][<span class="number">1</span>];</span><br><span class="line">                fa[child[k][<span class="number">1</span>]]=root;</span><br><span class="line">                a[k]=MIN;</span><br><span class="line">                num[k]=<span class="number">0</span>;</span><br><span class="line">                ct[k]=<span class="number">0</span>;</span><br><span class="line">                child[k][<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">                child[k][<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Rank</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> k=Search(root,x);</span><br><span class="line">    splay(k);</span><br><span class="line">    <span class="keyword">return</span> ct[child[k][<span class="number">0</span>]]+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Find</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> k=root;</span><br><span class="line">    <span class="keyword">while</span>(!(x&gt;=ct[child[k][<span class="number">0</span>]]+<span class="number">1</span>&amp;&amp;x&lt;=ct[child[k][<span class="number">0</span>]]+num[k])&amp;&amp;k!=<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(x&gt;ct[child[k][<span class="number">0</span>]]+num[k])</span><br><span class="line">        &#123;</span><br><span class="line">            x-=ct[child[k][<span class="number">0</span>]]+num[k];</span><br><span class="line">            k=child[k][<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            k=child[k][<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a[k];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pre</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> k=Search(root,x);</span><br><span class="line">    splay(k);</span><br><span class="line">    <span class="keyword">if</span>(a[k]&lt;x)</span><br><span class="line">        <span class="keyword">return</span> a[k];</span><br><span class="line">    <span class="keyword">int</span> kk=Search(child[k][<span class="number">0</span>],<span class="number">2147483647</span>);</span><br><span class="line">    splay(kk);</span><br><span class="line">    <span class="keyword">return</span> a[kk];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">succ</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> k=Search(root,x);</span><br><span class="line">    splay(k);</span><br><span class="line">    <span class="keyword">if</span>(a[k]&gt;x)</span><br><span class="line">        <span class="keyword">return</span> a[k];</span><br><span class="line">    <span class="keyword">int</span> kk=Search(child[k][<span class="number">1</span>],<span class="number">-2147483647</span>);</span><br><span class="line">    splay(kk);</span><br><span class="line">    <span class="keyword">return</span> a[kk];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    <span class="built_in">memset</span>(a,MIN,<span class="keyword">sizeof</span>(a));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> x,z;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;z,&amp;x);</span><br><span class="line">        <span class="keyword">switch</span>(z)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:Insert(x);<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:Delete(x);<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,Rank(x));<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>:<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,Find(x));<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">5</span>:<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,pre(x));<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">6</span>:<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,succ(x));<span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>AC记录</p><p><a href="https://www.luogu.org/record/show?rid=5888411" target="_blank" rel="noopener">用时: 380ms / 内存: 3488KB</a></p><h3 id="然后是FHQ-Treap"><a href="#然后是FHQ-Treap" class="headerlink" title="然后是FHQ Treap"></a>然后是FHQ Treap</h3><p>由于省去了Rotate的操作，非旋的Treap就显得极为简洁（鄙人Splay代码200+，FHQ Treap代码仅130+）。再加上它几乎可以实现Splay的全部功能（LCT除外），所以当然是选择FHQ Treap啦。（开讲之前先%一波FHQ</p><p>是不是觉得Splay也好，Treap也好，转来转去的很烦人呢？那么如果我们可以暴力的把区间切成两段（或三段），然后对其中某一段操作完后再合起来是不是会简单的多呢？来学FHQ Treap吧，这东西绝对对你胃口！</p><p>那么既然这个东西要把一个区间切成数段，就需要一个split，实际上它有两种分法：一种是把权值比k小的放入一颗树，比k大的放入另一颗树；另一种是把前k个点放入一棵树，其他的放入另一棵树。这里给出第一种的讲解。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">split</span><span class="params">(<span class="keyword">int</span> now,<span class="keyword">int</span> k,<span class="keyword">int</span> &amp;l,<span class="keyword">int</span> &amp;r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!now)</span><br><span class="line">        l=r=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(a[now]&lt;=k)</span><br><span class="line">        &#123;</span><br><span class="line">            l=now;</span><br><span class="line">            split(child[now][<span class="number">1</span>],k,child[now][<span class="number">1</span>],r);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            r=now;</span><br><span class="line">            split(child[now][<span class="number">0</span>],k,l,child[now][<span class="number">0</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        pushup(now);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>对于我们遍历到每一个点，假如它的权值小于k，那么它的所有左子树，都要分到左边的树里，然后遍历它的右儿子。假如大于k，把它的所有右子树分到右边的树里，遍历左儿子。</p><p>因为它的最多操作次数就是一直分到底，效率就是O(logn)</p><p>接下来是合并的操作<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Merge</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!x||!y)</span><br><span class="line">        <span class="keyword">return</span> x+y;</span><br><span class="line">    <span class="keyword">if</span>(pri[x]&lt;pri[y])</span><br><span class="line">    &#123;</span><br><span class="line">        child[x][<span class="number">1</span>]=Merge(child[x][<span class="number">1</span>],y);</span><br><span class="line">        pushup(x);</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        child[y][<span class="number">0</span>]=Merge(x,child[y][<span class="number">0</span>]);</span><br><span class="line">        pushup(y);</span><br><span class="line">        <span class="keyword">return</span> y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>因为第一个Treap的权值都比较小，我们比较一下它的tar(附加权值)，假如第一个的tar小，我们就可以直接保留它的所有左子树，接着把第一个Treap变成它的右儿子。反之，我们可以保留第二棵的所有右子树，指针指向左儿子。</p><p>你可以把这个过程形象的理解为在第一个Treap的左子树上插入第二个树，也可以理解为在第二个树的左子树上插入第一棵树。因为第一棵树都满足小于第二个树，所以就变成了比较tar来确定树的形态。</p><p>也就是说，我们其实是遍历了第一个Treap的根-&gt;最大节点，第二个Treap的根-&gt;最小节点，也就是O(logn)</p><p>然后对于Insert，就不过是一个按照x的权值分开，插入后再合并的的过程罢了，Delete就是把树按照x分成l和r,再把l按照x-1分成c,d。把c的两个子儿子合并起来，再和r合并。</p><p>找前驱的话把root按x-1分成l,r，在l里面找最大值；找后继的话把root按x分成l,r，在r里找最小值。</p><p>Rank就是把root按x-1分成l,r，排名就是ct[l]；Find的过程和Splay差别并不大，都不细讲。</p><p>值得注意的是，FHQ Treap的本质还是一个Treap，是将树上的值按rand值排序的，r值小的在上面，r值大的在下面。这也是为什么Treap（树堆）成为Treap。</p><p>部分搬运某dalao博客QwQ</p><p>以下是合代码<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 100010</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 2147483647</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,tot,root;</span><br><span class="line"><span class="keyword">int</span> child[N][<span class="number">2</span>],ct[N],a[N],pri[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ct[x]=<span class="number">1</span>+ct[child[x][<span class="number">0</span>]]+ct[child[x][<span class="number">1</span>]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">new_node</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ct[++tot]=<span class="number">1</span>;</span><br><span class="line">    a[tot]=x;</span><br><span class="line">    pri[tot]=rand();</span><br><span class="line">    <span class="keyword">return</span> tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Merge</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!x||!y)</span><br><span class="line">        <span class="keyword">return</span> x+y;</span><br><span class="line">    <span class="keyword">if</span>(pri[x]&lt;pri[y])</span><br><span class="line">    &#123;</span><br><span class="line">        child[x][<span class="number">1</span>]=Merge(child[x][<span class="number">1</span>],y);</span><br><span class="line">        pushup(x);</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        child[y][<span class="number">0</span>]=Merge(x,child[y][<span class="number">0</span>]);</span><br><span class="line">        pushup(y);</span><br><span class="line">        <span class="keyword">return</span> y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">split</span><span class="params">(<span class="keyword">int</span> now,<span class="keyword">int</span> k,<span class="keyword">int</span> &amp;l,<span class="keyword">int</span> &amp;r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!now)</span><br><span class="line">        l=r=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(a[now]&lt;=k)</span><br><span class="line">        &#123;</span><br><span class="line">            l=now;</span><br><span class="line">            split(child[now][<span class="number">1</span>],k,child[now][<span class="number">1</span>],r);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            r=now;</span><br><span class="line">            split(child[now][<span class="number">0</span>],k,l,child[now][<span class="number">0</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        pushup(now);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Insert</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> l,r;</span><br><span class="line">    split(root,x,l,r);</span><br><span class="line">    root=Merge(Merge(l,new_node(x)),r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Delete</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> l,r,p;</span><br><span class="line">    split(root,x,l,p);</span><br><span class="line">    split(l,x<span class="number">-1</span>,l,r);</span><br><span class="line">    r=Merge(child[r][<span class="number">0</span>],child[r][<span class="number">1</span>]);</span><br><span class="line">    root=Merge(Merge(l,r),p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Rank</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> l,r;</span><br><span class="line">    split(root,x<span class="number">-1</span>,l,r);</span><br><span class="line">    <span class="keyword">int</span> ans=ct[l]+<span class="number">1</span>;</span><br><span class="line">    root=Merge(l,r);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Find</span><span class="params">(<span class="keyword">int</span> now,<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(k&lt;=ct[child[now][<span class="number">0</span>]])</span><br><span class="line">            now=child[now][<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(k==ct[child[now][<span class="number">0</span>]]+<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> a[now];</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            k-=ct[child[now][<span class="number">0</span>]]+<span class="number">1</span>;</span><br><span class="line">            now=child[now][<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pre</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> l,r;</span><br><span class="line">    split(root,x<span class="number">-1</span>,l,r);</span><br><span class="line">    <span class="keyword">int</span> ans=Find(l,ct[l]);</span><br><span class="line">    root=Merge(l,r);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">suc</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> l,r;</span><br><span class="line">    split(root,x,l,r);</span><br><span class="line">    <span class="keyword">int</span> ans=Find(r,<span class="number">1</span>);</span><br><span class="line">    root=Merge(l,r);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    srand(<span class="number">19260817</span>);</span><br><span class="line">    <span class="comment">//srand(998244353);</span></span><br><span class="line">    <span class="comment">//srand(1e9+7);</span></span><br><span class="line">    <span class="comment">//srand((unsigned)time(NULL));</span></span><br><span class="line">    <span class="comment">//以上是常用随机种子</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    <span class="built_in">memset</span>(a,-inf,<span class="keyword">sizeof</span>(a));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> z,x;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;z,&amp;x);</span><br><span class="line">        <span class="keyword">switch</span>(z)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:Insert(x);<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:Delete(x);<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,Rank(x));<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>:<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,Find(root,x));<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">5</span>:<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,pre(x));<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">6</span>:<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,suc(x));<span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>AC记录</p><p><a href="https://www.luogu.org/record/show?rid=6024959" target="_blank" rel="noopener">用时: 316ms / 内存: 3265KB</a></p><p>事实上可以看出Treap比Splay跑的要快一点（说不定是我的Splay太弱了呢？</p><p>然而由于我太蒻了，还是有点懵逼，有dalao能指出我的不足的话感激不尽，也欢迎各位找我讨论</p>]]></content>
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 平衡树 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Luogu P2900 土地征用 斜率优化dp 题解</title>
      <link href="/2018/02/11/Luogu%20P2900/"/>
      <url>/2018/02/11/Luogu%20P2900/</url>
      <content type="html"><![CDATA[<p>一道裸的斜率优化dp</p><p>首先对于i,j，若存在a[i].len(以下简写为l[i])&gt;=a[j].len&amp;&amp;a[i].wid(以下简写为w[i])&gt;=a[j].wid,则j这块土地是无用的，在预处理时应去掉这些无用的土地。同时在预处理时可以将数据按l降序排列，同时产生的结果是w必然按升序排列（有兴趣的dalao可以自己证明），这样可方便后面的过程。</p><a id="more"></a><p>然后就是对着数据手推状转方程了（建议先自己推一遍），可知假设用f[i]表示前i块土地的最小价值，则有<strong>f[i]=min{f[j]+l[j+1]w[i]}</strong>。</p><p>然后对数据化简可知假设j比k优，则有<strong>f[j]+l[j+1]w[i]&lt;f[k]+l[k+1]w[i]</strong>,然后就可以得到<strong>(f[k]-f[j])/(l[j+1]-l[k+1])&gt;w[i]</strong></p><p>接着就是一个数形结合的思想了</p><pre><code>一些试题中繁杂的代数关系身后往往隐藏着丰富的几何背景，而借助背景图形的性质，可以使那些原本复杂的数量关系和抽象的概念，显得直观，从而找到设计算法的捷径。——周源</code></pre><p>有兴趣的dalao可以阅读<a href="https://wenku.baidu.com/view/b97cd22d0066f5335a8121a3.html" target="_blank" rel="noopener">浅谈数形结合思想在信息学竞赛中的应用</a></p><p>总之这里将关系式抽象为形如y=kx+b的式子，只要维护组成图形的下凸性就行了，要弹出队尾的情况中节点的插入破坏了图形的下凸性</p><p>这里就要用到单调队列了，维护队列中的元素单调（然而我不会，所以请各位懂的大神指点</p><p>不多说见代码<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(3)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 50010</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> n,tot,q[N],head=<span class="number">1</span>,tail=<span class="number">1</span>,f[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> len,wid;</span><br><span class="line">&#125;;<span class="class"><span class="keyword">struct</span> <span class="title">node</span> <span class="title">a</span>[<span class="title">N</span>];</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node1</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> lent,wide;</span><br><span class="line">&#125;;<span class="class"><span class="keyword">struct</span> <span class="title">node1</span> <span class="title">b</span>[<span class="title">N</span>];</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">mmp</span><span class="params">(node xx,node yy)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> xx.len&gt;yy.len||(xx.len==yy.len&amp;&amp;xx.wid&gt;yy.wid);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">slope</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">double</span>)(f[y]-f[x])/(<span class="keyword">double</span>)(b[x+<span class="number">1</span>].lent-b[y+<span class="number">1</span>].lent);</span><br><span class="line">&#125;<span class="comment">//slope 斜率，来自金山词霸</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>,&amp;a[i].len,&amp;a[i].wid);</span><br><span class="line">    sort(a+<span class="number">1</span>,a+<span class="number">1</span>+n,mmp);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">if</span>(a[i].wid&gt;b[tot].wide)<span class="comment">//注意！一定要这样维护b中w的升序排列</span></span><br><span class="line">        &#123;</span><br><span class="line">            b[++tot].lent=a[i].len;</span><br><span class="line">            b[tot].wide=a[i].wid;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=tot;i++)<span class="comment">//1~tot动规</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(head&lt;tail&amp;&amp;slope(q[head],q[head+<span class="number">1</span>])&lt;=b[i].wide)</span><br><span class="line">            head++;<span class="comment">//如果队首不是最优，就弹出队首</span></span><br><span class="line">        f[i]=f[q[head]]+b[i].wide*b[q[head]+<span class="number">1</span>].lent;</span><br><span class="line">        <span class="keyword">while</span>(head&lt;tail&amp;&amp;slope(q[tail<span class="number">-1</span>],q[tail])&gt;=slope(q[tail],i))</span><br><span class="line">            tail--;<span class="comment">//维护一个下凸包</span></span><br><span class="line">        q[++tail]=i;<span class="comment">//进队</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,f[tot]);<span class="comment">//这里也要用tot</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>望各位dalao谅解QWQ</p><p>[注] 图片、引文来源<a href="http://blog.csdn.net/bill_yang_2016/article/details/54864284" target="_blank" rel="noopener">[模板] 斜率优化Dp详解</a></p>]]></content>
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划，dp </tag>
            
            <tag> 斜率优化 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Luogu P2590 树的统计</title>
      <link href="/2018/02/07/Luogu%20P2590/"/>
      <url>/2018/02/07/Luogu%20P2590/</url>
      <content type="html"><![CDATA[<p>基础树剖（从<a href="https://www.luogu.org/problemnew/show/P3178" target="_blank" rel="noopener">P3178</a>的代码稍作修改便可A掉<br>这里和3178差别在于线段树的过程不同和一个deep数组，具体看代码</p><a id="more"></a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(3)<span class="comment">//手开O3の日常</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 100010</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,fr,t,a,c,data[N],Size[N],num,p[<span class="number">2</span>*N],fa[N],id,out[<span class="number">2</span>*N],pos[<span class="number">2</span>*N],h[<span class="number">2</span>*N],belong[<span class="number">2</span>*N],b[<span class="number">2</span>*N],nt[<span class="number">2</span>*N],son[N*<span class="number">2</span>],deep[<span class="number">2</span>*N];</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">10</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> left,right,mx;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> sum,val;</span><br><span class="line">&#125;;<span class="class"><span class="keyword">struct</span> <span class="title">node</span> <span class="title">tree</span>[4*<span class="title">N</span>];</span><span class="comment">//线段树</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tree[p].val!=<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        tree[<span class="number">2</span>*p].val=tree[p].val;</span><br><span class="line">        tree[<span class="number">2</span>*p+<span class="number">1</span>].val=tree[p].val;</span><br><span class="line">        tree[<span class="number">2</span>*p].sum=(tree[<span class="number">2</span>*p].right-tree[<span class="number">2</span>*p].left+<span class="number">1</span>)*tree[p].val;</span><br><span class="line">        tree[<span class="number">2</span>*p+<span class="number">1</span>].sum=(tree[<span class="number">2</span>*p+<span class="number">1</span>].right-tree[<span class="number">2</span>*p+<span class="number">1</span>].left+<span class="number">1</span>)*tree[p].val;</span><br><span class="line">        tree[p].val=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="comment">//lazy tag的下放</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> dep)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    deep[x]=dep;</span><br><span class="line">    Size[x]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> e=p[x];</span><br><span class="line">    <span class="keyword">while</span>(e&gt;<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> k=b[e];</span><br><span class="line">        <span class="keyword">if</span>(fa[x]!=k)</span><br><span class="line">        &#123;</span><br><span class="line">            fa[k]=x;<span class="comment">//记录每个节点的父节点，方便向上跳</span></span><br><span class="line">            dfs(k,dep+<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span>(Size[k]&gt;Size[son[x]])</span><br><span class="line">                son[x]=k;<span class="comment">//不断更新该节点的重儿子</span></span><br><span class="line">            Size[x]+=Size[k];<span class="comment">//更新该节点下方的节点数</span></span><br><span class="line">        &#125;</span><br><span class="line">        e=nt[e];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="comment">//搜索确定每个节点的深度与其下的结点个数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> bh)</span><span class="comment">//bh为该节点所属重链的编号(编号为该重链起点编号</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    id++;</span><br><span class="line">    pos[x]=id;<span class="comment">//搜索序记录</span></span><br><span class="line">    out[x]=id;<span class="comment">//这个数组请忽视(做3178后忘了改QAQ</span></span><br><span class="line">    h[id]=x;<span class="comment">//线段树上的位置</span></span><br><span class="line">    <span class="keyword">int</span> e=p[x];</span><br><span class="line">    <span class="keyword">int</span> k=<span class="number">0</span>;</span><br><span class="line">    belong[x]=bh;<span class="comment">//记录每个节点所属的重链编号</span></span><br><span class="line">    <span class="keyword">if</span>(son[x])</span><br><span class="line">    &#123;</span><br><span class="line">        DFS(son[x],bh);<span class="comment">//优先搜索重儿子可得到重链</span></span><br><span class="line">        out[x]=max(out[x],out[son[x]]);</span><br><span class="line">    &#125;</span><br><span class="line">    e=p[x];</span><br><span class="line">    <span class="keyword">while</span>(e&gt;<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> kk=b[e];</span><br><span class="line">        <span class="keyword">if</span>(fa[x]!=kk&amp;&amp;kk!=son[x])</span><br><span class="line">        &#123;</span><br><span class="line">            DFS(kk,kk);</span><br><span class="line">            out[x]=max(out[x],out[kk]);</span><br><span class="line">        &#125;</span><br><span class="line">        e=nt[e];</span><br><span class="line">    &#125;<span class="comment">//搜索轻链</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ++num;</span><br><span class="line">    b[num]=v;</span><br><span class="line">    nt[num]=p[u];</span><br><span class="line">    p[u]=num;</span><br><span class="line">&#125;<span class="comment">//前向星存图</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tree[p].left=l;</span><br><span class="line">    tree[p].right=r;</span><br><span class="line">    <span class="keyword">if</span>(l==r)</span><br><span class="line">    &#123;</span><br><span class="line">        tree[p].sum=data[h[l]];</span><br><span class="line">        tree[p].mx=data[h[l]];</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">    build(<span class="number">2</span>*p,l,mid);</span><br><span class="line">    build(<span class="number">2</span>*p+<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">    tree[p].sum=tree[<span class="number">2</span>*p].sum+tree[<span class="number">2</span>*p+<span class="number">1</span>].sum;</span><br><span class="line">    tree[p].mx=max(tree[<span class="number">2</span>*p].mx,tree[<span class="number">2</span>*p+<span class="number">1</span>].mx);</span><br><span class="line">&#125;<span class="comment">//建树</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">long</span> <span class="keyword">long</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tree[p].left==l&amp;&amp;tree[p].right==r)</span><br><span class="line">    &#123;</span><br><span class="line">        tree[p].sum=(r-l+<span class="number">1</span>)*d;</span><br><span class="line">        tree[p].mx=d;</span><br><span class="line">        tree[p].val=d;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    pushdown(p);</span><br><span class="line">    <span class="keyword">int</span> mid=(tree[p].left+tree[p].right)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(r&lt;=mid)</span><br><span class="line">        change(<span class="number">2</span>*p,l,r,d);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(l&gt;mid)</span><br><span class="line">        change(<span class="number">2</span>*p+<span class="number">1</span>,l,r,d);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        change(<span class="number">2</span>*p,l,mid,d);</span><br><span class="line">        change(<span class="number">2</span>*p+<span class="number">1</span>,mid+<span class="number">1</span>,r,d);</span><br><span class="line">    &#125;</span><br><span class="line">    tree[p].sum=tree[<span class="number">2</span>*p].sum+tree[<span class="number">2</span>*p+<span class="number">1</span>].sum;</span><br><span class="line">    tree[p].mx=max(tree[<span class="number">2</span>*p].mx,tree[<span class="number">2</span>*p+<span class="number">1</span>].mx);</span><br><span class="line">&#125;<span class="comment">//线段树修改操作(注意此处要同时维护区间最大值与区间和</span></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tree[p].left==l&amp;&amp;tree[p].right==r)</span><br><span class="line">        <span class="keyword">return</span> tree[p].sum;</span><br><span class="line">    pushdown(p);</span><br><span class="line">    <span class="keyword">int</span> mid=(tree[p].left+tree[p].right)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(r&lt;=mid)</span><br><span class="line">        <span class="keyword">return</span> query(<span class="number">2</span>*p,l,r);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(l&gt;mid)</span><br><span class="line">        <span class="keyword">return</span> query(<span class="number">2</span>*p+<span class="number">1</span>,l,r);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> query(<span class="number">2</span>*p,l,mid)+query(<span class="number">2</span>*p+<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">&#125;<span class="comment">//查询区间和</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Query</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tree[p].left==l&amp;&amp;tree[p].right==r)</span><br><span class="line">        <span class="keyword">return</span> tree[p].mx;</span><br><span class="line">    pushdown(p);</span><br><span class="line">    <span class="keyword">int</span> mid=(tree[p].left+tree[p].right)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(r&lt;=mid)</span><br><span class="line">        <span class="keyword">return</span> Query(<span class="number">2</span>*p,l,r);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(l&gt;mid)</span><br><span class="line">        <span class="keyword">return</span> Query(<span class="number">2</span>*p+<span class="number">1</span>,l,r);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> max(Query(<span class="number">2</span>*p,l,mid),Query(<span class="number">2</span>*p+<span class="number">1</span>,mid+<span class="number">1</span>,r));</span><br><span class="line">&#125;<span class="comment">//查询区间最大值</span></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">work</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(belong[x]!=belong[y])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(deep[belong[x]]&lt;deep[belong[y]])</span><br><span class="line">            swap(x,y);</span><br><span class="line">        sum+=query(<span class="number">1</span>,pos[belong[x]],pos[x]);</span><br><span class="line">        x=fa[belong[x]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(deep[x]&gt;deep[y])</span><br><span class="line">        swap(x,y);</span><br><span class="line">    sum+=query(<span class="number">1</span>,pos[x],pos[y]);</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;<span class="comment">//QSUM的操作（解释见下）</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Work</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">-214748</span>;</span><br><span class="line">    <span class="keyword">while</span>(belong[x]!=belong[y])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(deep[belong[x]]&lt;deep[belong[y]])</span><br><span class="line">            swap(x,y);<span class="comment">//比较x和y所属重链起点的深浅，将较浅的向上跳</span></span><br><span class="line">        ans=max(ans,Query(<span class="number">1</span>,pos[belong[x]],pos[x]));</span><br><span class="line">        x=fa[belong[x]];</span><br><span class="line">    &#125;<span class="comment">//如果x与y不在同一重链中，就重复执行操作</span></span><br><span class="line">    <span class="keyword">if</span>(deep[x]&gt;deep[y])</span><br><span class="line">        swap(x,y);</span><br><span class="line">    ans=max(ans,Query(<span class="number">1</span>,pos[x],pos[y]));<span class="comment">//x与y在同一重链中最后进行一次操作</span></span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;<span class="comment">//QMAX的操作</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;fr,&amp;t);</span><br><span class="line">        add(fr,t);</span><br><span class="line">        add(t,fr);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;data[i]);</span><br><span class="line">    dfs(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">    DFS(<span class="number">1</span>,<span class="number">1</span>);<span class="comment">//先进行搜索确定了线段树上的编号再建树</span></span><br><span class="line">    build(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>,s);</span><br><span class="line">        <span class="keyword">if</span>(s[<span class="number">1</span>]==<span class="string">'H'</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;a,&amp;c);</span><br><span class="line">            change(<span class="number">1</span>,pos[a],pos[a],c);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(s[<span class="number">1</span>]==<span class="string">'M'</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;a,&amp;c);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,Work(a,c));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;a,&amp;c);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,work(a,c));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然而跑的很慢<br><a href="https://www.luogu.org/record/show?rid=5654505" target="_blank" rel="noopener">1208ms 7.92Mb</a></p>]]></content>
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线段树 </tag>
            
            <tag> 树链剖分，树剖 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Luogu P1120 小木棍【数据加强版】</title>
      <link href="/2018/01/20/Luogu%20P1120/"/>
      <url>/2018/01/20/Luogu%20P1120/</url>
      <content type="html"><![CDATA[<p>暴力搜索+剪枝</p><p>（这题简直神级剪枝）</p><a id="more"></a><p>由于200~1000ms实在坑人（实际上最后T的几乎都是500和1000的数据）</p><p>所以卡了我很久……</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 10010</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,len[N],l,cnt,sum;</span><br><span class="line"><span class="keyword">bool</span> used[N];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">mmp</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&gt;y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> lent,<span class="keyword">int</span> goal,<span class="keyword">int</span> now)</span><span class="comment">//记录当前的这根小木棍</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&gt;sum/goal)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d"</span>,goal);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(goal-lent&lt;len[cnt])</span><br><span class="line">        <span class="keyword">return</span>;<span class="comment">//如果连最小的填进去都会大于当前答案的话就回溯</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=now;i&lt;=cnt;i++)<span class="comment">//从当前开始枚举，因为前面的一定被枚举过了，再做就是浪费时间</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!used[i]&amp;&amp;lent+len[i]&lt;=goal)</span><br><span class="line">        &#123;</span><br><span class="line">            used[i]=<span class="literal">true</span>;</span><br><span class="line">            lent+=len[i];</span><br><span class="line">            <span class="keyword">if</span>(lent==goal)</span><br><span class="line">                dfs(x+<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,goal,<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                dfs(x,y+<span class="number">1</span>,lent,goal,i+<span class="number">1</span>);</span><br><span class="line">            used[i]=<span class="literal">false</span>;</span><br><span class="line">            lent-=len[i];</span><br><span class="line">            <span class="keyword">if</span>(lent+len[i]==goal||lent==<span class="number">0</span>)</span><br><span class="line">                <span class="keyword">break</span>;<span class="comment">//如果这一组可以凑出却不是正确答案或者第一根都无法满足就直接退出，没必要再去枚举更小的来代替它，因为这一根总是要被用的。</span></span><br><span class="line">            <span class="keyword">while</span>(len[i]==len[i+<span class="number">1</span>])</span><br><span class="line">                i++;<span class="comment">//该长度若不可行，则同样长度的也不可行</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;l);</span><br><span class="line">        <span class="keyword">if</span>(l&gt;<span class="number">50</span>)</span><br><span class="line">            <span class="keyword">continue</span>;<span class="comment">//一定要优先过滤50+的数据</span></span><br><span class="line">        len[++cnt]=l;</span><br><span class="line">        sum+=len[cnt];</span><br><span class="line">    &#125;</span><br><span class="line">    sort(len+<span class="number">1</span>,len+<span class="number">1</span>+cnt,mmp);<span class="comment">//从大到小排序，方便搜索与剪枝</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=len[<span class="number">1</span>];i&lt;=sum/<span class="number">2</span>;i++)</span><br><span class="line">        <span class="keyword">if</span>(sum%i==<span class="number">0</span>)</span><br><span class="line">            dfs(<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,i,<span class="number">1</span>);<span class="comment">//从小到大枚举答案，遇到一个可直接跳出</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>,sum);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考了许多题解大佬，从9分到21分到33分到36分到63分到66分到AC……</p><p>而且跑的很慢QwQ</p><p><a href="https://www.luogu.org/record/show?rid=5402366" target="_blank" rel="noopener">1100ms</a></p>]]></content>
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度优先搜索，DFS </tag>
            
            <tag> 剪枝 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Luogu P1278 单词游戏</title>
      <link href="/2018/01/13/Luogu%20P1278/"/>
      <url>/2018/01/13/Luogu%20P1278/</url>
      <content type="html"><![CDATA[<p>这道题<del>据说</del>正解是dp……</p><p>然而我不会……</p><p>所以就写成一个裸的dfs，然后理所当然的T了</p><p><a href="https://www.luogu.org/record/show?rid=5334291" target="_blank" rel="noopener">A7T3</a></p><p>接着就被旁边的dalao嘲笑了</p><p>DTZ大佬的记录</p><p><a href="https://www.luogu.org/record/show?rid=5333743" target="_blank" rel="noopener">0ms</a></p><p>于是我想到了卡时（懒得改记忆化）</p><a id="more"></a><p>结果莫名就A了……</p><p>具体看代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 200</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">char</span> s[N/<span class="number">10</span>][N];</span><br><span class="line"><span class="keyword">int</span> a[N/<span class="number">10</span>][N],n,sum,ans,f[N],tim;</span><br><span class="line"><span class="keyword">bool</span> used[N/<span class="number">10</span>],flag;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">char</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x==s[y][<span class="number">0</span>]||x==<span class="string">'\0'</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;<span class="comment">//检查上个单词的最后一位与当前单词的第一位</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">char</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(clock()-tim&gt;<span class="number">10000</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;ans;</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;<span class="comment">//卡时基本操作，运行到这个时间就输出（虽然听说clock()贼慢，但会省下更多时间）</span></span><br><span class="line">    flag=<span class="literal">false</span>;<span class="comment">//记录当前点能否搜下去</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="comment">//枚举当前点</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!used[i]&amp;&amp;check(y,i))</span><br><span class="line">        &#123;</span><br><span class="line">            flag=<span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">int</span> len=<span class="built_in">strlen</span>(s[i]);</span><br><span class="line">            used[i]=<span class="literal">true</span>;</span><br><span class="line">            sum+=len;</span><br><span class="line">            dfs(x+<span class="number">1</span>,s[i][len<span class="number">-1</span>]);<span class="comment">//向下搜</span></span><br><span class="line">            sum-=len;</span><br><span class="line">            used[i]=<span class="literal">false</span>;<span class="comment">//回溯</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!flag)</span><br><span class="line">    &#123;</span><br><span class="line">        ans=max(sum,ans);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;<span class="comment">//搜不下去就更新答案</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tim=clock();</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d\n"</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(i!=n)</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%s\n"</span>,s[i]);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%s"</span>,s[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(<span class="number">1</span>,<span class="string">'\0'</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样一看这个也是道假的蓝题……</p><p>卡时有WA的风险，千万别随便学……</p><p>不过这里能A（虽然跑的很慢）</p><p><a href="https://www.luogu.org/record/show?rid=5334979" target="_blank" rel="noopener">136ms</a></p><p>代码有待优化，请各位julao自行修改QwQ。</p>]]></content>
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度优先搜索，DFS </tag>
            
            <tag> 卡时 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Luogu P1092 虫食算</title>
      <link href="/2018/01/10/Luogu%20P1092/"/>
      <url>/2018/01/10/Luogu%20P1092/</url>
      <content type="html"><![CDATA[<p>由于本人代码不精，连深搜都快忘光了……</p><p>难得写个题，于是来记录一下我的做法。</p><a id="more"></a><p>首先，这是一道深搜题，但很明显，一个一个字母去搜肯定会炸，怎么办呢？</p><p>我们很容易想到的就是一个一个位置的去搜。</p><p>大家都学过竖式加法，从右往左，从上往下，就按这个顺序一个位置一个位置的搜，很明显就要快一些。</p><p>那么这样就能过了吗？不是，还需要剪枝。</p><p>在这样一个搜索顺序的基础上，搜完一条加一次判定，虽然会用一些时间，但和它省下来的时间比简直不值一提。</p><p>废话不多说，看代码注释</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(3)<span class="comment">//手开O3优化</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 30</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">bool</span> flag,used[N];</span><br><span class="line"><span class="keyword">int</span> n,a[<span class="number">5</span>][N],num[N];</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">5</span>][N];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">()</span><span class="comment">//检查是否正确</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> add=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=n;i&gt;=<span class="number">1</span>;i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> A,B,C;</span><br><span class="line">        A=num[a[<span class="number">1</span>][i]],B=num[a[<span class="number">2</span>][i]],C=num[a[<span class="number">3</span>][i]];</span><br><span class="line">        <span class="keyword">if</span>((A+B+add)%n!=C)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        add=(A+B+add)/n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Prune</span><span class="params">()</span><span class="comment">//剪枝，如果最高位要进位或者无论进不进位都不能使等式成立即舍</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(num[a[<span class="number">1</span>][<span class="number">1</span>]]+num[a[<span class="number">2</span>][<span class="number">1</span>]]&gt;=n)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=n<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> A=num[a[<span class="number">1</span>][i]],B=num[a[<span class="number">2</span>][i]],C=num[a[<span class="number">3</span>][i]];</span><br><span class="line">        <span class="keyword">if</span>(A==<span class="number">-1</span>||B==<span class="number">-1</span>||C==<span class="number">-1</span>)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span>((A+B)%n!=C&amp;&amp;(A+B+<span class="number">1</span>)%n!=C)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Print</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>,num[i]);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Check</span><span class="params">()</span><span class="comment">//检查是否有字母没赋值</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">if</span>(num[i]==<span class="number">-1</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> t)</span><span class="comment">//x是列，y是行，t是进位</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(flag)<span class="comment">//标记数组，其实可用exit(0)代替</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(Prune())<span class="comment">//开局剪枝</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(Check())</span><br><span class="line">    &#123;</span><br><span class="line">       <span class="keyword">if</span>(check())</span><br><span class="line">        &#123;</span><br><span class="line">            Print();</span><br><span class="line">            flag=<span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;<span class="comment">//如果每个字母都赋值了就进行判定，可以省去一些无用的搜索时间</span></span><br><span class="line">    <span class="keyword">if</span>(num[a[y][x]]==<span class="number">-1</span>)<span class="comment">//如果这一位没赋值</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=n<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(!used[i])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(y!=<span class="number">3</span>)<span class="comment">//如果不是第三行</span></span><br><span class="line">                &#123;</span><br><span class="line">                    num[a[y][x]]=i;</span><br><span class="line">                    used[i]=<span class="literal">true</span>;</span><br><span class="line">                    dfs(x,y+<span class="number">1</span>,t);<span class="comment">//搜索同列下一行</span></span><br><span class="line">                    used[i]=<span class="literal">false</span>;</span><br><span class="line">                    num[a[y][x]]=<span class="number">-1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span><span class="comment">//是第三行</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">int</span> z=num[a[<span class="number">1</span>][x]]+num[a[<span class="number">2</span>][x]]+t;</span><br><span class="line">                    <span class="keyword">if</span>(z%n!=i)</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    used[i]=<span class="literal">true</span>;</span><br><span class="line">                    num[a[y][x]]=i;</span><br><span class="line">                    dfs(x<span class="number">-1</span>,<span class="number">1</span>,z/n);<span class="comment">//搜索下一列第一行，进位改变</span></span><br><span class="line">                    used[i]=<span class="literal">false</span>;</span><br><span class="line">                    num[a[y][x]]=<span class="number">-1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span><span class="comment">//这一位已被赋值</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(y!=<span class="number">3</span>)</span><br><span class="line">            dfs(x,y+<span class="number">1</span>,t);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> z=num[a[<span class="number">1</span>][x]]+num[a[<span class="number">2</span>][x]]+t;</span><br><span class="line">            <span class="keyword">if</span>(Prune())<span class="comment">//剪个枝</span></span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            dfs(x<span class="number">-1</span>,<span class="number">1</span>,z/n);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Getid</span><span class="params">()</span><span class="comment">//将字母转换成数字</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">3</span>;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)</span><br><span class="line">            a[i][j+<span class="number">1</span>]=s[i][j]-<span class="string">'A'</span>+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s%s%s"</span>,s[<span class="number">1</span>],s[<span class="number">2</span>],s[<span class="number">3</span>]);</span><br><span class="line">    Getid();</span><br><span class="line">    <span class="built_in">memset</span>(num,<span class="number">-1</span>,<span class="keyword">sizeof</span>(num));<span class="comment">//初值设为-1</span></span><br><span class="line">    dfs(n,<span class="number">1</span>,<span class="number">0</span>);<span class="comment">//搜索第n列第1行，进位为0</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注：<br>搜索顺序从0到n-1跑的要慢一些，建议学我，从n-1到0去搜</p><h1 id="从0到n-1"><a href="#从0到n-1" class="headerlink" title="从0到n-1"></a>从0到n-1</h1><p><a href="https://www.luogu.org/record/show?rid=5303961" target="_blank" rel="noopener">844ms</a></p><h1 id="从n-1到0"><a href="#从n-1到0" class="headerlink" title="从n-1到0"></a>从n-1到0</h1><p><a href="https://www.luogu.org/record/show?rid=5304076" target="_blank" rel="noopener">16ms</a></p><p>其实也就是这样不是</p><p>我的代码还有些地方可以优化，我也懒得改了orz（躺</p>]]></content>
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度优先搜索，DFS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Luogu P1047 校门外的树</title>
      <link href="/2017/12/27/Luogu%20P1047/"/>
      <url>/2017/12/27/Luogu%20P1047/</url>
      <content type="html"><![CDATA[<p>首先，如题目算法标签所言，线段树<del>（其实也是杂技写法）</del></p><p>不多赘述，建树、修改、查询一气呵成，就算是杂技，也要做杂技中的豪杰（逃）</p><a id="more"></a><p>代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 2000010</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> left,right;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> val,sum;</span><br><span class="line">&#125;;<span class="class"><span class="keyword">struct</span> <span class="title">node</span> <span class="title">a</span>[4*<span class="title">N</span>];</span></span><br><span class="line"><span class="keyword">int</span> data[N],n,m,x,y,b;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> z;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    a[p].sum=a[<span class="number">2</span>*p].sum+a[<span class="number">2</span>*p+<span class="number">1</span>].sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a[p].val!=<span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        a[<span class="number">2</span>*p].val=a[p].val;</span><br><span class="line">        a[<span class="number">2</span>*p+<span class="number">1</span>].val=a[p].val;</span><br><span class="line">        a[<span class="number">2</span>*p].sum=(a[<span class="number">2</span>*p].right-a[<span class="number">2</span>*p].left+<span class="number">1</span>)*a[p].val;</span><br><span class="line">        a[<span class="number">2</span>*p+<span class="number">1</span>].sum=(a[<span class="number">2</span>*p+<span class="number">1</span>].right-a[<span class="number">2</span>*p+<span class="number">1</span>].left+<span class="number">1</span>)*a[p].val;</span><br><span class="line">        a[p].val=<span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="comment">//pushup、pushdown是基本操作，不多讲</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    a[p].left=l;</span><br><span class="line">    a[p].right=r;</span><br><span class="line">    a[p].val=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(l==r)</span><br><span class="line">    &#123;</span><br><span class="line">        a[p].sum=data[l];</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid=(a[p].left+a[p].right)/<span class="number">2</span>;</span><br><span class="line">    build(<span class="number">2</span>*p,l,mid);</span><br><span class="line">    build(<span class="number">2</span>*p+<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">    a[p].sum=a[<span class="number">2</span>*p].sum+a[<span class="number">2</span>*p+<span class="number">1</span>].sum;</span><br><span class="line">&#125;<span class="comment">//建树也很简单</span></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a[p].left==l&amp;&amp;a[p].right==r)</span><br><span class="line">        <span class="keyword">return</span> a[p].sum;</span><br><span class="line">    pushdown(p);</span><br><span class="line">    <span class="keyword">int</span> mid=(a[p].left+a[p].right)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(r&lt;=mid)</span><br><span class="line">        <span class="keyword">return</span> query(<span class="number">2</span>*p,l,r);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(l&gt;mid)</span><br><span class="line">        <span class="keyword">return</span> query(<span class="number">2</span>*p+<span class="number">1</span>,l,r);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> query(<span class="number">2</span>*p,l,mid)+query(<span class="number">2</span>*p+<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">&#125;<span class="comment">//查询</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">long</span> <span class="keyword">long</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a[p].left==l&amp;&amp;a[p].right==r)</span><br><span class="line">    &#123;</span><br><span class="line">        a[p].sum=(l-r+<span class="number">1</span>)*d;</span><br><span class="line">        a[p].val=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    pushdown(p);</span><br><span class="line">    <span class="keyword">int</span> mid=(a[p].left+a[p].right)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(r&lt;=mid)</span><br><span class="line">        change(<span class="number">2</span>*p,l,r,d);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(l&gt;mid)</span><br><span class="line">        change(<span class="number">2</span>*p+<span class="number">1</span>,l,r,d);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        change(<span class="number">2</span>*p,l,mid,d);</span><br><span class="line">        change(<span class="number">2</span>*p+<span class="number">1</span>,mid+<span class="number">1</span>,r,d);</span><br><span class="line">    &#125;</span><br><span class="line">    pushup(p);</span><br><span class="line">&#125;<span class="comment">//此函数是与模板唯一的差别，将砍掉的树的值赋为0，这样就只需查询根节点处的区间和了</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n+<span class="number">1</span>;i++)</span><br><span class="line">        data[i]=<span class="number">1</span>;<span class="comment">//将每个位置的初值赋为1，方便查询时只查根节点。值得注意的是，由于这里是算了0这个位置的，所以n、x、y都要相应的加1</span></span><br><span class="line">    build(<span class="number">1</span>,<span class="number">1</span>,n+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;x&gt;&gt;y;</span><br><span class="line">        change(<span class="number">1</span>,x+<span class="number">1</span>,y+<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;query(<span class="number">1</span>,<span class="number">1</span>,n+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>比较简单不多说，具体注释看代码</p>]]></content>
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线段树 </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Luogu P1083 借教室线段树AC</title>
      <link href="/2017/12/26/Luogu%20P1083/"/>
      <url>/2017/12/26/Luogu%20P1083/</url>
      <content type="html"><![CDATA[<p>首先我们说这道题是线段树<del>（其实只是不会二分而已）</del></p><a id="more"></a><p>既然是线段树，那么我们首先当然是最简单的建树<br>建树代码如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    a[p].left=l;</span><br><span class="line">    a[p].right=r;</span><br><span class="line">    <span class="keyword">if</span>(l==r)</span><br><span class="line">    &#123;</span><br><span class="line">        a[p].num=data[l];</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid=(a[p].left+a[p].right)/<span class="number">2</span>;</span><br><span class="line">    build(<span class="number">2</span>*p,l,mid);</span><br><span class="line">    build(<span class="number">2</span>*p+<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">    pushup(p);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此处只需要查询区间最小值，所以建树是很基础的，就不多赘述了。<br>接下来是更新<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">long</span> <span class="keyword">long</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(f==<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(a[p].left==l&amp;&amp;a[p].right==r)</span><br><span class="line">    &#123;</span><br><span class="line">        a[p].val+=d;</span><br><span class="line">        a[p].num+=d;</span><br><span class="line">        <span class="keyword">if</span>(a[p].num&lt;<span class="number">0</span>)</span><br><span class="line">            f=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    pushdown(p);</span><br><span class="line">    <span class="keyword">int</span> mid=(a[p].left+a[p].right)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(r&lt;=mid)</span><br><span class="line">        add(<span class="number">2</span>*p,l,r,d);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(l&gt;mid)</span><br><span class="line">        add(<span class="number">2</span>*p+<span class="number">1</span>,l,r,d);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        add(<span class="number">2</span>*p,l,mid,d);</span><br><span class="line">        add(<span class="number">2</span>*p+<span class="number">1</span>,mid+<span class="number">1</span>,r,d);</span><br><span class="line">    &#125;</span><br><span class="line">    pushup(p);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>值得注意的是此处的标记是为了优化，如果不加就会T掉一个点<br>最后查询的时候只需查询根节点的区间最小值，只需查标记就可以了（但是先要更新）<br>总代码如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 1000010</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> left,right;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> val,num;</span><br><span class="line">&#125;;<span class="class"><span class="keyword">struct</span> <span class="title">node</span> <span class="title">a</span>[4*<span class="title">N</span>];</span></span><br><span class="line"><span class="keyword">int</span> data[N],n,m,x,y,z,b,f;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    a[p].num=min(a[<span class="number">2</span>*p].num,a[<span class="number">2</span>*p+<span class="number">1</span>].num);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a[p].val!=<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        a[<span class="number">2</span>*p].val+=a[p].val;</span><br><span class="line">        a[<span class="number">2</span>*p+<span class="number">1</span>].val+=a[p].val;</span><br><span class="line">        a[<span class="number">2</span>*p].num+=a[p].val;</span><br><span class="line">        a[<span class="number">2</span>*p+<span class="number">1</span>].num+=a[p].val;</span><br><span class="line">        a[p].val=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    a[p].left=l;</span><br><span class="line">    a[p].right=r;</span><br><span class="line">    <span class="keyword">if</span>(l==r)</span><br><span class="line">    &#123;</span><br><span class="line">        a[p].num=data[l];</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid=(a[p].left+a[p].right)/<span class="number">2</span>;</span><br><span class="line">    build(<span class="number">2</span>*p,l,mid);</span><br><span class="line">    build(<span class="number">2</span>*p+<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">    pushup(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">long</span> <span class="keyword">long</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(f==<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(a[p].left==l&amp;&amp;a[p].right==r)</span><br><span class="line">    &#123;</span><br><span class="line">        a[p].val+=d;</span><br><span class="line">        a[p].num+=d;</span><br><span class="line">        <span class="keyword">if</span>(a[p].num&lt;<span class="number">0</span>)</span><br><span class="line">            f=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    pushdown(p);</span><br><span class="line">    <span class="keyword">int</span> mid=(a[p].left+a[p].right)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(r&lt;=mid)</span><br><span class="line">        add(<span class="number">2</span>*p,l,r,d);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(l&gt;mid)</span><br><span class="line">        add(<span class="number">2</span>*p+<span class="number">1</span>,l,r,d);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        add(<span class="number">2</span>*p,l,mid,d);</span><br><span class="line">        add(<span class="number">2</span>*p+<span class="number">1</span>,mid+<span class="number">1</span>,r,d);</span><br><span class="line">    &#125;</span><br><span class="line">    pushup(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;data[i]);</span><br><span class="line">    build(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>,&amp;x,&amp;y,&amp;z);</span><br><span class="line">        add(<span class="number">1</span>,y,z,-x);</span><br><span class="line">        <span class="keyword">if</span>(f==<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"-1\n%d"</span>,i);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"0"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>虽然说是卡线段树，但其实并不会（虽然3448ms跑的比较慢）<br>总还是可以A</p>]]></content>
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线段树 </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>题解 Luogu P1205 【[USACO1.2]方块转换 Transformations】</title>
      <link href="/2017/10/07/Luogu%20P1205/"/>
      <url>/2017/10/07/Luogu%20P1205/</url>
      <content type="html"><![CDATA[<p>事先说明，发这种代码没有别的意思，纯属好玩<br>这种方法，是谁都会的……暴力……<br>看下来是要有一定毅力的，请谨慎选择是否浏览接下来的代码。</p><a id="more"></a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 10000000+110</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> flag,f,g,h,x,y,p,z;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> a[<span class="number">100</span>][<span class="number">100</span>],b[<span class="number">100</span>][<span class="number">100</span>],c[<span class="number">100</span>][<span class="number">100</span>],d[<span class="number">100</span>][<span class="number">100</span>],e[<span class="number">100</span>][<span class="number">100</span>],w[<span class="number">100</span>][<span class="number">100</span>],r[<span class="number">100</span>][<span class="number">100</span>],t[<span class="number">100</span>][<span class="number">100</span>];</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;a[i][j];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;d[i][j];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">            b[i][j]=a[j][i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">            c[i][j]=b[i][n+<span class="number">1</span>-j];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">            <span class="keyword">if</span>(c[i][j]!=d[i][j])</span><br><span class="line">            &#123;</span><br><span class="line">                flag=<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    <span class="keyword">if</span>(flag==<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;<span class="comment">//顺时针旋转90度</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">            e[i][j]=a[j][i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">            w[i][j]=e[n+<span class="number">1</span>-i][j];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">            <span class="keyword">if</span>(w[i][j]!=d[i][j])</span><br><span class="line">            &#123;</span><br><span class="line">                f=<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    <span class="keyword">if</span>(f==<span class="number">0</span>&amp;&amp;flag==<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="number">3</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;<span class="comment">//顺时针旋转180度（因为当时复制错了所以先3再2）</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">            r[i][j]=a[n+<span class="number">1</span>-i][j];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">            t[i][j]=r[i][n+<span class="number">1</span>-j];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">            <span class="keyword">if</span>(t[i][j]!=d[i][j])</span><br><span class="line">            &#123;</span><br><span class="line">                g=<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    <span class="keyword">if</span>(g==<span class="number">0</span>&amp;&amp;f==<span class="number">1</span>&amp;&amp;flag==<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;<span class="comment">//逆时针旋转90度</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">            t[i][j]=a[i][n+<span class="number">1</span>-j];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">            <span class="keyword">if</span>(t[i][j]!=d[i][j])</span><br><span class="line">            &#123;</span><br><span class="line">                x=<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    <span class="keyword">if</span>(x==<span class="number">0</span>&amp;&amp;g==<span class="number">1</span>&amp;&amp;f==<span class="number">1</span>&amp;&amp;flag==<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="number">4</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;<span class="comment">//镜像翻转</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">            t[i][j]=a[i][n+<span class="number">1</span>-j];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">            b[i][j]=t[j][i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">            c[i][j]=b[i][n+<span class="number">1</span>-j];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">            <span class="keyword">if</span>(c[i][j]!=d[i][j])</span><br><span class="line">            &#123;</span><br><span class="line">                y=<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    <span class="keyword">if</span>(y==<span class="number">0</span>&amp;&amp;x==<span class="number">1</span>&amp;&amp;g==<span class="number">1</span>&amp;&amp;f==<span class="number">1</span>&amp;&amp;flag==<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="number">5</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;<span class="comment">//5里面分3种情况，4+1，4+2，4+3，此板块接下来的两个板块分别模拟了这三种情况（都看得懂就不详细说明了）</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">            t[i][j]=a[i][n+<span class="number">1</span>-j];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">            b[i][j]=t[n+<span class="number">1</span>-i][j];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">            c[i][j]=b[i][n+<span class="number">1</span>-j];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">            <span class="keyword">if</span>(c[i][j]!=d[i][j])</span><br><span class="line">            &#123;</span><br><span class="line">                z=<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    <span class="keyword">if</span>(z==<span class="number">0</span>&amp;&amp;y==<span class="number">1</span>&amp;&amp;x==<span class="number">1</span>&amp;&amp;g==<span class="number">1</span>&amp;&amp;f==<span class="number">1</span>&amp;&amp;flag==<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="number">5</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;<span class="comment">//第二种</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">            t[i][j]=a[i][n+<span class="number">1</span>-j];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">            b[i][j]=t[n+<span class="number">1</span>-i][j];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">            c[i][j]=b[i][n+<span class="number">1</span>-j];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">            <span class="keyword">if</span>(c[i][j]!=d[i][j])</span><br><span class="line">            &#123;</span><br><span class="line">                p=<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    <span class="keyword">if</span>(p==<span class="number">0</span>&amp;&amp;z==<span class="number">1</span>&amp;&amp;y==<span class="number">1</span>&amp;&amp;x==<span class="number">1</span>&amp;&amp;g==<span class="number">1</span>&amp;&amp;f==<span class="number">1</span>&amp;&amp;flag==<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="number">5</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;<span class="comment">//第三种</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">            <span class="keyword">if</span>(a[i][j]!=d[i][j])</span><br><span class="line">            &#123;</span><br><span class="line">                h=<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    <span class="keyword">if</span>(h==<span class="number">0</span>&amp;&amp;x==<span class="number">1</span>&amp;&amp;y==<span class="number">1</span>&amp;&amp;z==<span class="number">1</span>&amp;&amp;p==<span class="number">1</span>&amp;&amp;g==<span class="number">1</span>&amp;&amp;f==<span class="number">1</span>&amp;&amp;flag==<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="number">6</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;<span class="comment">//无变换</span></span><br><span class="line">    <span class="keyword">if</span>(h==<span class="number">1</span>&amp;&amp;x==<span class="number">1</span>&amp;&amp;y==<span class="number">1</span>&amp;&amp;z==<span class="number">1</span>&amp;&amp;p==<span class="number">1</span>&amp;&amp;g==<span class="number">1</span>&amp;&amp;f==<span class="number">1</span>&amp;&amp;flag==<span class="number">1</span>)</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="number">7</span>;<span class="comment">//其他</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此题理论上来讲不能随便调换判断的顺序，比如我最初优先判断较为简单的6，结果不能输出最小值……<br>这里调换了2和3，是因为不存在顺时针转90度不可行，而顺时针转180度和逆时针转90度同时可行的情况。<br>所以说这是暴力解法，是谁都会的，只要你有耐心、有毅力，都能做得出来，没什么参考价值【滑稽】</p>]]></content>
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 暴力 </tag>
            
            <tag> 模拟 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>可读性极差的A+B</title>
      <link href="/2017/01/01/%E5%8F%AF%E8%AF%BB%E6%80%A7%E6%9E%81%E5%B7%AE%E7%9A%84A+B/"/>
      <url>/2017/01/01/%E5%8F%AF%E8%AF%BB%E6%80%A7%E6%9E%81%E5%B7%AE%E7%9A%84A+B/</url>
      <content type="html"><![CDATA[<p>请谨慎选择是否阅读QwQ</p><a id="more"></a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ________ return 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _____ cin&gt;&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __________ cout&lt;&lt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __ &gt;&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _ +</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ___ int</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ______ main()</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line">___ _________,___________;</span><br><span class="line">___ ______</span><br><span class="line">&#123;</span><br><span class="line">    _____ _________ __ ___________;</span><br><span class="line">    __________ _________ _ ___________;</span><br><span class="line">    ________;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 瞎jb搞 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>博客建成祭</title>
      <link href="/2002/06/30/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%88%90%E5%8A%9F%E7%A5%AD/"/>
      <url>/2002/06/30/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%88%90%E5%8A%9F%E7%A5%AD/</url>
      <content type="html"><![CDATA[<p>博客搭建成功啦，纪念一波QwQ</p>]]></content>
      
      <categories>
          
          <category> 祭 </category>
          
      </categories>
      
      
    </entry>
    
  
  
    
    <entry>
      <title>tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      <content type="html"><![CDATA[]]></content>
    </entry>
    
    <entry>
      <title>About</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      <content type="html"><![CDATA[<h1 id="个人简介"><a href="#个人简介" class="headerlink" title="个人简介"></a>个人简介</h1><p>高二 $HB$ 老年蒟蒻，顶级凉凉选手，什么都不会，什么都打挂。</p><p>每天被各路神仙吊打，文化课爆炸， $OI$ 又菜，每天专业垫底。</p><p>各大主要网站上的 $ID$ 为 $DimensionTripper$ 或 $Wepdekr$ 。</p><p>东方玩家， $STG$ 新手入门，底力为0， $FTG$ 手残搓不出技能。</p><p>老婆是咲夜</p><h1 id="联系方式"><a href="#联系方式" class="headerlink" title="联系方式"></a>联系方式</h1><p>$QQ\ :\ 1013006824$</p><p>$Email\ :\ kancolle233@yahoo.com$</p><p>欢迎各路神仙前来吊打。</p>]]></content>
    </entry>
    
    <entry>
      <title>文章分类</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      <content type="html"><![CDATA[]]></content>
    </entry>
    
    <entry>
      <title>My Friends</title>
      <link href="/links/index.html"/>
      <url>/links/index.html</url>
      <content type="html"><![CDATA[<h1 id="My-Friends"><a href="#My-Friends" class="headerlink" title="My Friends"></a>My Friends</h1><h2 id="蒟蒻的博客"><a href="#蒟蒻的博客" class="headerlink" title="蒟蒻的博客"></a>蒟蒻的博客</h2><blockquote><p>一个向着完美而潇洒前进的蒟蒻</p></blockquote><p><a href="https://dimensiontripper.github.io" target="_blank" rel="noopener"><button class="inline-block btn">DimensionTripper’s Blog</button></a></p><h2 id="本校大佬"><a href="#本校大佬" class="headerlink" title="本校大佬"></a>本校大佬</h2><p>以下排名不分先后，都能吊打我</p><hr><h3 id="ViXbob’s-Blog"><a href="#ViXbob’s-Blog" class="headerlink" title="ViXbob’s Blog"></a>ViXbob’s Blog</h3><blockquote><p>千古神犇 $\color{black}{\text{V}}\color{red}{\text{iXbob}}$</p></blockquote><p><a href="http://www.vixbob-lwc.pw/" target="_blank" rel="noopener"><button class="inline-block btn">ViXbob’s Blog</button></a></p><hr><h3 id="Edgration’s-Blog"><a href="#Edgration’s-Blog" class="headerlink" title="Edgration’s Blog"></a>Edgration’s Blog</h3><blockquote><p>$HB$ 红太阳 $\color{black}{\text{E}}\color{red}{\text{dgration}}$</p></blockquote><p><a href="http://edgration.com/" target="_blank" rel="noopener"><button class="inline-block btn">Edgration’s Blog</button></a></p><hr><h3 id="Zhyic’s-Blog"><a href="#Zhyic’s-Blog" class="headerlink" title="Zhyic’s Blog"></a>Zhyic’s Blog</h3><blockquote><p>$DP$ 与指针之王 $\color{black}{\text{Z}}\color{red}{\text{hyic}}$</p></blockquote><p><a href="https://zhongyic00.github.io/" target="_blank" rel="noopener"><button class="inline-block btn">Zhyic’s Blog</button></a>   </p><hr><h3 id="Aoki-Umi’s-Blog"><a href="#Aoki-Umi’s-Blog" class="headerlink" title="Aoki_Umi’s Blog"></a>Aoki_Umi’s Blog</h3><blockquote><p>神仙 $\color{black}{\text{A}}\color{red}{\text{oki_Umi}}$</p></blockquote><p><a href="https://aokiumi.github.io/" target="_blank" rel="noopener"><button class="inline-block btn">Aoki_Umi’s Blog</button></a></p><hr><h3 id="KL-lovesagiri’s-Blog"><a href="#KL-lovesagiri’s-Blog" class="headerlink" title="KL_lovesagiri’s Blog"></a>KL_lovesagiri’s Blog</h3><blockquote><p>神仙 $\color{black}{\text{K}}\color{red}{\text{L_lovesagiri}}$</p></blockquote><p><a href="https://kl-lovesagiri.github.io/" target="_blank" rel="noopener"><button class="inline-block btn">KL_lovesagiri’s Blog</button></a></p><h2 id="外校大佬"><a href="#外校大佬" class="headerlink" title="外校大佬"></a>外校大佬</h2><p>以下也都是能吊打我的神仙</p><h3 id="Shq’s-Blog"><a href="#Shq’s-Blog" class="headerlink" title="Shq’s Blog"></a>Shq’s Blog</h3><blockquote><p>Shq’s Blog</p><p>Real Artists simplify</p></blockquote><p><a href="https://blog.ishq.site/" target="_blank" rel="noopener"><button class="inline-block btn">Shq’s Blog</button></a></p><hr><h3 id="Edgaru089’s-Blog"><a href="#Edgaru089’s-Blog" class="headerlink" title="Edgaru089’s Blog"></a>Edgaru089’s Blog</h3><blockquote><p>神仙Edgru089</p><p>祀られる風の人間 / 祭祀风的人类</p></blockquote><p><a href="https://blog.edgaru089.ml/" target="_blank" rel="noopener"><button class="inline-block btn">Edgaru089’s Blog</button></a></p><hr><h3 id="Himself65’s-Blog"><a href="#Himself65’s-Blog" class="headerlink" title="Himself65’s Blog"></a>Himself65’s Blog</h3><blockquote><p>面包姐姐的博客</p><p>一个有趣的无聊者</p></blockquote><p><a href="https://www.himself65.com/" target="_blank" rel="noopener"><button class="inline-block btn">Himself65’s Blog</button></a></p><hr><h3 id="Spaceless’s-Blog"><a href="#Spaceless’s-Blog" class="headerlink" title="Spaceless’s Blog"></a>Spaceless’s Blog</h3><blockquote><p>Spaceless’s Blog</p><p>They Are There, In Time And Space, But I Am Timeless And Spaceless.</p></blockquote><p><a href="https://oier.xyz/" target="_blank" rel="noopener"><button class="inline-block btn">Spaceless’s Blog</button></a></p>]]></content>
    </entry>
    
  
</search>
